[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bot/config.js",
    "memberof": null,
    "longname": "src/bot/config.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/** Configuration for a bot */\r\nexport default class BotConfig {\r\n\t/**\r\n\t * @param {ConfigObject} [values] - The configuration to start with\r\n\t * @param {ConfigObject} [defaults] - The defaults to start with\r\n\t */\r\n\tconstructor(values, defaults) {\r\n\t\tthis._values = {};\r\n\t\t/** @type {ConfigObject} */\r\n\t\tthis.defaults = Object.assign({}, defaultDefaults, defaults);\r\n\t\tthis.loadDefaults();\r\n\t\tthis.values = values;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds to the current values, overwriting existing ones\r\n\t * @param {ConfigObject} values - The values to add\r\n\t */\r\n\tset values(values) {\r\n\t\tObject.assign(this._values, values);\r\n\t}\r\n\r\n\t/** @type {ConfigObject} */\r\n\tget values() {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the defaults to the current values\r\n\t * @param {boolean} [overwrite=false] - Whether or not the defaults should overwrite existing values\r\n\t */\r\n\tloadDefaults(overwrite = false) {\r\n\t\tif(overwrite) {\r\n\t\t\tObject.assign(this._values, this.defaults);\r\n\t\t} else {\r\n\t\t\tfor(const key of Object.keys(this.defaults)) {\r\n\t\t\t\tif(!(key in this._values)) this._values[key] = this.defaults[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Loads configuration from yargs, adding a bunch of default bot options\r\n\t * @param {Yargs} yargs - The yargs instance to use\r\n\t * @param {boolean} [addOptions=true] - Whether or not to add options for GRAF's config\r\n\t * @return {Yargs} The yargs instance\r\n\t */\r\n\tyargs(yargs, addOptions = true) {\r\n\t\tif(addOptions) {\r\n\t\t\tyargs\r\n\t\t\t\t// Authentication\r\n\t\t\t\t.option('token', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\talias: 't',\r\n\t\t\t\t\tdescribe: 'API token for the bot account',\r\n\t\t\t\t\tgroup: 'Authentication:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('email', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\talias: 'e',\r\n\t\t\t\t\tdescribe: 'Email of the Discord account for the bot to use',\r\n\t\t\t\t\tgroup: 'Authentication:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('password', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\talias: 'p',\r\n\t\t\t\t\tdescribe: 'Password of the Discord account for the bot to use',\r\n\t\t\t\t\tgroup: 'Authentication:'\r\n\t\t\t\t})\r\n\t\t\t\t.implies({ email: 'password', password: 'email' })\r\n\r\n\t\t\t\t// General\r\n\t\t\t\t.option('owner', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\talias: 'o',\r\n\t\t\t\t\tdescribe: 'Discord user ID of the bot owner',\r\n\t\t\t\t\tgroup: 'General:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('invite', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\talias: 'i',\r\n\t\t\t\t\tdescribe: 'Discord instant invite to a server to contact the owner',\r\n\t\t\t\t\tgroup: 'General:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('playing-game', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdefault: this.defaults.playingGame,\r\n\t\t\t\t\talias: 'g',\r\n\t\t\t\t\tdescribe: 'Text to show in the \"Playing...\" status',\r\n\t\t\t\t\tgroup: 'General:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('pagination-items', {\r\n\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\tdefault: this.defaults.paginationItems,\r\n\t\t\t\t\talias: 'I',\r\n\t\t\t\t\tdescribe: 'Number of items per page in paginated commands',\r\n\t\t\t\t\tgroup: 'General:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('selfbot', {\r\n\t\t\t\t\ttype: 'boolean',\r\n\t\t\t\t\tdefault: this.defaults.selfbot,\r\n\t\t\t\t\talias: 'B',\r\n\t\t\t\t\tdescribe: 'Whether or not the bot should run as a selfbot',\r\n\t\t\t\t\tgroup: 'General:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('auto-reconnect', {\r\n\t\t\t\t\ttype: 'boolean',\r\n\t\t\t\t\tdefault: this.defaults.autoReconnect,\r\n\t\t\t\t\talias: 'a',\r\n\t\t\t\t\tdescribe: 'Whether or not the bot should automatically reconnect when disconnected',\r\n\t\t\t\t\tgroup: 'General:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('storage', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdefault: this.defaults.storage,\r\n\t\t\t\t\talias: 's',\r\n\t\t\t\t\tdescribe: 'Path to storage directory',\r\n\t\t\t\t\tgroup: 'General:',\r\n\t\t\t\t\tnormalize: true\r\n\t\t\t\t})\r\n\t\t\t\t.option('update-check', {\r\n\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\tdefault: this.defaults.updateCheck,\r\n\t\t\t\t\talias: 'U',\r\n\t\t\t\t\tdescribe: 'How frequently to check for an update (in minutes, use 0 to disable)',\r\n\t\t\t\t\tgroup: 'General:'\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Commands\r\n\t\t\t\t.option('command-prefix', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdefault: this.defaults.commandPrefix,\r\n\t\t\t\t\talias: 'P',\r\n\t\t\t\t\tdescribe: 'Default command prefix (blank to use only mentions)',\r\n\t\t\t\t\tgroup: 'Commands:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('command-editable', {\r\n\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\tdefault: this.defaults.commandEditable,\r\n\t\t\t\t\talias: 'E',\r\n\t\t\t\t\tdescribe: 'How long a command message is editable (in seconds, use 0 to disable)',\r\n\t\t\t\t\tgroup: 'Commands:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('non-command-edit', {\r\n\t\t\t\t\ttype: 'boolean',\r\n\t\t\t\t\tdefault: this.defaults.nonCommandEdit,\r\n\t\t\t\t\talias: 'N',\r\n\t\t\t\t\tdescribe: 'Whether or not a non-command message can be edited into a command',\r\n\t\t\t\t\tgroup: 'Commands:'\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Logging\r\n\t\t\t\t.option('log', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdefault: this.defaults.log,\r\n\t\t\t\t\talias: 'l',\r\n\t\t\t\t\tdescribe: 'Path to log file',\r\n\t\t\t\t\tgroup: 'Logging:',\r\n\t\t\t\t\tnormalize: true\r\n\t\t\t\t})\r\n\t\t\t\t.option('log-max-size', {\r\n\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\tdefault: this.defaults.logMaxSize,\r\n\t\t\t\t\tdefaultDescription: '5MB',\r\n\t\t\t\t\talias: 'S',\r\n\t\t\t\t\tdescribe: 'Maximum size of single log file (in bytes)',\r\n\t\t\t\t\tgroup: 'Logging:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('log-max-files', {\r\n\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\tdefault: this.defaults.logMaxFiles,\r\n\t\t\t\t\talias: 'F',\r\n\t\t\t\t\tdescribe: 'Maximum amount of log files to keep',\r\n\t\t\t\t\tgroup: 'Logging:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('log-level', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdefault: this.defaults.logLevel,\r\n\t\t\t\t\talias: 'L',\r\n\t\t\t\t\tdescribe: 'Log level to output to the log file (error, warn, info, verbose, message, debug)',\r\n\t\t\t\t\tgroup: 'Logging:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('console-level', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdefault: this.defaults.consoleLevel,\r\n\t\t\t\t\talias: 'C',\r\n\t\t\t\t\tdescribe: 'Log level to output to the console (error, warn, info, verbose, message, debug)',\r\n\t\t\t\t\tgroup: 'Logging:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('log-messages', {\r\n\t\t\t\t\ttype: 'boolean',\r\n\t\t\t\t\tdefault: false,\r\n\t\t\t\t\talias: 'M',\r\n\t\t\t\t\tdescribe: 'Whether or not all chat messages should be logged',\r\n\t\t\t\t\tgroup: 'Logging:'\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// Stat sites\r\n\t\t\t\t.option('carbon-url', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdescribe: 'The Carbon submission URL (for bot creators)',\r\n\t\t\t\t\tgroup: 'Stats:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('carbon-key', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdescribe: 'The Carbon key for the bot (for bot creators)',\r\n\t\t\t\t\tgroup: 'Stats:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('bdpw-url', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdefault: 'https://bots.discord.pw/api',\r\n\t\t\t\t\tdescribe: 'The bots.discord.pw API URL (for bot creators)',\r\n\t\t\t\t\tgroup: 'Stats:'\r\n\t\t\t\t})\r\n\t\t\t\t.option('bdpw-key', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\tdescribe: 'The bots.discord.pw key for the bot (for bot creators)',\r\n\t\t\t\t\tgroup: 'Stats:'\r\n\t\t\t\t})\r\n\r\n\t\t\t\t.option('config', {\r\n\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\talias: 'c',\r\n\t\t\t\t\tdescribe: 'Path to JSON/YAML config file',\r\n\t\t\t\t\tgroup: 'Special:',\r\n\t\t\t\t\tnormalize: true,\r\n\t\t\t\t\tconfig: true,\r\n\t\t\t\t\tconfigParser: configFile => {\r\n\t\t\t\t\t\tconst extension = require('path').extname(configFile).toLowerCase();\r\n\t\t\t\t\t\tif(extension === '.json') {\r\n\t\t\t\t\t\t\treturn JSON.parse(require('fs').readFileSync(configFile));\r\n\t\t\t\t\t\t} else if(extension === '.yml' || extension === '.yaml') {\r\n\t\t\t\t\t\t\treturn require('js-yaml').safeLoad(require('fs').readFileSync(configFile));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthrow new Error('Unknown config file type.');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.values = yargs.argv;\r\n\t\treturn yargs;\r\n\t}\r\n}\r\n\r\nconst defaultDefaults = {\r\n\tplayingGame: 'Message for help',\r\n\tpaginationItems: 10,\r\n\tupdateCheck: 60,\r\n\tcommandPrefix: '!',\r\n\tcommandEditable: 30,\r\n\tnonCommandEdit: true,\r\n\tselfbot: false,\r\n\tautoReconnect: true,\r\n\tstorage: 'bot-storage',\r\n\tlog: 'bot.log',\r\n\tlogMaxSize: 5242880,\r\n\tlogMaxFiles: 5,\r\n\tlogLevel: 'info',\r\n\tconsoleLevel: 'info'\r\n};\r\n\r\n/**\r\n * @typedef {Object} ConfigObject\r\n * @property {string} [name] - Name of the bot (required to create a client)\r\n * @property {string} [version] - Version of the bot (should follow semver, required to create a client)\r\n * @property {string} [about] - Text information about the bot for the about command\r\n * @property {string} [updateURL] - URL to a package.json file to check for updates with\r\n * @property {string} [token] - The bot account API token to log in with\r\n * @property {string} [email] - The bot account email to log in with\r\n * @property {string} [password] - The bot account password to log in with\r\n * @property {ClientOptions} [clientOptions] - The options to pass to the Client constructor\r\n * @property {string} [owner] - The ID of the bot owner's Discord account\r\n * @property {boolean} [selfbot] - Whether or not the bot should be running as a selfbot\r\n * @property {boolean} [autoReconnect=true] - Whether or not the bot should automatically reconnect upon disconnection\r\n * @property {boolean} [logMessages=true] - Whether or not all chat messages should be printed to the console\r\n * @property {string} [storage=bot-storage] - Path to the local storage directory\r\n * @property {string} [playingGame=Message-for-help] - Text to show the bot playing\r\n * @property {number} [paginationItems=10] - Maximum number of items per page the default commands use when paginating\r\n * @property {number} [updateCheck=60] - How frequently to check for updates (in minutes)\r\n * @property {string} [commandPrefix=!] - The default command prefix (empty/null for mentions only)\r\n * @property {number} [commandEditable=30] - How long commands are editable (in seconds)\r\n * @property {boolean} [nonCommandEdit=true] - Whether or not commands will be run in messages that were edited that previously didn't have any commands\r\n * @property {string} [log=bot.log] - Path to the log file\r\n * @property {number} [logMaxSize=5242880] - Maximum size of the log file before splitting it (in bytes)\r\n * @property {number} [logMaxFiles=5] - Maximum log files to keep\r\n * @property {string} [logLevel=info] - The log level to output to the log file (error, warn, info, verbose, message, debug)\r\n * @property {string} [consoleLevel=info] - The log level to output to the console (error, warn, info, verbose, message, debug)\r\n * @property {string} [carbonUrl] - The Carbon submission URL (for bot creators)\r\n * @property {string} [carbonKey] - The Carbon key for the bot (for bot creators)\r\n * @property {string} [bdpwUrl=https://bots.discord.pw/api] - The bots.discord.pw API URL (for bot creators)\r\n * @property {string} [bdpwKey] - The bots.discord.pw key for the bot (for bot creators)\r\n */\r\n\r\n/** @external {ClientOptions} https://hydrabolt.github.io/discord.js/#!/docs/tag/master/typedef/ClientOptions */\r\n/** @external {Yargs} http://yargs.js.org/docs/ */\r\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BotConfig",
    "memberof": "src/bot/config.js",
    "longname": "src/bot/config.js~BotConfig",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/bot/config.js",
    "importStyle": "BotConfig",
    "description": "Configuration for a bot",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#constructor",
    "access": null,
    "description": "",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConfigObject"
        ],
        "spread": false,
        "optional": true,
        "name": "values",
        "description": "The configuration to start with"
      },
      {
        "nullable": null,
        "types": [
          "ConfigObject"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "The defaults to start with"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_values",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#_values",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaults",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#defaults",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "ConfigObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#values",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#values",
    "access": null,
    "description": "Adds to the current values, overwriting existing ones",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConfigObject"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "The values to add"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#values",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "ConfigObject"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "loadDefaults",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#loadDefaults",
    "access": null,
    "description": "Adds the defaults to the current values",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "overwrite",
        "description": "Whether or not the defaults should overwrite existing values"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "yargs",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#yargs",
    "access": null,
    "description": "Loads configuration from yargs, adding a bunch of default bot options",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Yargs"
        ],
        "spread": false,
        "optional": false,
        "name": "yargs",
        "description": "The yargs instance to use"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "addOptions",
        "description": "Whether or not to add options for GRAF's config"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Yargs"
      ],
      "spread": false,
      "description": "The yargs instance"
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/bot/config.js~BotConfig",
    "longname": "src/bot/config.js~BotConfig#values",
    "access": null,
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultDefaults",
    "memberof": "src/bot/config.js",
    "longname": "src/bot/config.js~defaultDefaults",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/bot/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ConfigObject",
    "memberof": "src/bot/config.js",
    "longname": "src/bot/config.js~ConfigObject",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "Name of the bot (required to create a client)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "version",
        "description": "Version of the bot (should follow semver, required to create a client)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "about",
        "description": "Text information about the bot for the about command"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "updateURL",
        "description": "URL to a package.json file to check for updates with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "token",
        "description": "The bot account API token to log in with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "email",
        "description": "The bot account email to log in with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "password",
        "description": "The bot account password to log in with"
      },
      {
        "nullable": null,
        "types": [
          "ClientOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "clientOptions",
        "description": "The options to pass to the Client constructor"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "owner",
        "description": "The ID of the bot owner's Discord account"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "selfbot",
        "description": "Whether or not the bot should be running as a selfbot"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "autoReconnect",
        "description": "Whether or not the bot should automatically reconnect upon disconnection"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "logMessages",
        "description": "Whether or not all chat messages should be printed to the console"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "bot-storage",
        "defaultRaw": "bot-storage",
        "name": "storage",
        "description": "Path to the local storage directory"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Message-for-help",
        "defaultRaw": "Message-for-help",
        "name": "playingGame",
        "description": "Text to show the bot playing"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "paginationItems",
        "description": "Maximum number of items per page the default commands use when paginating"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "60",
        "defaultRaw": 60,
        "name": "updateCheck",
        "description": "How frequently to check for updates (in minutes)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "!",
        "defaultRaw": "!",
        "name": "commandPrefix",
        "description": "The default command prefix (empty/null for mentions only)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "commandEditable",
        "description": "How long commands are editable (in seconds)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "nonCommandEdit",
        "description": "Whether or not commands will be run in messages that were edited that previously didn't have any commands"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "bot.log",
        "defaultRaw": "bot.log",
        "name": "log",
        "description": "Path to the log file"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5242880",
        "defaultRaw": 5242880,
        "name": "logMaxSize",
        "description": "Maximum size of the log file before splitting it (in bytes)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "logMaxFiles",
        "description": "Maximum log files to keep"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "info",
        "defaultRaw": "info",
        "name": "logLevel",
        "description": "The log level to output to the log file (error, warn, info, verbose, message, debug)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "info",
        "defaultRaw": "info",
        "name": "consoleLevel",
        "description": "The log level to output to the console (error, warn, info, verbose, message, debug)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "carbonUrl",
        "description": "The Carbon submission URL (for bot creators)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "carbonKey",
        "description": "The Carbon key for the bot (for bot creators)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "https://bots.discord.pw/api",
        "defaultRaw": "https://bots.discord.pw/api",
        "name": "bdpwUrl",
        "description": "The bots.discord.pw API URL (for bot creators)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "bdpwKey",
        "description": "The bots.discord.pw key for the bot (for bot creators)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfigObject"
    }
  },
  {
    "__docId__": 13,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ClientOptions",
    "externalLink": "https://hydrabolt.github.io/discord.js/#!/docs/tag/master/typedef/ClientOptions",
    "memberof": "src/bot/config.js",
    "longname": "src/bot/config.js~ClientOptions",
    "access": null,
    "description": null
  },
  {
    "__docId__": 14,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Yargs",
    "externalLink": "http://yargs.js.org/docs/",
    "memberof": "src/bot/config.js",
    "longname": "src/bot/config.js~Yargs",
    "access": null,
    "description": null
  },
  {
    "__docId__": 15,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bot/index.js",
    "memberof": null,
    "longname": "src/bot/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Discord from 'discord.js';\r\nimport { LocalStorage } from 'node-localstorage';\r\nimport winston from 'winston';\r\nimport request from 'request-promise-native';\r\nimport semver from 'semver';\r\nimport Config from './config';\r\nimport Permissions from './permissions';\r\nimport Util from './util';\r\nimport Registry from '../commands/registry';\r\nimport Dispatcher from '../commands/dispatcher';\r\nimport Module from '../commands/module';\r\nimport CommandBuilder from '../commands/builder';\r\nimport Setting from '../storage/models/setting';\r\nimport SettingStorage from '../storage/settings';\r\nimport ModRoleStorage from '../storage/mod-roles';\r\nimport AllowedChannelStorage from '../storage/allowed-channels';\r\n\r\nimport HelpCommand from '../commands/info/help';\r\nimport AboutCommand from '../commands/info/about';\r\nimport ListModulesCommand from '../commands/modules/list';\r\nimport ToggleModuleCommand from '../commands/modules/toggle';\r\nimport EnableModuleCommand from '../commands/modules/enable';\r\nimport DisableModuleCommand from '../commands/modules/disable';\r\nimport ListModRolesCommand from '../commands/mod-roles/list';\r\nimport AddModRoleCommand from '../commands/mod-roles/add';\r\nimport DeleteModRoleCommand from '../commands/mod-roles/delete';\r\nimport ClearModRolesCommand from '../commands/mod-roles/clear';\r\nimport ListAllowedChannelsCommand from '../commands/channels/list-allowed';\r\nimport AllowChannelCommand from '../commands/channels/allow';\r\nimport DisallowChannelCommand from '../commands/channels/disallow';\r\nimport ClearAllowedChannelsCommand from '../commands/channels/clear-allowed';\r\nimport PrefixCommand from '../commands/util/prefix';\r\nimport EvalCommand from '../commands/util/eval';\r\nimport ShowBlacklistCommand from '../commands/blacklist/show';\r\nimport BlacklistUserCommand from '../commands/blacklist/user';\r\nimport BlacklistGuildCommand from '../commands/blacklist/guild';\r\n\r\n/** A Discord bot that has its own command registry, storage, utilities, etc. */\r\nexport default class Bot {\r\n\t/** @param {ConfigObject} config - The configuration to use */\r\n\tconstructor(config) {\r\n\t\t/** @type {Client} */\r\n\t\tthis.client = null;\r\n\t\t/** @type {CommandDispatcher} */\r\n\t\tthis.dispatcher = null;\r\n\t\t/** @type {BotConfig} */\r\n\t\tthis.config = new Config(config);\r\n\t\t/** @type {BotPermissions} */\r\n\t\tthis.permissions = null;\r\n\t\t/** @type {BotUtil} */\r\n\t\tthis.util = null;\r\n\t\t/** @type {LocalStorage} */\r\n\t\tthis.localStorage = null;\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {SettingStorage} settings\r\n\t\t * @property {ModRoleStorage} modRoles\r\n\t\t * @property {AllowedChannelStorage} allowedChannels\r\n\t\t */\r\n\t\tthis.storage = {\r\n\t\t\tsettings: null,\r\n\t\t\tmodRoles: null,\r\n\t\t\tallowedChannels: null\r\n\t\t};\r\n\t\t/** @type {Object} */\r\n\t\tthis.evalObjects = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates all bot classes and storages, and creates the client\r\n\t * @return {Client} The bot client\r\n\t */\r\n\tcreateClient() {\r\n\t\tif(this.client) throw new Error('Client has already been created.');\r\n\t\tconst config = this.config.values;\r\n\t\tif(config.selfbot) config.clientOptions.bot = false;\r\n\r\n\t\t// Verify some stuff\r\n\t\tif(!config.token && (!config.email || !config.password)) throw new Error('Invalid credentials; either \"token\" or both \"email\" and \"password\" must be specified on the config.');\r\n\t\tif(!config.name) throw new Error('\"name\" must be specified on the config.');\r\n\t\tif(!config.version) throw new Error('\"version\" must be specified on the config.');\r\n\r\n\t\t// Output safe config\r\n\t\tconst debugConfig = Object.assign({}, config);\r\n\t\tif(debugConfig.email) debugConfig.email = '--snip--';\r\n\t\tif(debugConfig.password) debugConfig.password = '--snip--';\r\n\t\tif(debugConfig.token) debugConfig.token = '--snip--';\r\n\t\tif(debugConfig.carbonKey) debugConfig.carbonKey = '--snip--';\r\n\t\tif(debugConfig.bdpwKey) debugConfig.bdpwKey = '--snip--';\r\n\t\tfor(const key of Object.keys(debugConfig)) if(key.length === 1 || key.includes('-')) delete debugConfig[key];\r\n\t\tthis.logger.debug('Configuration:', debugConfig);\r\n\r\n\t\t// Create client and bot classes\r\n\t\tconst clientOptions = Object.assign({}, defaultClientOptions, config.clientOptions, { autoReconnect: config.autoReconnect });\r\n\t\tconst client = new Discord.Client(clientOptions);\r\n\t\tthis.client = client;\r\n\t\tthis.localStorage = new LocalStorage(config.storage);\r\n\t\tthis.storage.settings = new SettingStorage(this.localStorage, this.logger);\r\n\t\tthis.storage.modRoles = new ModRoleStorage(this.localStorage, this.logger);\r\n\t\tthis.storage.allowedChannels = new AllowedChannelStorage(this.localStorage, this.logger);\r\n\t\tthis.dispatcher = new Dispatcher(this);\r\n\t\tthis.permissions = new Permissions(client, this.storage.modRoles, this.storage.settings, this.config);\r\n\t\tthis.util = new Util(client, this.storage.settings, this.config);\r\n\t\tthis.logger.info('Client created.', clientOptions);\r\n\r\n\t\t// Set up logging and the playing game text\r\n\t\tclient.on('error', err => { this.logger.error(err); });\r\n\t\tclient.on('warn', msg => { this.logger.warn(msg); });\r\n\t\tclient.on('debug', msg => { this.logger.debug(msg); });\r\n\t\tclient.on('disconnected', () => { this.logger.warn('Disconnected.'); });\r\n\t\tclient.on('reconnecting', () => { this.logger.warn('Reconnecting...'); });\r\n\t\tclient.on('guildCreate', guild => { this.logger.info(`Joined guild ${guild} (ID: ${guild.id}).`); });\r\n\t\tclient.on('guildDelete', guild => { this.logger.info(`Left guild ${guild} (ID: ${guild.id}).`); });\r\n\t\tclient.on('ready', () => {\r\n\t\t\tthis.logger.info(`Bot is ready; logged in as ${client.user.username}#${client.user.discriminator} (ID: ${client.user.id})`);\r\n\t\t\tif(config.playingGame) client.user.setStatus(null, config.playingGame);\r\n\t\t});\r\n\r\n\t\t// Set up command handling\r\n\t\tconst messageErr = err => { this.logger.error('Error while handling message. This may be an issue with GRAF.', err); };\r\n\t\tclient.on('message', message => {\r\n\t\t\tthis._logMessage(message);\r\n\t\t\tthis.dispatcher.handleMessage(message).catch(messageErr);\r\n\t\t});\r\n\t\tclient.on('messageUpdate', (oldMessage, newMessage) => {\r\n\t\t\tthis._logMessage(newMessage, oldMessage);\r\n\t\t\tthis.dispatcher.handleMessage(newMessage, oldMessage).catch(messageErr);\r\n\t\t});\r\n\r\n\t\t// Set up guild blacklisting\r\n\t\tclient.on('guildCreate', guild => {\r\n\t\t\tconst guilds = this.storage.settings.getValue(null, 'blacklisted-guilds');\r\n\t\t\tif(guilds && guilds.includes(guild.id)) {\r\n\t\t\t\tthis.logger.info('Guild is blacklisted; leaving.', { name: guild.name, id: guild.id });\r\n\t\t\t\tguild.leave();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Fetch the owner\r\n\t\tif(config.owner) {\r\n\t\t\tclient.once('ready', () => {\r\n\t\t\t\tclient.fetchUser(config.owner).catch((err) => { this.logger.error('Unable to fetch the owner user.', err); });\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Set up update checking\r\n\t\tif(config.updateURL) {\r\n\t\t\tclient.once('ready', () => {\r\n\t\t\t\tthis._checkForUpdate();\r\n\t\t\t\tif(config.updateCheck > 0) setInterval(this._checkForUpdate.bind(this), config.updateCheck * 60 * 1000);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Set up Carbon guild count updates\r\n\t\tif(config.carbonUrl && config.carbonKey) {\r\n\t\t\tclient.once('ready', this._sendCarbonStats.bind(this));\r\n\t\t\tclient.on('guildCreate', this._sendCarbonStats.bind(this));\r\n\t\t\tclient.on('guildDelete', this._sendCarbonStats.bind(this));\r\n\t\t}\r\n\r\n\t\t// Set up BDPW guild count updates\r\n\t\tif(config.bdpwUrl && config.bdpwKey) {\r\n\t\t\tclient.once('ready', this._sendBDPWStats.bind(this));\r\n\t\t\tclient.on('guildCreate', this._sendBDPWStats.bind(this));\r\n\t\t\tclient.on('guildDelete', this._sendBDPWStats.bind(this));\r\n\t\t}\r\n\r\n\t\t// Log in\r\n\t\tconst loginErr = err => {\r\n\t\t\tthis.logger.error('Failed to login.');\r\n\t\t\tthis.logger.error(err);\r\n\t\t};\r\n\t\tif(config.token) {\r\n\t\t\tthis.logger.info('Logging in with token...');\r\n\t\t\tclient.login(config.token).catch(loginErr);\r\n\t\t} else {\r\n\t\t\tthis.logger.info('Logging in with email and password...');\r\n\t\t\tclient.login(config.email, config.password).catch(loginErr);\r\n\t\t}\r\n\r\n\t\treturn client;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a command builder\r\n\t * @param {CommandInfo} [info] - The command information\r\n\t * @param {CommandBuilderFunctions} [funcs] - The command functions to set\r\n\t * @return {CommandBuilder} The builder\r\n\t */\r\n\tbuildCommand(info = null, funcs = null) {\r\n\t\treturn new CommandBuilder(this, info, funcs);\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a single command to the bot's registry\r\n\t * @param {Command|function} command - Either a Command instance, or a constructor for one\r\n\t * @return {Bot} This bot\r\n\t * @see {@link Bot#registerCommands}\r\n\t */\r\n\tregisterCommand(command) {\r\n\t\treturn this.registerCommands([command]);\r\n\t}\r\n\r\n\t/**\r\n\t * Registers multiple commands to the bot's registry\r\n\t * @param {Command[]|function[]} commands - An array of Command instances or constructors\r\n\t * @return {Bot} This bot\r\n\t */\r\n\tregisterCommands(commands) {\r\n\t\tif(!Array.isArray(commands)) throw new TypeError('Commands must be an array.');\r\n\t\tfor(let i = 0; i < commands.length; i++) if(typeof commands[i] === 'function') commands[i] = new commands[i](this);\r\n\t\tthis.registry.registerCommands(commands);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a single module to the bot's registry\r\n\t * @param {Module|function|string[]} module - A Module instance, a constructor, or an array of [ID, Name]\r\n\t * @return {Bot} This bot\r\n\t * @see {@link Bot#registerModules}\r\n\t */\r\n\tregisterModule(module) {\r\n\t\treturn this.registerModules([module]);\r\n\t}\r\n\r\n\t/**\r\n\t * Registers multiple modules to the bot's registry\r\n\t * @param {Module[]|function[]|Array[]} modules - An array of Module instances, constructors, or arrays of [ID, Name]\r\n\t * @return {Bot} This bot\r\n\t */\r\n\tregisterModules(modules) {\r\n\t\tif(!Array.isArray(modules)) throw new TypeError('Modules must be an array.');\r\n\t\tfor(let i = 0; i < modules.length; i++) {\r\n\t\t\tif(typeof modules[i] === 'function') {\r\n\t\t\t\tmodules[i] = new modules[i](this);\r\n\t\t\t} else if(Array.isArray(modules[i])) {\r\n\t\t\t\tmodules[i] = new Module(this, ...modules[i]);\r\n\t\t\t} else if(!(modules[i] instanceof Module)) {\r\n\t\t\t\tmodules[i] = new Module(this, modules[i].id, modules[i].name, modules[i].commands);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.registry.registerModules(modules);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers both the default modules and commands to the bot's registry\r\n\t * @return {Bot} This bot\r\n\t */\r\n\tregisterDefaults() {\r\n\t\tthis.registerDefaultModules();\r\n\t\tthis.registerDefaultCommands();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers the default modules to the bot's registry\r\n\t * @return {Bot} This bot\r\n\t */\r\n\tregisterDefaultModules() {\r\n\t\tthis.registerModules([\r\n\t\t\t['info', 'Information'],\r\n\t\t\t['mod-roles', 'Moderator roles'],\r\n\t\t\t['channels', 'Channels'],\r\n\t\t\t['util', 'Utility'],\r\n\t\t\t['modules', 'Modules', true],\r\n\t\t\t['blacklist', 'Blacklisting', true]\r\n\t\t]);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers the default commands to the bot's registry\r\n\t * @param {Object} [options] - Object specifying what commands to register\r\n\t * @param {boolean} [options.about=true] - Whether or not to register the built-in about command\r\n\t * @param {boolean} [options.modRoles=true] - Whether or not to register the built-in mod roles commands\r\n\t * @param {boolean} [options.channels=true] - Whether or not to register the built-in channels commands\r\n\t * @param {boolean} [options.blacklist=true] - Whether or not to register the built-in blacklist commands\r\n\t * @return {Bot} This bot\r\n\t */\r\n\tregisterDefaultCommands({ about = true, modRoles = true, channels = true, blacklist = true } = {}) {\r\n\t\tthis.registerCommands([\r\n\t\t\tHelpCommand,\r\n\t\t\tPrefixCommand,\r\n\t\t\tEvalCommand,\r\n\t\t\tListModulesCommand,\r\n\t\t\tToggleModuleCommand,\r\n\t\t\tEnableModuleCommand,\r\n\t\t\tDisableModuleCommand\r\n\t\t]);\r\n\t\tif(about) this.registerCommand(AboutCommand);\r\n\t\tif(modRoles) {\r\n\t\t\tthis.registerCommands([\r\n\t\t\t\tListModRolesCommand,\r\n\t\t\t\tAddModRoleCommand,\r\n\t\t\t\tDeleteModRoleCommand,\r\n\t\t\t\tClearModRolesCommand\r\n\t\t\t]);\r\n\t\t}\r\n\t\tif(channels) {\r\n\t\t\tthis.registerCommands([\r\n\t\t\t\tListAllowedChannelsCommand,\r\n\t\t\t\tAllowChannelCommand,\r\n\t\t\t\tDisallowChannelCommand,\r\n\t\t\t\tClearAllowedChannelsCommand\r\n\t\t\t]);\r\n\t\t}\r\n\t\tif(blacklist) {\r\n\t\t\tthis.registerCommands([\r\n\t\t\t\tShowBlacklistCommand,\r\n\t\t\t\tBlacklistUserCommand,\r\n\t\t\t\tBlacklistGuildCommand\r\n\t\t\t]);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a single object to be usable by the eval command\r\n\t * @param {string} key - The key for the object\r\n\t * @param {Object} obj - The object\r\n\t * @return {Bot} This bot\r\n\t * @see {@link Bot#registerEvalObjects}\r\n\t */\r\n\tregisterEvalObject(key, obj) {\r\n\t\tconst registerObj = {};\r\n\t\tregisterObj[key] = obj;\r\n\t\treturn this.registerEvalObjects(registerObj);\r\n\t}\r\n\r\n\t/**\r\n\t * Registers multiple objects to be usable by the eval command\r\n\t * @param {Object} obj - An object of keys: values\r\n\t * @return {Bot} This bot\r\n\t */\r\n\tregisterEvalObjects(obj) {\r\n\t\tObject.assign(this.evalObjects, obj);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/** @type {CommandRegistry} */\r\n\tget registry() {\r\n\t\tif(!this._registry) this._registry = new Registry(this.logger);\r\n\t\treturn this._registry;\r\n\t}\r\n\r\n\t/** @type {Logger} */\r\n\tget logger() {\r\n\t\tif(!this._logger) {\r\n\t\t\tthis._logger = new winston.Logger({\r\n\t\t\t\tlevels: {\r\n\t\t\t\t\terror: 0,\r\n\t\t\t\t\twarn: 1,\r\n\t\t\t\t\tinfo: 2,\r\n\t\t\t\t\tverbose: 3,\r\n\t\t\t\t\tmessage: 4,\r\n\t\t\t\t\tdebug: 5\r\n\t\t\t\t},\r\n\t\t\t\tcolors: {\r\n\t\t\t\t\terror: 'red',\r\n\t\t\t\t\twarn: 'yellow',\r\n\t\t\t\t\tinfo: 'green',\r\n\t\t\t\t\tverbose: 'blue',\r\n\t\t\t\t\tmessage: 'cyan',\r\n\t\t\t\t\tdebug: 'magenta'\r\n\t\t\t\t},\r\n\t\t\t\ttransports: [\r\n\t\t\t\t\tnew winston.transports.Console({\r\n\t\t\t\t\t\tlevel: this.config.values.consoleLevel,\r\n\t\t\t\t\t\tcolorize: true,\r\n\t\t\t\t\t\ttimestamp: true,\r\n\t\t\t\t\t\thandleExceptions: true,\r\n\t\t\t\t\t\thumanReadableUnhandledException: true\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\tif(this.config.values.log) {\r\n\t\t\t\tthis._logger.add(winston.transports.File, {\r\n\t\t\t\t\tlevel: this.config.values.logLevel,\r\n\t\t\t\t\tfilename: this.config.values.log,\r\n\t\t\t\t\tmaxsize: this.config.values.logMaxSize,\r\n\t\t\t\t\tmaxFiles: this.config.values.logMaxFiles,\r\n\t\t\t\t\ttailable: true,\r\n\t\t\t\t\tjson: false,\r\n\t\t\t\t\thandleExceptions: true,\r\n\t\t\t\t\thumanReadableUnhandledException: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._logger;\r\n\t}\r\n\r\n\t/**\r\n\t * Logs a message\r\n\t * @param {Message} message - The message\r\n\t * @param {Message} [oldMessage] - The old message if edited\r\n\t */\r\n\t_logMessage(message, oldMessage = null) {\r\n\t\tif(!this.config.values.logMessages) return;\r\n\t\tif(oldMessage && message.content === oldMessage.content) return;\r\n\t\tconst prefix = `${message.guild ? `[${message.guild.name}][${message.channel.name}]` : '[DM]'} ${message.author.username}#${message.author.discriminator}`;\r\n\t\tthis.logger.message(`${prefix}: ${message.content}`);\r\n\t\tif(oldMessage) this.logger.message(`${prefix} EDITED FROM: ${oldMessage.content}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks for an update for the bot\r\n\t */\r\n\t_checkForUpdate() {\r\n\t\tconst config = this.config.values;\r\n\t\trequest(config.updateURL).then(body => {\r\n\t\t\tconst masterVersion = JSON.parse(body).version;\r\n\t\t\tif(!semver.gt(masterVersion, config.version)) return;\r\n\t\t\tconst message = `An update for ${config.name} is available! Current version is ${config.version}, latest available is ${masterVersion}.`;\r\n\t\t\tthis.logger.warn(message);\r\n\t\t\tconst savedVersion = this.storage.settings.getValue(null, 'notified-version');\r\n\t\t\tif(savedVersion !== masterVersion && this.client && config.owner) {\r\n\t\t\t\tthis.client.users.get(config.owner).sendMessage(message);\r\n\t\t\t\tthis.storage.settings.save(new Setting(null, 'notified-version', masterVersion));\r\n\t\t\t}\r\n\t\t}).catch(err => {\r\n\t\t\tthis.logger.error('Error while checking for an update', err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sends guild count to Carbon\r\n\t */\r\n\t_sendCarbonStats() {\r\n\t\tconst config = this.config.values;\r\n\t\trequest({\r\n\t\t\tmethod: 'POST',\r\n\t\t\turi: config.carbonUrl,\r\n\t\t\tbody: {\r\n\t\t\t\tkey: config.carbonKey,\r\n\t\t\t\tservercount: this.client.guilds.size\r\n\t\t\t},\r\n\t\t\tjson: true\r\n\t\t}).then(() => {\r\n\t\t\tthis.logger.info(`Sent guild count to Carbon with ${this.client.guilds.size} guilds.`);\r\n\t\t}).catch(err => {\r\n\t\t\tthis.logger.error('Error while sending guild count to Carbon.', err);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sends guild count to bots.discord.pw\r\n\t */\r\n\t_sendBDPWStats() {\r\n\t\tconst config = this.config.values;\r\n\r\n\t\t/* eslint-disable camelcase */\r\n\t\tconst body = { server_count: this.client.guilds.size };\r\n\t\tif(this.client.options.shard_count > 0) {\r\n\t\t\tbody.shard_id = this.client.options.shard_id;\r\n\t\t\tbody.shard_count = this.client.options.shard_count;\r\n\t\t}\r\n\t\t/* eslint-enable camelcase */\r\n\r\n\t\trequest({\r\n\t\t\tmethod: 'POST',\r\n\t\t\turi: `${config.bdpwUrl}/bots/${this.client.user.id}/stats`,\r\n\t\t\theaders: { Authorization: config.bdpwKey },\r\n\t\t\tbody: body,\r\n\t\t\tjson: true\r\n\t\t}).then(() => {\r\n\t\t\tthis.logger.info(`Sent guild count to bots.discord.pw with ${this.client.guilds.size} guilds.`);\r\n\t\t}).catch(err => {\r\n\t\t\tthis.logger.error('Error while sending guild count to bots.discord.pw.', err);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst defaultClientOptions = { bot: true };\r\n"
  },
  {
    "__docId__": 16,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Bot",
    "memberof": "src/bot/index.js",
    "longname": "src/bot/index.js~Bot",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/bot/index.js",
    "importStyle": "Bot",
    "description": "A Discord bot that has its own command registry, storage, utilities, etc.",
    "lineNumber": 42,
    "interface": false
  },
  {
    "__docId__": 17,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#constructor",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConfigObject"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#client",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Client"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dispatcher",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#dispatcher",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "CommandDispatcher"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#config",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "BotConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "permissions",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#permissions",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "BotPermissions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#util",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "BotUtil"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localStorage",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#localStorage",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "LocalStorage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "storage",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#storage",
    "access": null,
    "description": "",
    "lineNumber": 63,
    "properties": [
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ModRoleStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "modRoles",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AllowedChannelStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "allowedChannels",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "evalObjects",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#evalObjects",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createClient",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#createClient",
    "access": null,
    "description": "Instantiates all bot classes and storages, and creates the client",
    "lineNumber": 76,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Client"
      ],
      "spread": false,
      "description": "The bot client"
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#client",
    "access": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localStorage",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#localStorage",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dispatcher",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#dispatcher",
    "access": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "permissions",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#permissions",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#util",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "buildCommand",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#buildCommand",
    "access": null,
    "description": "Create a command builder",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "CommandInfo"
        ],
        "spread": false,
        "optional": true,
        "name": "info",
        "description": "The command information"
      },
      {
        "nullable": null,
        "types": [
          "CommandBuilderFunctions"
        ],
        "spread": false,
        "optional": true,
        "name": "funcs",
        "description": "The command functions to set"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandBuilder"
      ],
      "spread": false,
      "description": "The builder"
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerCommand",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerCommand",
    "access": null,
    "description": "Registers a single command to the bot's registry",
    "see": [
      "{@link Bot#registerCommands}"
    ],
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "Command",
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "Either a Command instance, or a constructor for one"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerCommands",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerCommands",
    "access": null,
    "description": "Registers multiple commands to the bot's registry",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "Command[]",
          "function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "commands",
        "description": "An array of Command instances or constructors"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerModule",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerModule",
    "access": null,
    "description": "Registers a single module to the bot's registry",
    "see": [
      "{@link Bot#registerModules}"
    ],
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Module",
          "function",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "A Module instance, a constructor, or an array of [ID, Name]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerModules",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerModules",
    "access": null,
    "description": "Registers multiple modules to the bot's registry",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "Module[]",
          "function[]",
          "Array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "modules",
        "description": "An array of Module instances, constructors, or arrays of [ID, Name]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerDefaults",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerDefaults",
    "access": null,
    "description": "Registers both the default modules and commands to the bot's registry",
    "lineNumber": 253,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerDefaultModules",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerDefaultModules",
    "access": null,
    "description": "Registers the default modules to the bot's registry",
    "lineNumber": 263,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerDefaultCommands",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerDefaultCommands",
    "access": null,
    "description": "Registers the default commands to the bot's registry",
    "lineNumber": 284,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Object specifying what commands to register"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.about",
        "description": "Whether or not to register the built-in about command"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.modRoles",
        "description": "Whether or not to register the built-in mod roles commands"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.channels",
        "description": "Whether or not to register the built-in channels commands"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.blacklist",
        "description": "Whether or not to register the built-in blacklist commands"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerEvalObject",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerEvalObject",
    "access": null,
    "description": "Registers a single object to be usable by the eval command",
    "see": [
      "{@link Bot#registerEvalObjects}"
    ],
    "lineNumber": 328,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key for the object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerEvalObjects",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registerEvalObjects",
    "access": null,
    "description": "Registers multiple objects to be usable by the eval command",
    "lineNumber": 339,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "An object of keys: values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": "This bot"
    },
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "registry",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#registry",
    "access": null,
    "description": null,
    "lineNumber": 345,
    "type": {
      "nullable": null,
      "types": [
        "CommandRegistry"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_registry",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#_registry",
    "access": null,
    "description": null,
    "lineNumber": 346,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "logger",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#logger",
    "access": null,
    "description": null,
    "lineNumber": 351,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logger",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#_logger",
    "access": null,
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_logMessage",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#_logMessage",
    "access": null,
    "description": "Logs a message",
    "lineNumber": 401,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message"
      },
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": true,
        "name": "oldMessage",
        "description": "The old message if edited"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_checkForUpdate",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#_checkForUpdate",
    "access": null,
    "description": "Checks for an update for the bot",
    "lineNumber": 412,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_sendCarbonStats",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#_sendCarbonStats",
    "access": null,
    "description": "Sends guild count to Carbon",
    "lineNumber": 432,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_sendBDPWStats",
    "memberof": "src/bot/index.js~Bot",
    "longname": "src/bot/index.js~Bot#_sendBDPWStats",
    "access": null,
    "description": "Sends guild count to bots.discord.pw",
    "lineNumber": 452,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultClientOptions",
    "memberof": "src/bot/index.js",
    "longname": "src/bot/index.js~defaultClientOptions",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/bot/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bot/permissions.js",
    "memberof": null,
    "longname": "src/bot/permissions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Module from '../commands/module';\r\n\r\n/** Contains methods to test whether a user has permissions in a guild */\r\nexport default class BotPermissions {\r\n\t/**\r\n\t * @param {Client} client - The Client to use\r\n\t * @param {ModRoleStorage} modRoles - The mod role storage to use\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t */\r\n\tconstructor(client, modRoles, settings, config) {\r\n\t\tif(!client || !modRoles || !settings || !config) throw new Error('A client, modRoles, settings, and config must be specified.');\r\n\r\n\t\t/** @type {Client} */\r\n\t\tthis.client = client;\r\n\t\t/** @type {ModRoleStorage} */\r\n\t\tthis.modRoles = modRoles;\r\n\t\t/** @type {SettingStorage} */\r\n\t\tthis.settings = settings;\r\n\t\t/** @type {BotConfig} */\r\n\t\tthis.config = config;\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is a moderator in a guild.\r\n\t * If the guild has not set any moderator roles, then they will be a moderator if any of their assigned roles contain the \"Manage messages\" permission.\r\n\t * If the guild has set moderator roles, then they will instead be a moderator if they have any of the moderator roles assigned.\r\n\t * The bot owner and users with the \"Administrate\" permission are always moderators.\r\n\t * @param {Guild|string} guild - The Guild or the guild ID\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {boolean} Whether or not the user is considered a moderator\r\n\t * @see {@link BotPermissions.isMod}\r\n\t */\r\n\tisMod(guild, user) {\r\n\t\treturn this.constructor.isMod(this.client, this.modRoles, this.settings, this.config, guild, user);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is a moderator in a guild using a specified client and config.\r\n\t * If the guild has not set any moderator roles, then they will be a moderator if any of their assigned roles contain the \"Manage messages\" permission.\r\n\t * If the guild has set moderator roles, then they will instead be a moderator if they have any of the moderator roles assigned.\r\n\t * The bot owner and users with the \"Administrate\" permission are always moderators.\r\n\t * @param {Client} client - The Client to use\r\n\t * @param {ModRoleStorage} modRoles - The mod role storage to use\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t * @param {Guild|string} guild - The Guild or the guild ID\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {boolean} Whether or not the user is considered a moderator\r\n\t * @see {@link BotPermissions#isMod}\r\n\t */\r\n\tstatic isMod(client, modRoles, settings, config, guild, user) {\r\n\t\t[guild, user] = this.resolve(client, guild, user);\r\n\t\tif(user.id === config.values.owner) return true;\r\n\t\tconst member = guild.member(user);\r\n\t\tif(!member) return false;\r\n\t\tif(member.hasPermission('ADMINISTRATOR')) return true;\r\n\t\tif(!Module.isEnabled(settings, guild, 'mod-roles') || modRoles.isEmpty(guild)) return member.hasPermission('MANAGE_MESSAGES');\r\n\t\tconst roles = member.roles;\r\n\t\treturn modRoles.find(guild).some(role => roles.some(role2 => role.id === role2.id));\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is an administrator in a guild.\r\n\t * If the user is the bot owner or has any roles assigned with the \"Administrate\" permission, they are considered an administrator.\r\n\t * @param {Guild|string} guild - The Guild or the guild ID\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {boolean} Whether or not the user is considered an administrator\r\n\t * @see {@link BotPermissions.isAdmin}\r\n\t */\r\n\tisAdmin(guild, user) {\r\n\t\treturn this.constructor.isAdmin(this.client, this.config, guild, user);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is an administrator in a guild with a specified client.\r\n\t * If the user is the bot owner or has any roles assigned with the \"Administrate\" permission, they are considered an administrator.\r\n\t * @param {Client} client - The Client to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t * @param {Guild|string} guild - The Guild or the guild ID\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {boolean} Whether or not the user is considered an administrator\r\n\t * @see {@link BotPermissions#isAdmin}\r\n\t */\r\n\tstatic isAdmin(client, config, guild, user) {\r\n\t\t[guild, user] = this.resolve(client, guild, user);\r\n\t\tif(user.id === config.values.owner) return true;\r\n\t\tconst member = guild.member(user);\r\n\t\tif(!member) return false;\r\n\t\treturn member.hasPermission('ADMINISTRATOR');\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is the owner of the bot\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {boolean} Whether or not the user is the bot owner\r\n\t * @see {@link BotPermissions.isOwner}\r\n\t */\r\n\tisOwner(user) {\r\n\t\treturn this.constructor.isOwner(this.config, user);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is the owner of the bot\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {boolean} Whether or not the user is the bot owner\r\n\t * @see {@link BotPermissions#isOwner}\r\n\t */\r\n\tstatic isOwner(config, user) {\r\n\t\tif(!user) throw new Error('A user must be specified.');\r\n\t\treturn (user.id || user) === config.values.owner;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves a guild and user to Discord.js instances\r\n\t * @param {Guild|string} guild - The Guild or the guild ID\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {[guild, user]} The Guild and User instance pair\r\n\t * @see {@link BotPermissions.resolve}\r\n\t */\r\n\tresolve(guild, user) {\r\n\t\tif(!guild || !user) throw new Error('A guild and user must be specified.');\r\n\t\treturn this.constructor.resolve(this.client, guild, user);\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves a guild and user to Discord.js instances with a specified client\r\n\t * @param {Client} client - The Client to use\r\n\t * @param {Guild|string} guild - The Guild or the guild ID\r\n\t * @param {User|string} user - The User or the user ID\r\n\t * @return {[guild, user]} The Guild and User instance pair\r\n\t * @see {@link BotPermissions#resolve}\r\n\t */\r\n\tstatic resolve(client, guild, user) {\r\n\t\tif(!client || !guild || !user) throw new Error('A client, guild, and user must be specified.');\r\n\t\tif(typeof guild === 'string') guild = client.guilds.get(guild);\r\n\t\tif(!guild || !guild.id) throw new Error('Unable to identify guild.');\r\n\t\tif(typeof user === 'string') user = guild.members.get(user);\r\n\t\tif(!user || !user.id) throw new Error('Unable to identify user.');\r\n\t\treturn [guild, user];\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 52,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BotPermissions",
    "memberof": "src/bot/permissions.js",
    "longname": "src/bot/permissions.js~BotPermissions",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/bot/permissions.js",
    "importStyle": "BotPermissions",
    "description": "Contains methods to test whether a user has permissions in a guild",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Client to use"
      },
      {
        "nullable": null,
        "types": [
          "ModRoleStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "modRoles",
        "description": "The mod role storage to use"
      },
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#client",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Client"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "modRoles",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#modRoles",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "ModRoleStorage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "settings",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#settings",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "SettingStorage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#config",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "BotConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isMod",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#isMod",
    "access": null,
    "description": "Tests to see if a user is a moderator in a guild.\nIf the guild has not set any moderator roles, then they will be a moderator if any of their assigned roles contain the \"Manage messages\" permission.\nIf the guild has set moderator roles, then they will instead be a moderator if they have any of the moderator roles assigned.\nThe bot owner and users with the \"Administrate\" permission are always moderators.",
    "see": [
      "{@link BotPermissions.isMod}"
    ],
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild or the guild ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered a moderator"
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isMod",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions.isMod",
    "access": null,
    "description": "Tests to see if a user is a moderator in a guild using a specified client and config.\nIf the guild has not set any moderator roles, then they will be a moderator if any of their assigned roles contain the \"Manage messages\" permission.\nIf the guild has set moderator roles, then they will instead be a moderator if they have any of the moderator roles assigned.\nThe bot owner and users with the \"Administrate\" permission are always moderators.",
    "see": [
      "{@link BotPermissions#isMod}"
    ],
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Client to use"
      },
      {
        "nullable": null,
        "types": [
          "ModRoleStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "modRoles",
        "description": "The mod role storage to use"
      },
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      },
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild or the guild ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered a moderator"
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isAdmin",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#isAdmin",
    "access": null,
    "description": "Tests to see if a user is an administrator in a guild.\nIf the user is the bot owner or has any roles assigned with the \"Administrate\" permission, they are considered an administrator.",
    "see": [
      "{@link BotPermissions.isAdmin}"
    ],
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild or the guild ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered an administrator"
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isAdmin",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions.isAdmin",
    "access": null,
    "description": "Tests to see if a user is an administrator in a guild with a specified client.\nIf the user is the bot owner or has any roles assigned with the \"Administrate\" permission, they are considered an administrator.",
    "see": [
      "{@link BotPermissions#isAdmin}"
    ],
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Client to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      },
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild or the guild ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered an administrator"
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isOwner",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#isOwner",
    "access": null,
    "description": "Tests to see if a user is the owner of the bot",
    "see": [
      "{@link BotPermissions.isOwner}"
    ],
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is the bot owner"
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isOwner",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions.isOwner",
    "access": null,
    "description": "Tests to see if a user is the owner of the bot",
    "see": [
      "{@link BotPermissions#isOwner}"
    ],
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is the bot owner"
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resolve",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions#resolve",
    "access": null,
    "description": "Resolves a guild and user to Discord.js instances",
    "see": [
      "{@link BotPermissions.resolve}"
    ],
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild or the guild ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[guild, user]"
      ],
      "spread": false,
      "description": "The Guild and User instance pair"
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "resolve",
    "memberof": "src/bot/permissions.js~BotPermissions",
    "longname": "src/bot/permissions.js~BotPermissions.resolve",
    "access": null,
    "description": "Resolves a guild and user to Discord.js instances with a specified client",
    "see": [
      "{@link BotPermissions#resolve}"
    ],
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Client to use"
      },
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild or the guild ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User or the user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[guild, user]"
      ],
      "spread": false,
      "description": "The Guild and User instance pair"
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bot/util.js",
    "memberof": null,
    "longname": "src/bot/util.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/** Contains general utility methods */\r\nexport default class BotUtil {\r\n\t/**\r\n\t * @param {Client} client - The client to use\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t */\r\n\tconstructor(client, settings, config) {\r\n\t\tif(!client || !settings || !config) throw new Error('A client, settings, and config must be specified.');\r\n\r\n\t\t/** @type {Client} */\r\n\t\tthis.client = client;\r\n\t\t/** @type {SettingStorage} */\r\n\t\tthis.settings = settings;\r\n\t\t/** @type {BotConfig} */\r\n\t\tthis.config = config;\r\n\t\t/**\r\n\t\t * @type {PatternConstants}\r\n\t\t * @see {@link BotUtil.patterns}\r\n\t\t */\r\n\t\tthis.patterns = patterns;\r\n\t}\r\n\r\n\t/**\r\n\t * Build a command usage string\r\n\t * @param {string} command - The short command string (ex. \"roll d20\")\r\n\t * @param {Guild|string} [guild] - The guild or guild ID to use the prefix of\r\n\t * @param {boolean} [onlyMention=false] - Whether or not the usage string should only show the mention form\r\n\t * @return {string} The command usage string\r\n\t * @see {@link BotUtil.usage}\r\n\t */\r\n\tusage(command, guild = null, onlyMention = false) {\r\n\t\treturn this.constructor.usage(this.client, this.settings, this.config, command, guild, onlyMention);\r\n\t}\r\n\r\n\t/**\r\n\t * Build a command usage string\r\n\t * @param {Client} client - The client to use\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t * @param {string} command - The short command string (ex. \"roll d20\")\r\n\t * @param {Guild|string} [guild] - The guild or guild ID to use the prefix of\r\n\t * @param {boolean} [onlyMention=false] - Whether or not the usage string should only show the mention form\r\n\t * @return {string} The command usage string\r\n\t * @see {@link BotUtil#usage}\r\n\t */\r\n\tstatic usage(client, settings, config, command, guild = null, onlyMention = false) {\r\n\t\tconst nbcmd = this.nbsp(command);\r\n\t\tif(!guild && !onlyMention) return `\\`${nbcmd}\\``;\r\n\t\tlet prefixAddon;\r\n\t\tif(!onlyMention) {\r\n\t\t\tlet prefix = this.nbsp(settings.getValue(guild, 'command-prefix', config.values.commandPrefix));\r\n\t\t\tif(prefix.length > 1) prefix += '\\xa0';\r\n\t\t\tprefixAddon = prefix ? `\\`${prefix}${nbcmd}\\` or ` : '';\r\n\t\t}\r\n\t\treturn `${prefixAddon || ''}\\`@${this.nbsp(client.user.username)}#${client.user.discriminator}\\xa0${nbcmd}\\``;\r\n\t}\r\n\r\n\t/**\r\n\t * Build a disambiguation list - useful for telling a user to be more specific when finding partial matches from a command\r\n\t * @param {Object[]} items - An array of items to make the disambiguation list for\r\n\t * @param {string} label - The text to refer to the items as (ex. \"characters\")\r\n\t * @param {string} [property=name] - The property on items to display in the list\r\n\t * @return {string} The disambiguation list\r\n\t * @see {@link BotUtil.disambiguation}\r\n\t */\r\n\tdisambiguation(items, label, property = 'name') {\r\n\t\treturn this.constructor.disambiguation(items, label, property);\r\n\t}\r\n\r\n\t/**\r\n\t * Build a disambiguation list - useful for telling a user to be more specific when finding partial matches from a command\r\n\t * @param {Object[]} items - An array of items to make the disambiguation list for\r\n\t * @param {string} label - The text to refer to the items as (ex. \"characters\")\r\n\t * @param {string} [property=name] - The property on items to display in the list\r\n\t * @return {string} The disambiguation list\r\n\t * @see {@link BotUtil#disambiguation}\r\n\t */\r\n\tstatic disambiguation(items, label, property = 'name') {\r\n\t\tconst itemList = items.map(item => `\"${this.nbsp(property ? item[property] : item)}\"`).join(',   ');\r\n\t\treturn `Multiple ${label} found, please be more specific: ${itemList}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Paginate an array of items\r\n\t * @param {Object[]} items - An array of items to paginate\r\n\t * @param {number} [page=1] - The page to select\r\n\t * @param {number} [pageLength=10] - The number of items per page\r\n\t * @return {Object} The resulting paginated object\r\n\t * @property {Object[]} items - The chunk of items for the current page\r\n\t * @property {number} page - The current page\r\n\t * @property {number} maxPage - The maximum page\r\n\t * @property {number} pageLength - The numer of items per page\r\n\t * @property {string} pageText - The current page string (\"page x of y\")\r\n\t * @see {@link BotUtil.paginate}\r\n\t */\r\n\tpaginate(items, page = 1, pageLength = 10) {\r\n\t\treturn this.constructor.paginate(items, page, pageLength);\r\n\t}\r\n\r\n\t/**\r\n\t * Paginate an array of items\r\n\t * @param {Object[]} items - An array of items to paginate\r\n\t * @param {number} [page=1] - The page to select\r\n\t * @param {number} [pageLength=10] - The number of items per page\r\n\t * @return {Object} The resulting paginated object\r\n\t * @property {Object[]} items - The chunk of items for the current page\r\n\t * @property {number} page - The current page\r\n\t * @property {number} maxPage - The maximum page\r\n\t * @property {number} pageLength - The numer of items per page\r\n\t * @property {string} pageText - The current page string (\"page x of y\")\r\n\t * @see {@link BotUtil#paginate}\r\n\t */\r\n\tstatic paginate(items, page = 1, pageLength = 10) {\r\n\t\tconst maxPage = Math.ceil(items.length / pageLength);\r\n\t\tif(page < 1) page = 1;\r\n\t\tif(page > maxPage) page = maxPage;\r\n\t\tlet startIndex = (page - 1) * pageLength;\r\n\t\treturn {\r\n\t\t\titems: items.length > pageLength ? items.slice(startIndex, startIndex + pageLength) : items,\r\n\t\t\tpage: page,\r\n\t\t\tmaxPage: maxPage,\r\n\t\t\tpageLength: pageLength,\r\n\t\t\tpageText: `page ${page} of ${maxPage}`\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Search for matches in a list of items\r\n\t * @param {Object[]} items - An array of items to search in\r\n\t * @param {string} searchString - The string to search for\r\n\t * @param {SearchOptions} options - An options object\r\n\t * @return {Object[]} The matched items\r\n\t * @see {@link BotUtil.search}\r\n\t */\r\n\tsearch(items, searchString, { property = 'name', searchInexact = true, searchExact = true, useStartsWith = false } = {}) {\r\n\t\treturn this.constructor.search(items, searchString, { property: property, searchInexact: searchInexact, searchExact: searchExact, useStartsWith: useStartsWith });\r\n\t}\r\n\r\n\t/**\r\n\t * Search for matches in a list of items\r\n\t * @param {Object[]} items - An array of items to search in\r\n\t * @param {string} searchString - The string to search for\r\n\t * @param {SearchOptions} options - An options object\r\n\t * @return {Object[]} The matched items\r\n\t * @see {@link BotUtil#search}\r\n\t */\r\n\tstatic search(items, searchString, { property = 'name', searchInexact = true, searchExact = true, useStartsWith = false } = {}) {\r\n\t\tif(!items || items.length === 0) return [];\r\n\t\tif(!searchString) return items;\r\n\r\n\t\tconst lowercaseSearch = searchString.toLowerCase();\r\n\t\tlet matchedItems;\r\n\r\n\t\t// Find all items that start with or include the search string\r\n\t\tif(searchInexact) {\r\n\t\t\tif(useStartsWith && searchString.length === 1) {\r\n\t\t\t\tmatchedItems = items.filter(element => String(property ? element[property] : element)\r\n\t\t\t\t\t.normalize('NFKD')\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.startsWith(lowercaseSearch)\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tmatchedItems = items.filter(element => String(property ? element[property] : element)\r\n\t\t\t\t\t.normalize('NFKD')\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.includes(lowercaseSearch)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmatchedItems = items;\r\n\t\t}\r\n\r\n\t\t// See if any are an exact match\r\n\t\tif(searchExact && matchedItems.length > 1) {\r\n\t\t\tconst exactItems = matchedItems.filter(element => String(property ? element[property] : element).normalize('NFKD').toLowerCase() === lowercaseSearch);\r\n\t\t\tif(exactItems.length > 0) return exactItems;\r\n\t\t}\r\n\r\n\t\treturn matchedItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Splits a string using specified characters into multiple strings of a maximum length\r\n\t * @param {string} text - The string to split\r\n\t * @param {number} [maxLength=1925] - The maximum length of each split string\r\n\t * @param {string} [splitOn=\\n] - The characters to split the string with\r\n\t * @param {string} [prepend] - String to prepend to every split message\r\n\t * @param {string} [append] - String to append to every split message\r\n\t * @return {string[]} The split strings\r\n\t * @see {@link BotUtil.split}\r\n\t */\r\n\tsplit(text, maxLength = 1925, splitOn = '\\n', prepend = '', append = '') {\r\n\t\treturn this.constructor.split(text, maxLength, splitOn, prepend, append);\r\n\t}\r\n\r\n\t/**\r\n\t * Splits a string using specified characters into multiple strings of a maximum length\r\n\t * @param {string} text - The string to split\r\n\t * @param {number} [maxLength=1925] - The maximum length of each split string\r\n\t * @param {string} [splitOn=\\n] - The characters to split the string with\r\n\t * @param {string} [prepend] - String to prepend to every split message\r\n\t * @param {string} [append] - String to append to every split message\r\n\t * @return {string[]} The split strings\r\n\t * @see {@link BotUtil#split}\r\n\t */\r\n\tstatic split(text, maxLength = 1900, splitOn = '\\n', prepend = '', append = '') {\r\n\t\tconst splitText = text.split(splitOn);\r\n\t\tif(splitText.length === 1 && text.length > maxLength) throw new Error('Message exceeds the max length and contains no split characters.');\r\n\t\tconst messages = [''];\r\n\t\tlet msg = 0;\r\n\t\tfor(let i = 0; i < splitText.length; i++) {\r\n\t\t\tif(messages[msg].length + splitText[i].length + 1 > maxLength) {\r\n\t\t\t\tmessages[msg] += append;\r\n\t\t\t\tmessages.push(prepend);\r\n\t\t\t\tmsg++;\r\n\t\t\t}\r\n\t\t\tmessages[msg] += (messages[msg].length > 0 && messages[msg] !== prepend ? splitOn : '') + splitText[i];\r\n\t\t}\r\n\t\treturn messages;\r\n\t}\r\n\r\n\t/**\r\n\t * Escapes Markdown in the string\r\n\t * @param {string} text - The text to escape\r\n\t * @returns {string} The escaped text\r\n\t * @see {@link BotUtil.escapeMarkdown}\r\n\t */\r\n\tescapeMarkdown(text) {\r\n\t\treturn this.constructor.escapeMarkdown(text);\r\n\t}\r\n\r\n\t/**\r\n\t * Escapes Markdown in the string\r\n\t * @param {string} text - The text to escape\r\n\t * @returns {string} The escaped text\r\n\t * @see {@link BotUtil#escapeMarkdown}\r\n\t */\r\n\tstatic escapeMarkdown(text) {\r\n\t\treturn text.replace(/\\\\(\\*|_|`|~)/g, '$1').replace(/(\\*|_|`|~)/g, '\\\\$1');\r\n\t}\r\n\r\n\t/**\r\n\t * Convert spaces to non-breaking spaces\r\n\t * @param {string} text - The text to convert\r\n\t * @return {string} The converted text\r\n\t * @see {@link BotUtil.nbsp}\r\n\t */\r\n\tnbsp(text) {\r\n\t\treturn this.constructor.nbsp(text);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert spaces to non-breaking spaces\r\n\t * @param {string} text - The text to convert\r\n\t * @return {string} The converted text\r\n\t * @see {@link BotUtil#nbsp}\r\n\t */\r\n\tstatic nbsp(text) {\r\n\t\treturn String(text).replace(spacePattern, nbsp);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {PatternConstants}\r\n\t * @see {@link BotUtil#patterns}\r\n\t */\r\n\tstatic get patterns() {\r\n\t\treturn patterns;\r\n\t}\r\n}\r\n\r\nconst nbsp = '\\xa0';\r\nconst spacePattern = / /g;\r\n\r\n/**\r\n * @typedef {Object} PatternConstants\r\n * @property {RegExp} userID - A pattern to match a user ID from a raw ID string or mention\r\n * @property {RegExp} roleID - A pattern to match a role ID from a raw ID string or mention\r\n * @property {RegExp} channelID - A pattern to match a channel ID from a raw ID string or mention\r\n * @property {RegExp} allUserMentions - A pattern to to match any mentions that would notify users\r\n */\r\nconst patterns = {\r\n\tuserID: /^(?:<@!?)?([0-9]+)>?$/,\r\n\troleID: /^(?:<@&)?([0-9]+)>?$/,\r\n\tchannelID: /^(?:<#)?([0-9]+)>?$/,\r\n\tanyUserMentions: /@everyone|@here|<@(?:!|&)?[0-9]+>/i\r\n};\r\n\r\n/**\r\n * @typedef {Object} SearchOptions\r\n * @property {string} [property=name] - The property on items to search against. If empty, the raw object's toString will be used instead.\r\n * @property {boolean} [searchInexact=true] - Whether or not to search for inexact matches\r\n * @property {boolean} [searchExact=true] - Whether or not to search for exact matches (will narrow down inexact matches if applicable)\r\n * @property {boolean} [useStartsWith=false] - Whether or not to search inexact by checking to see if the item starts with the search string rather than contains,\r\n * if the search string is only one character\r\n */\r\n"
  },
  {
    "__docId__": 67,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BotUtil",
    "memberof": "src/bot/util.js",
    "longname": "src/bot/util.js~BotUtil",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/bot/util.js",
    "importStyle": "BotUtil",
    "description": "Contains general utility methods",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#constructor",
    "access": null,
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The client to use"
      },
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#client",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Client"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "settings",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#settings",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "SettingStorage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#config",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "BotConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "patterns",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#patterns",
    "access": null,
    "description": "",
    "see": [
      "{@link BotUtil.patterns}"
    ],
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "PatternConstants"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "usage",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#usage",
    "access": null,
    "description": "Build a command usage string",
    "see": [
      "{@link BotUtil.usage}"
    ],
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The short command string (ex. \"roll d20\")"
      },
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "guild",
        "description": "The guild or guild ID to use the prefix of"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "onlyMention",
        "description": "Whether or not the usage string should only show the mention form"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The command usage string"
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "usage",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.usage",
    "access": null,
    "description": "Build a command usage string",
    "see": [
      "{@link BotUtil#usage}"
    ],
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The client to use"
      },
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The short command string (ex. \"roll d20\")"
      },
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "guild",
        "description": "The guild or guild ID to use the prefix of"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "onlyMention",
        "description": "Whether or not the usage string should only show the mention form"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The command usage string"
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disambiguation",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#disambiguation",
    "access": null,
    "description": "Build a disambiguation list - useful for telling a user to be more specific when finding partial matches from a command",
    "see": [
      "{@link BotUtil.disambiguation}"
    ],
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to make the disambiguation list for"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The text to refer to the items as (ex. \"characters\")"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "property",
        "description": "The property on items to display in the list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The disambiguation list"
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "disambiguation",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.disambiguation",
    "access": null,
    "description": "Build a disambiguation list - useful for telling a user to be more specific when finding partial matches from a command",
    "see": [
      "{@link BotUtil#disambiguation}"
    ],
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to make the disambiguation list for"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The text to refer to the items as (ex. \"characters\")"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "property",
        "description": "The property on items to display in the list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The disambiguation list"
    },
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paginate",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#paginate",
    "access": null,
    "description": "Paginate an array of items",
    "see": [
      "{@link BotUtil.paginate}"
    ],
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to paginate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "page",
        "description": "The page to select"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "pageLength",
        "description": "The number of items per page"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "The chunk of items for the current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "The current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxPage",
        "description": "The maximum page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pageLength",
        "description": "The numer of items per page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pageText",
        "description": "The current page string (\"page x of y\")"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The resulting paginated object"
    },
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "paginate",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.paginate",
    "access": null,
    "description": "Paginate an array of items",
    "see": [
      "{@link BotUtil#paginate}"
    ],
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to paginate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "page",
        "description": "The page to select"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "pageLength",
        "description": "The number of items per page"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "The chunk of items for the current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "The current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxPage",
        "description": "The maximum page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pageLength",
        "description": "The numer of items per page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pageText",
        "description": "The current page string (\"page x of y\")"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The resulting paginated object"
    },
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#search",
    "access": null,
    "description": "Search for matches in a list of items",
    "see": [
      "{@link BotUtil.search}"
    ],
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to search in"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchString",
        "description": "The string to search for"
      },
      {
        "nullable": null,
        "types": [
          "SearchOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "An options object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "The matched items"
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "search",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.search",
    "access": null,
    "description": "Search for matches in a list of items",
    "see": [
      "{@link BotUtil#search}"
    ],
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to search in"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchString",
        "description": "The string to search for"
      },
      {
        "nullable": null,
        "types": [
          "SearchOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "An options object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "The matched items"
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "split",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#split",
    "access": null,
    "description": "Splits a string using specified characters into multiple strings of a maximum length",
    "see": [
      "{@link BotUtil.split}"
    ],
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The string to split"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1925",
        "defaultRaw": 1925,
        "name": "maxLength",
        "description": "The maximum length of each split string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\\n",
        "defaultRaw": "\\n",
        "name": "splitOn",
        "description": "The characters to split the string with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "prepend",
        "description": "String to prepend to every split message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "append",
        "description": "String to append to every split message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "The split strings"
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "split",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.split",
    "access": null,
    "description": "Splits a string using specified characters into multiple strings of a maximum length",
    "see": [
      "{@link BotUtil#split}"
    ],
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The string to split"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1925",
        "defaultRaw": 1925,
        "name": "maxLength",
        "description": "The maximum length of each split string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\\n",
        "defaultRaw": "\\n",
        "name": "splitOn",
        "description": "The characters to split the string with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "prepend",
        "description": "String to prepend to every split message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "append",
        "description": "String to append to every split message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "The split strings"
    },
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "escapeMarkdown",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#escapeMarkdown",
    "access": null,
    "description": "Escapes Markdown in the string",
    "see": [
      "{@link BotUtil.escapeMarkdown}"
    ],
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The escaped text"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to escape"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The escaped text"
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "escapeMarkdown",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.escapeMarkdown",
    "access": null,
    "description": "Escapes Markdown in the string",
    "see": [
      "{@link BotUtil#escapeMarkdown}"
    ],
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The escaped text"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to escape"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The escaped text"
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nbsp",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil#nbsp",
    "access": null,
    "description": "Convert spaces to non-breaking spaces",
    "see": [
      "{@link BotUtil.nbsp}"
    ],
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The converted text"
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "nbsp",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.nbsp",
    "access": null,
    "description": "Convert spaces to non-breaking spaces",
    "see": [
      "{@link BotUtil#nbsp}"
    ],
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The converted text"
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "patterns",
    "memberof": "src/bot/util.js~BotUtil",
    "longname": "src/bot/util.js~BotUtil.patterns",
    "access": null,
    "description": "",
    "see": [
      "{@link BotUtil#patterns}"
    ],
    "lineNumber": 270,
    "type": {
      "nullable": null,
      "types": [
        "PatternConstants"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "nbsp",
    "memberof": "src/bot/util.js",
    "longname": "src/bot/util.js~nbsp",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/bot/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "spacePattern",
    "memberof": "src/bot/util.js",
    "longname": "src/bot/util.js~spacePattern",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/bot/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "PatternConstants",
    "memberof": "src/bot/util.js",
    "longname": "src/bot/util.js~PatternConstants",
    "access": null,
    "description": "",
    "lineNumber": 285,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "userID",
        "description": "A pattern to match a user ID from a raw ID string or mention"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "roleID",
        "description": "A pattern to match a role ID from a raw ID string or mention"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "channelID",
        "description": "A pattern to match a channel ID from a raw ID string or mention"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "allUserMentions",
        "description": "A pattern to to match any mentions that would notify users"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PatternConstants"
    }
  },
  {
    "__docId__": 91,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "SearchOptions",
    "memberof": "src/bot/util.js",
    "longname": "src/bot/util.js~SearchOptions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "property",
        "description": "The property on items to search against. If empty, the raw object's toString will be used instead."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "searchInexact",
        "description": "Whether or not to search for inexact matches"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "searchExact",
        "description": "Whether or not to search for exact matches (will narrow down inexact matches if applicable)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "useStartsWith",
        "description": "Whether or not to search inexact by checking to see if the item starts with the search string rather than contains,\nif the search string is only one character"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "SearchOptions"
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/builder.js",
    "memberof": null,
    "longname": "src/commands/builder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Command from './command';\r\n\r\n/** Builds commands with a fluent API */\r\nexport default class CommandBuilder {\r\n\t/**\r\n\t * @param {Bot} bot - The bot the command is for\r\n\t * @param {CommandInfo} [info] - The command info\r\n\t * @param {CommandBuilderFunctions} [funcs] - The command functions to set\r\n\t */\r\n\tconstructor(bot, info = null, funcs = null) {\r\n\t\tif(!bot) throw new Error('A bot must be specified.');\r\n\r\n\t\t/** @type {Bot} */\r\n\t\tthis.bot = bot;\r\n\t\t/** @type {CommandInfo} */\r\n\t\tthis.commandInfo = info;\r\n\t\t/** @type {Command} */\r\n\t\tthis.command = null;\r\n\r\n\t\tif(info) this.command = new Command(bot, info);\r\n\t\tif(funcs) {\r\n\t\t\tif(funcs.run) this.run(funcs.run);\r\n\t\t\tif(funcs.hasPermission) this.hasPermission(funcs.hasPermission);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the command information. This must be used before any other method if info was not provided to the constructor.\r\n\t * @param {CommandInfo} info - The command info\r\n\t * @return {CommandBuilder} This builder\r\n\t */\r\n\tinfo(info) {\r\n\t\tthis.commandInfo = info;\r\n\t\tthis.command = new Command(this.bot, info);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the command's run method\r\n\t * @param {function} fn - The function to use\r\n\t * @param {*[]} [extras=[]] - Extra values to pass to the function\r\n\t * @return {CommandBuilder} This builder\r\n\t */\r\n\trun(fn, extras = []) {\r\n\t\tif(typeof fn !== 'function') throw new TypeError('run must be provided a function.');\r\n\t\tif(!this.command) throw new Error('.info(obj) must be called first.');\r\n\t\tthis.command.run = _bindAppend(fn, this.command, ...extras);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the command's hasPermission method\r\n\t * @param {function} fn - The function to use\r\n\t * @param {*[]} [extras=[]] - Extra values to pass to the function\r\n\t * @return {CommandBuilder} This builder\r\n\t */\r\n\thasPermission(fn, extras = []) {\r\n\t\tif(typeof fn !== 'function') throw new TypeError('hasPermission must be provided a function.');\r\n\t\tif(!this.command) throw new Error('.info(obj) must be called first.');\r\n\t\tthis.command.hasPermission = _bindAppend(fn, this.command, ...extras);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers the command to the bot\r\n\t * @return {Command} The command that was registered\r\n\t */\r\n\tregister() {\r\n\t\tthis.bot.registerCommand(this.command);\r\n\t\treturn this.command;\r\n\t}\r\n}\r\n\r\nfunction _bindAppend(fn, self, ...args) {\r\n\treturn function boundFunction(...args2) {\r\n\t\treturn fn.apply(self, args2.concat(args));\r\n\t};\r\n}\r\n\r\n/**\r\n * @typedef {Object} CommandBuilderFunctions\r\n * @property {function} [run] - The run function to set\r\n * @property {function} [hasPermission] - The hasPermission function to set\r\n */\r\n"
  },
  {
    "__docId__": 93,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandBuilder",
    "memberof": "src/commands/builder.js",
    "longname": "src/commands/builder.js~CommandBuilder",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/builder.js",
    "importStyle": "CommandBuilder",
    "description": "Builds commands with a fluent API",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bot"
        ],
        "spread": false,
        "optional": false,
        "name": "bot",
        "description": "The bot the command is for"
      },
      {
        "nullable": null,
        "types": [
          "CommandInfo"
        ],
        "spread": false,
        "optional": true,
        "name": "info",
        "description": "The command info"
      },
      {
        "nullable": null,
        "types": [
          "CommandBuilderFunctions"
        ],
        "spread": false,
        "optional": true,
        "name": "funcs",
        "description": "The command functions to set"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bot",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#bot",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "commandInfo",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#commandInfo",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "CommandInfo"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "command",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#command",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Command"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "command",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#command",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "info",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#info",
    "access": null,
    "description": "Sets the command information. This must be used before any other method if info was not provided to the constructor.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "CommandInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "The command info"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandBuilder"
      ],
      "spread": false,
      "description": "This builder"
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "commandInfo",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#commandInfo",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "command",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#command",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "run",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#run",
    "access": null,
    "description": "Sets the command's run method",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to use"
      },
      {
        "nullable": null,
        "types": [
          "*[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "extras",
        "description": "Extra values to pass to the function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandBuilder"
      ],
      "spread": false,
      "description": "This builder"
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPermission",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#hasPermission",
    "access": null,
    "description": "Sets the command's hasPermission method",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to use"
      },
      {
        "nullable": null,
        "types": [
          "*[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "extras",
        "description": "Extra values to pass to the function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandBuilder"
      ],
      "spread": false,
      "description": "This builder"
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "register",
    "memberof": "src/commands/builder.js~CommandBuilder",
    "longname": "src/commands/builder.js~CommandBuilder#register",
    "access": null,
    "description": "Registers the command to the bot",
    "lineNumber": 71,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Command"
      ],
      "spread": false,
      "description": "The command that was registered"
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_bindAppend",
    "memberof": "src/commands/builder.js",
    "longname": "src/commands/builder.js~_bindAppend",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/commands/builder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "CommandBuilderFunctions",
    "memberof": "src/commands/builder.js",
    "longname": "src/commands/builder.js~CommandBuilderFunctions",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "run",
        "description": "The run function to set"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "hasPermission",
        "description": "The hasPermission function to set"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CommandBuilderFunctions"
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/command.js",
    "memberof": null,
    "longname": "src/commands/command.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Setting from '../storage/models/setting';\r\n\r\n/** A command that can be run in a bot */\r\nexport default class Command {\r\n\t/**\r\n\t * @param {Bot} bot - The bot the command is for\r\n\t * @param {CommandInfo} info - The command information\r\n\t */\r\n\tconstructor(bot, info) { // eslint-disable-line complexity\r\n\t\tif(!bot) throw new Error('A bot must be specified.');\r\n\t\tif(!info) throw new Error('Command info must be specified.');\r\n\t\tif(!info.name) throw new Error('Command must have a name specified.');\r\n\t\tif(info.name !== info.name.toLowerCase()) throw new Error('Command name must be lowercase.');\r\n\t\tif(info.aliases && !Array.isArray(info.aliases)) throw new TypeError('Command aliases must be an array.');\r\n\t\tif(info.aliases && info.aliases.some(ali => ali !== ali.toLowerCase())) throw new Error('Command aliases must be lowercase.');\r\n\t\tif(!info.module) throw new Error('Command must have a module specified.');\r\n\t\tif(info.module !== info.module.toLowerCase()) throw new Error('Command module must be lowercase.');\r\n\t\tif(!info.memberName) throw new Error('Command must have a memberName specified.');\r\n\t\tif(info.memberName !== info.memberName.toLowerCase()) throw new Error('Command memberName must be lowercase.');\r\n\t\tif(!info.description) throw new Error('Command must have a description specified.');\r\n\t\tif(info.examples && !Array.isArray(info.examples)) throw new TypeError('Command examples must be an array.');\r\n\t\tif(info.argsType && !['single', 'multiple'].includes(info.argsType)) throw new RangeError('Command argsType must be one of \"single\" or \"multiple\".');\r\n\t\tif(info.argsType === 'multiple' && info.argsCount && info.argsCount < 2) throw new RangeError('Command argsCount must be at least 2.');\r\n\t\tif(info.patterns && !Array.isArray(info.patterns)) throw new TypeError('Command patterns must be an array.');\r\n\r\n\t\t/** @type {Bot} */\r\n\t\tthis.bot = bot;\r\n\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.name = info.name;\r\n\r\n\t\t/**\r\n\t\t * @type {string[]}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.aliases = info.aliases || [];\r\n\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.module = info.module;\r\n\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.memberName = info.memberName;\r\n\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.description = info.description;\r\n\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.usage = info.usage || info.name;\r\n\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.details = info.details || null;\r\n\r\n\t\t/**\r\n\t\t * @type {string[]}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.examples = info.examples || null;\r\n\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.guildOnly = !!info.guildOnly;\r\n\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.defaultHandling = 'defaultHandling' in info ? info.defaultHandling : true;\r\n\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.argsType = info.argsType || 'single';\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.argsCount = info.argsCount || 0;\r\n\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.argsSingleQuotes = 'argsSingleQuotes' in info ? info.argsSingleQuotes : true;\r\n\r\n\t\t/**\r\n\t\t * @type {RegExp[]}\r\n\t\t * @see {@link CommandInfo}\r\n\t\t */\r\n\t\tthis.patterns = info.patterns || null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks a user's permission on a guild\r\n\t * @param {Guild} guild - The guild to test the user's permission in\r\n\t * @param {User} user - The user to test the permission of\r\n\t * @return {boolean} Whether or not the user has permission to use the command in a guild\r\n\t */\r\n\thasPermission(guild, user) { // eslint-disable-line no-unused-vars\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* eslint-disable valid-jsdoc */\r\n\t/**\r\n\t * Runs the command\r\n\t * @param {Message} message - The message the command is being run for\r\n\t * @param {string[]} args - The arguments for the command, or the matches from a pattern\r\n\t * @param {boolean} fromPattern - Whether or not the command is being run from a pattern match or not\r\n\t * @return {Promise<CommandResult|string[]|string>} The result of running the command\r\n\t */\r\n\tasync run(message, args, fromPattern) { // eslint-disable-line no-unused-vars\r\n\t\tthrow new Error(`${this.constructor.name} doesn't have a run() method, or called the super.run() method.`);\r\n\t}\r\n\t/* eslint-enable valid-jsdoc */\r\n\r\n\t/**\r\n\t * Enables or disables the command on a guild\r\n\t * @param {Guild|string} guild - The guild or guild ID\r\n\t * @param {boolean} enabled - Whether the command should be enabled or disabled\r\n\t * @see {@link Command.setEnabled}\r\n\t */\r\n\tsetEnabled(guild, enabled) {\r\n\t\tthis.constructor.setEnabled(this.bot.storage.settings, guild, this, enabled);\r\n\t}\r\n\r\n\t/**\r\n\t * Enables or disables a command on a guild\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {Guild|string} guild - The guild or guild ID\r\n\t * @param {Command|string} command - The command or command name\r\n\t * @param {boolean} enabled - Whether the command should be enabled or disabled\r\n\t * @see {@link Command#setEnabled}\r\n\t */\r\n\tstatic setEnabled(settings, guild, command, enabled) {\r\n\t\tsettings.save(new Setting(guild, `cmd-${command.name || command}`, enabled));\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the command is enabled on a guild\r\n\t * @param {Guild} guild - The guild\r\n\t * @return {boolean} Whether or not the command is enabled\r\n\t * @see {@link Command.isEnabled}\r\n\t */\r\n\tisEnabled(guild) {\r\n\t\treturn this.constructor.isEnabled(this.bot.storage.settings, guild, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if a command is enabled on a guild\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {Guild} guild - The guild\r\n\t * @param {Command|string} command - The command or command name\r\n\t * @return {boolean} Whether or not the command is enabled\r\n\t * @see {@link Command#isEnabled}\r\n\t */\r\n\tstatic isEnabled(settings, guild, command) {\r\n\t\treturn (!command.module || settings.getValue(guild, `mod-${command.module}`, true)) && settings.getValue(guild, `cmd-${command.name || command}`, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the command is usable for a message\r\n\t * @param {?Message} message - The message\r\n\t * @return {boolean} Whether or not the command is usable\r\n\t */\r\n\tisUsable(message = null) {\r\n\t\tif(this.guildOnly && message && !message.guild) return false;\r\n\t\treturn !message || (this.isEnabled(message.guild) && this.hasPermission(message.guild, message.author));\r\n\t}\r\n}\r\n\r\n/**\r\n * @typedef {Object} CommandInfo\r\n * @property {string} name - The name of the command (must be lowercase)\r\n * @property {string[]} [aliases] - Alternative names for the command (all must be lowercase)\r\n * @property {string} module - The ID of the module the command belongs to (must be lowercase)\r\n * @property {string} memberName - The member name of the command in the module (must be lowercase)\r\n * @property {string} description - A short description of the command\r\n * @property {string} [usage=name] - The command usage format string\r\n * @property {string} [details] - A detailed description of the command and its functionality\r\n * @property {string[]} [examples] - Usage examples of the command\r\n * @property {boolean} [guildOnly=false] - Whether or not the command should only function in a guild channel\r\n * @property {boolean} [defaultHandling=true] - Whether or not the default command handling should be used. If false, then only patterns will trigger the command.\r\n * @property {string} [argsType=single] - One of 'single' or 'multiple'. When 'single', the entire argument string will be passed to run as one argument.\r\n * When 'multiple', it will be passed as multiple arguments.\r\n * @property {number} [argsCount=0] - The number of arguments to parse from the command string. Only applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\r\n * When this is 0, the command argument string will be split into as many arguments as it can be. When nonzero, it will be split into a maximum of this number of arguments.\r\n * @property {boolean} [argsSingleQuotes=true] - Whether or not single quotes should be allowed to box-in arguments in the command string.\r\n * @property {RegExp[]} [patterns] - Patterns to use for triggering the command\r\n */\r\n"
  },
  {
    "__docId__": 108,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Command",
    "memberof": "src/commands/command.js",
    "longname": "src/commands/command.js~Command",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/command.js",
    "importStyle": "Command",
    "description": "A command that can be run in a bot",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 109,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "CommandInfo",
    "memberof": "src/commands/command.js",
    "longname": "src/commands/command.js~CommandInfo",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the command (must be lowercase)"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "aliases",
        "description": "Alternative names for the command (all must be lowercase)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "The ID of the module the command belongs to (must be lowercase)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "memberName",
        "description": "The member name of the command in the module (must be lowercase)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A short description of the command"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "usage",
        "description": "The command usage format string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "details",
        "description": "A detailed description of the command and its functionality"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "examples",
        "description": "Usage examples of the command"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "guildOnly",
        "description": "Whether or not the command should only function in a guild channel"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "defaultHandling",
        "description": "Whether or not the default command handling should be used. If false, then only patterns will trigger the command."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "single",
        "defaultRaw": "single",
        "name": "argsType",
        "description": "One of 'single' or 'multiple'. When 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "argsCount",
        "description": "The number of arguments to parse from the command string. Only applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be. When nonzero, it will be split into a maximum of this number of arguments."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "argsSingleQuotes",
        "description": "Whether or not single quotes should be allowed to box-in arguments in the command string."
      },
      {
        "nullable": null,
        "types": [
          "RegExp[]"
        ],
        "spread": false,
        "optional": true,
        "name": "patterns",
        "description": "Patterns to use for triggering the command"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CommandInfo"
    }
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bot"
        ],
        "spread": false,
        "optional": false,
        "name": "bot",
        "description": "The bot the command is for"
      },
      {
        "nullable": null,
        "types": [
          "CommandInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "The command information"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bot",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#bot",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#name",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "aliases",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#aliases",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "module",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#module",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "memberName",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#memberName",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "description",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#description",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "usage",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#usage",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "details",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#details",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "examples",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#examples",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "guildOnly",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#guildOnly",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaultHandling",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#defaultHandling",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "argsType",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#argsType",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "argsCount",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#argsCount",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "argsSingleQuotes",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#argsSingleQuotes",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "patterns",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#patterns",
    "access": null,
    "description": "",
    "see": [
      "{@link CommandInfo}"
    ],
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "RegExp[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasPermission",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#hasPermission",
    "access": null,
    "description": "Checks a user's permission on a guild",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild to test the user's permission in"
      },
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The user to test the permission of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user has permission to use the command in a guild"
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "run",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#run",
    "access": null,
    "description": "Runs the command",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message the command is being run for"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments for the command, or the matches from a pattern"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPattern",
        "description": "Whether or not the command is being run from a pattern match or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CommandResult",
        "string[]",
        "string>"
      ],
      "spread": false,
      "description": "The result of running the command"
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setEnabled",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#setEnabled",
    "access": null,
    "description": "Enables or disables the command on a guild",
    "see": [
      "{@link Command.setEnabled}"
    ],
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether the command should be enabled or disabled"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "setEnabled",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command.setEnabled",
    "access": null,
    "description": "Enables or disables a command on a guild",
    "see": [
      "{@link Command#setEnabled}"
    ],
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID"
      },
      {
        "nullable": null,
        "types": [
          "Command",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The command or command name"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether the command should be enabled or disabled"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEnabled",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#isEnabled",
    "access": null,
    "description": "Checks if the command is enabled on a guild",
    "see": [
      "{@link Command.isEnabled}"
    ],
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the command is enabled"
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isEnabled",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command.isEnabled",
    "access": null,
    "description": "Checks if a command is enabled on a guild",
    "see": [
      "{@link Command#isEnabled}"
    ],
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "Guild"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild"
      },
      {
        "nullable": null,
        "types": [
          "Command",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The command or command name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the command is enabled"
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isUsable",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#isUsable",
    "access": null,
    "description": "Checks if the command is usable for a message",
    "lineNumber": 189,
    "params": [
      {
        "nullable": true,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the command is usable"
    },
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/dispatcher.js",
    "memberof": null,
    "longname": "src/commands/dispatcher.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport EventEmitter from 'events';\r\nimport { stripIndents } from 'common-tags';\r\nimport escapeRegex from 'escape-string-regexp';\r\nimport Module from './module';\r\nimport FriendlyError from '../errors/friendly';\r\nimport Setting from '../storage/models/setting';\r\n\r\n/** Handles parsing messages and running commands from them */\r\nexport default class CommandDispatcher extends EventEmitter {\r\n\t/** @param {Bot} bot - The bot the dispatcher is for */\r\n\tconstructor(bot) {\r\n\t\tif(!bot) throw new Error('A bot must be specified.');\r\n\t\tsuper();\r\n\r\n\t\t/** @type {Bot} */\r\n\t\tthis.bot = bot;\r\n\r\n\t\tthis._guildCommandPatterns = {};\r\n\t\tthis._results = new Map();\r\n\r\n\t\tthis._blacklistedUsers = bot.storage.settings.getValue(null, 'blacklisted-users');\r\n\t\tif(!this._blacklistedUsers) {\r\n\t\t\tbot.storage.settings.save(new Setting(null, 'blacklisted-users', []));\r\n\t\t\tthis._blacklistedUsers = bot.storage.settings.getValue(null, 'blacklisted-users');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle a new message or a message update\r\n\t * @param {Message} message - The message to handle\r\n\t * @param {Message} [oldMessage] - The old message before the update\r\n\t * @return {Promise<null>} No value\r\n\t */\r\n\tasync handleMessage(message, oldMessage = null) {\r\n\t\tif(message.author.bot) return null;\r\n\t\telse if(this.bot.config.values.selfbot && message.author.id !== this.bot.client.user.id) return null;\r\n\t\telse if(!this.bot.config.values.selfbot && message.author.id === this.bot.client.user.id) return null;\r\n\r\n\t\t// Make sure the edit actually changed the message content\r\n\t\tif(oldMessage && message.content === oldMessage.content) return null;\r\n\r\n\t\t// Make sure the bot is allowed to run in the channel, or the user is an admin\r\n\t\tif(!this.bot.config.values.selfbot && message.guild\r\n\t\t\t&& Module.isEnabled(this.bot.storage.settings, message.guild, 'channels')\r\n\t\t\t&& !this.bot.storage.allowedChannels.isEmpty(message.guild)\r\n\t\t\t&& !this.bot.storage.allowedChannels.exists(message.guild, message.channel.id)\r\n\t\t\t&& !this.bot.permissions.isAdmin(message.guild, message.author)) return null;\r\n\r\n\t\t// Make sure the user isn't blacklisted\r\n\t\tif(this._blacklistedUsers.includes(message.author.id)) return null;\r\n\r\n\t\t// Parse the message, and get the old result if it exists\r\n\t\tconst [command, args, fromPattern, isCommandMessage] = this._parseMessage(message);\r\n\t\tconst oldResult = oldMessage ? this._results.get(oldMessage.id) : null;\r\n\r\n\t\t// Run the command, or make an error message result\r\n\t\tlet result;\r\n\t\tif(command) {\r\n\t\t\tif(!command.isEnabled(message.guild)) result = { reply: [`The \\`${command.name}\\` command is disabled.`], editable: true };\r\n\t\t\telse if(!oldMessage || oldResult) result = await this.run(command, args, fromPattern, message);\r\n\t\t} else if(isCommandMessage) {\r\n\t\t\tresult = { reply: [`Unknown command. Use ${this.bot.util.usage('help', message.guild)} to view the list of all commands.`], editable: true };\r\n\t\t} else if(this.bot.config.values.nonCommandEdit) {\r\n\t\t\tresult = { editable: true };\r\n\t\t}\r\n\r\n\t\treturn await this.handleMessageResult(message, result, oldResult);\r\n\t}\r\n\r\n\t/**\r\n\t * Handle a message result\r\n\t * @param {Message} message - The message the result is from\r\n\t * @param {?CommandResult} result - The result\r\n\t * @param {CommandResult} [oldResult] - The old result\r\n\t * @return {Promise<null>} No value\r\n\t */\r\n\tasync handleMessageResult(message, result, oldResult = null) {\r\n\t\tif(result) {\r\n\t\t\t// Make sure the bot has permission to send a message\r\n\t\t\tlet hasPermission = true;\r\n\t\t\tif(message.guild && !message.channel.permissionsFor(this.bot.client.user).hasPermission('SEND_MESSAGES')) {\r\n\t\t\t\thasPermission = false;\r\n\t\t\t\tif((result.plain || result.reply) && !result.direct && !(oldResult && (oldResult.plain || oldResult.reply || oldResult.direct))) {\r\n\t\t\t\t\tawait message.author.sendMessage(`I don't have permission to send messages in ${message.channel}, so I'll respond directly instead:`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Change a plain or reply response into direct if there isn't a guild\r\n\t\t\tif(!message.guild || !hasPermission) {\r\n\t\t\t\tif(!result.direct) result.direct = result.plain || result.reply;\r\n\t\t\t\tdelete result.plain;\r\n\t\t\t\tdelete result.reply;\r\n\t\t\t}\r\n\r\n\t\t\t// Update old messages or send new ones\r\n\t\t\tif(oldResult && (oldResult.plain || oldResult.reply || oldResult.direct)) {\r\n\t\t\t\tawait this.updateMessagesForResult(message, result, oldResult);\r\n\t\t\t} else {\r\n\t\t\t\tawait this.sendMessagesForResult(message, result);\r\n\t\t\t}\r\n\r\n\t\t\t// Cache the result\r\n\t\t\tif(this.bot.config.values.commandEditable > 0) {\r\n\t\t\t\tif(result.editable) {\r\n\t\t\t\t\tresult.timeout = oldResult && oldResult.timeout\r\n\t\t\t\t\t\t? oldResult.timeout\r\n\t\t\t\t\t\t: setTimeout(() => { this._results.delete(message.id); }, this.bot.config.values.commandEditable * 1000);\r\n\t\t\t\t\tthis._results.set(message.id, result);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._results.delete(message.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Run a command\r\n\t * @param {Command} command - The command to run\r\n\t * @param {string[]} args - The arguments for the command\r\n\t * @param {boolean} fromPattern - Whether or not the arguments are from a pattern match\r\n\t * @param {Message} message - The message that triggered the run\r\n\t * @return {Promise<CommandResult>} The result of running the command\r\n\t * @emits commandRun When a command is run, with the command, result, message, args, and fromPattern passed\r\n\t * @emits commandError When an error occurs while running a command, with the command, message, args, and fromPattern passed\r\n\t */\r\n\tasync run(command, args, fromPattern, message) {\r\n\t\tconst logInfo = {\r\n\t\t\targs: String(args),\r\n\t\t\tuser: `${message.author.username}#${message.author.discriminator}`,\r\n\t\t\tuserID: message.author.id,\r\n\t\t\tguild: message.guild ? message.guild.name : null,\r\n\t\t\tguildID: message.guild ? message.guild.id : null,\r\n\t\t\tmessageID: message.id\r\n\t\t};\r\n\r\n\t\t// Make sure the command is usable\r\n\t\tif(command.guildOnly && !message.guild) {\r\n\t\t\tthis.bot.logger.info(`Not running ${command.module}:${command.memberName}; guild only.`, logInfo);\r\n\t\t\treturn { reply: [`The \\`${command.name}\\` command must be used in a server channel.`], editable: true };\r\n\t\t}\r\n\t\tif(!command.hasPermission(message.guild, message.author)) {\r\n\t\t\tthis.bot.logger.info(`Not running ${command.module}:${command.memberName}; don't have permission.`, logInfo);\r\n\t\t\treturn { reply: [`You do not have permission to use the \\`${command.name}\\` command.`], editable: true };\r\n\t\t}\r\n\r\n\t\t// Run the command\r\n\t\tthis.bot.logger.info(`Running ${command.module}:${command.memberName}.`, logInfo);\r\n\t\tconst typingCount = message.channel.typingCount;\r\n\t\ttry {\r\n\t\t\tconst result = this.constructor.makeResultObject(await command.run(message, args, fromPattern));\r\n\t\t\tthis.emit('commandRun', command, result, message, args, fromPattern);\r\n\t\t\treturn result;\r\n\t\t} catch(err) {\r\n\t\t\tthis.emit('commandError', command, err, message, args, fromPattern);\r\n\t\t\tif(message.channel.typingCount > typingCount) message.channel.stopTyping();\r\n\t\t\tif(err instanceof FriendlyError) {\r\n\t\t\t\treturn { reply: [err.message], editable: true };\r\n\t\t\t} else {\r\n\t\t\t\tthis.bot.logger.error(err);\r\n\t\t\t\tconst owner = this.bot.config.values.owner ? message.client.users.get(this.bot.config.values.owner) : null;\r\n\t\t\t\treturn {\r\n\t\t\t\t\treply: [stripIndents`\r\n\t\t\t\t\t\tAn error occurred while running the command: \\`${err.name}: ${err.message}\\`\r\n\t\t\t\t\t\tYou shouldn't ever receive an error like this.\r\n\t\t\t\t\t\t${owner ? `Please contact ${owner.username}#${owner.discriminator}${this.bot.config.values.invite ? ` in this server: ${this.bot.config.values.invite}` : '.'}` : ''}\r\n\t\t\t\t\t`],\r\n\t\t\t\t\teditable: true\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sends messages for a command result\r\n\t * @param {Message} message - The message the result is for\r\n\t * @param {CommandResult} result - The command result\r\n\t * @return {Promise<null>} No value\r\n\t */\r\n\tasync sendMessagesForResult(message, result) {\r\n\t\tconst messages = await Promise.all([\r\n\t\t\tresult.plain ? this.sendMessages(message, result.plain, 'plain') : null,\r\n\t\t\tresult.reply ? this.sendMessages(message, result.reply, 'reply') : null,\r\n\t\t\tresult.direct ? this.sendMessages(message, result.direct, 'direct') : null\r\n\t\t]);\r\n\t\tif(result.plain) result.normalMessages = messages[0];\r\n\t\telse if(result.reply) result.normalMessages = messages[1];\r\n\t\tif(result.direct) result.directMessages = messages[2];\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Sends messages\r\n\t * @param {Message} message - The message the messages are being sent in response to\r\n\t * @param {string[]} contents - Contents of the messages to send\r\n\t * @param {string} type - One of 'plain', 'reply', or 'direct'\r\n\t * @return {Promise<Message[]>} The sent messages\r\n\t */\r\n\tasync sendMessages(message, contents, type) {\r\n\t\tconst sentMessages = [];\r\n\t\tfor(const content of contents) {\r\n\t\t\tif(type === 'plain') sentMessages.push(await message.channel.sendMessage(content));\r\n\t\t\telse if(type === 'reply') sentMessages.push(await message.reply(content));\r\n\t\t\telse if(type === 'direct') sentMessages.push(await message.author.sendMessage(content));\r\n\t\t}\r\n\t\treturn sentMessages;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates messages for a command result\r\n\t * @param {Message} message - The message the result is for\r\n\t * @param {CommandResult} result - The command result\r\n\t * @param {CommandResult} oldResult - The old command result\r\n\t * @return {Promise<null>} No value\r\n\t */\r\n\tasync updateMessagesForResult(message, result, oldResult) {\r\n\t\t// Update the messages\r\n\t\tconst messages = await Promise.all([\r\n\t\t\tresult.plain || result.reply ? this.updateMessages(message, oldResult.normalMessages, result.plain || result.reply, result.plain ? 'plain' : 'reply') : null,\r\n\t\t\tresult.direct ? oldResult.direct ? this.updateMessages(message, oldResult.directMessages, result.direct, 'direct') : this.sendMessages(message, result.direct, 'direct') : null\r\n\t\t]);\r\n\t\tif(result.plain || result.reply) result.normalMessages = messages[0];\r\n\t\tif(result.direct) result.directMessages = messages[1];\r\n\r\n\t\t// Delete old messages if we're not using them\r\n\t\tif(!result.plain && !result.reply && (oldResult.plain || oldResult.reply)) for(const msg of oldResult.normalMessages) msg.delete();\r\n\t\tif(!result.direct && oldResult.direct) for(const msg of oldResult.directMessages) msg.delete();\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates messages\r\n\t * @param {Message} message - The message the old messages are being updated in response to\r\n\t * @param {Message[]} oldMessages - The old messages to update\r\n\t * @param {string[]} contents - Contents of the messages to send\r\n\t * @param {string} type - One of 'plain', 'reply', or 'direct'\r\n\t * @return {Promise<Message[]>} The updated messages\r\n\t */\r\n\tasync updateMessages(message, oldMessages, contents, type) {\r\n\t\tconst updatedMessages = [];\r\n\r\n\t\t// Update/send messages\r\n\t\tfor(let i = 0; i < contents.length; i++) {\r\n\t\t\tif(i < oldMessages.length) updatedMessages.push(await oldMessages[i].edit(type === 'reply' ? `${message.author}, ${contents[i]}` : contents[i]));\r\n\t\t\telse updatedMessages.push((await this.sendMessages(message, [contents[i]], type))[0]);\r\n\t\t}\r\n\r\n\t\t// Delete extra old messages\r\n\t\tif(oldMessages.length > contents.length) {\r\n\t\t\tfor(let i = oldMessages.length - 1; i >= contents.length; i--) oldMessages[i].delete();\r\n\t\t}\r\n\r\n\t\treturn updatedMessages;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a message to find details about command usage in it\r\n\t * @param {Message} message - The message\r\n\t * @return {Array} Command, arguments, whether or not it's from a pattern match, and whether or not it's a command message\r\n\t */\r\n\t_parseMessage(message) {\r\n\t\t// Find the command to run by patterns\r\n\t\tfor(const command of this.bot.registry.commands) {\r\n\t\t\tif(!command.patterns) continue;\r\n\t\t\tfor(const pattern of command.patterns) {\r\n\t\t\t\tconst matches = pattern.exec(message.content);\r\n\t\t\t\tif(matches) return [command, matches, true, true];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Find the command to run with default command handling\r\n\t\tconst patternIndex = message.guild ? message.guild.id : '-';\r\n\t\tif(!this._guildCommandPatterns[patternIndex]) this._guildCommandPatterns[patternIndex] = this._buildCommandPattern(message.guild, message.client.user);\r\n\t\tlet [command, args, isCommandMessage] = this._matchDefault(message, this._guildCommandPatterns[patternIndex], 2);\r\n\t\tif(!command && !message.guild && !this.bot.config.values.selfbot) [command, args, isCommandMessage] = this._matchDefault(message, /^([^\\s]+)/i);\r\n\t\tif(command) return [command, args, false, true];\r\n\r\n\t\treturn [null, null, false, isCommandMessage];\r\n\t}\r\n\r\n\t/**\r\n\t * Matches a message against a guild command pattern\r\n\t * @param {Message} message - The message\r\n\t * @param {RegExp} pattern - The pattern to match against\r\n\t * @param {number} commandNameIndex - The index of the command name in the pattern matches\r\n\t * @return {Array} The command, arguments, and whether or not it's a command message\r\n\t */\r\n\t_matchDefault(message, pattern, commandNameIndex = 1) {\r\n\t\tconst matches = pattern.exec(message.content);\r\n\t\tif(!matches) return [null, null, false];\r\n\r\n\t\tconst commands = this.bot.registry.findCommands(matches[commandNameIndex]);\r\n\t\tif(commands.length !== 1) return [null, null, true];\r\n\t\tif(!commands[0] || !commands[0].defaultHandling) return [null, null, true];\r\n\r\n\t\tconst argString = message.content.substring(matches[1].length + (matches[2] ? matches[2].length : 0));\r\n\t\tlet args;\r\n\t\tif(commands[0].argsType === 'single') {\r\n\t\t\targs = [argString.trim().replace(commands[0].argsSingleQuotes ? /^(\"|')([^]*)\\1$/g : /^(\")([^]*)\"$/g, '$2')];\r\n\t\t} else if(commands[0].argsType === 'multiple') {\r\n\t\t\targs = this.constructor.parseArgs(argString, commands[0].argsCount, commands[0].argsSingleQuotes);\r\n\t\t}\r\n\r\n\t\treturn [commands[0], args, true];\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a command result object from a command's run result\r\n\t * @param {CommandResult|string[]|string} result - The command's run result\r\n\t * @return {CommandResult} The result object\r\n\t */\r\n\tstatic makeResultObject(result) {\r\n\t\tif(typeof result !== 'object' || Array.isArray(result)) result = { reply: result };\r\n\t\tif(result.plain && result.reply) throw new Error('The command result may contain either \"plain\" or \"reply\", not both.');\r\n\t\tif(result.plain && !Array.isArray(result.plain)) result.plain = [result.plain];\r\n\t\tif(result.reply && !Array.isArray(result.reply)) result.reply = [result.reply];\r\n\t\tif(result.direct && !Array.isArray(result.direct)) result.direct = [result.direct];\r\n\t\tif(!('editable' in result)) result.editable = true;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses an argument string into an array of arguments\r\n\t * @param {string} argString - The argument string to parse\r\n\t * @param {number} [argCount] - The number of arguments to extract from the string\r\n\t * @param {boolean} [allowSingleQuote=true] - Whether or not single quotes should be allowed to wrap arguments, in addition to double quotes\r\n\t * @return {string[]} The array of arguments\r\n\t */\r\n\tstatic parseArgs(argString, argCount, allowSingleQuote = true) {\r\n\t\tconst re = allowSingleQuote ? /\\s*(?:(\"|')([^]*?)\\1|(\\S+))\\s*/g : /\\s*(?:(\")([^]*?)\"|(\\S+))\\s*/g;\r\n\t\tconst result = [];\r\n\t\tlet match = [];\r\n\t\t// default: large enough to get all items\r\n\t\targCount = argCount || argString.length;\r\n\t\t// get match and push the capture group that is not null to the result\r\n\t\twhile(--argCount && (match = re.exec(argString))) result.push(match[2] || match[3]);\r\n\t\t// if text remains, push it to the array as it is, except for wrapping quotes, which are removed from it\r\n\t\tif(match && re.lastIndex < argString.length) {\r\n\t\t\tconst re2 = allowSingleQuote ? /^(\"|')([^]*)\\1$/g : /^(\")([^]*)\"$/g;\r\n\t\t\tresult.push(argString.substr(re.lastIndex).replace(re2, '$2'));\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a regular expression to match the command prefix and name in a message\r\n\t * @param {?Guild} guild - The Guild that the message is from\r\n\t * @param {User} user - The User that the bot is running for\r\n\t * @return {RegExp} Regular expression that matches a command prefix and name\r\n\t */\r\n\t_buildCommandPattern(guild, user) {\r\n\t\tlet prefix = guild ? this.bot.storage.settings.getValue(guild, 'command-prefix', this.bot.config.values.commandPrefix) : this.bot.config.values.commandPrefix;\r\n\t\tif(prefix === 'none') prefix = '';\r\n\t\tconst escapedPrefix = escapeRegex(prefix);\r\n\t\tconst prefixPatternPiece = prefix ? `${escapedPrefix}\\\\s*|` : '';\r\n\t\tconst pattern = new RegExp(`^(${prefixPatternPiece}<@!?${user.id}>\\\\s+(?:${escapedPrefix})?)([^\\\\s]+)`, 'i');\r\n\t\tthis.bot.logger.verbose(`Guild command pattern built.`, {\r\n\t\t\tguild: guild ? guild.name : null,\r\n\t\t\tguildID: guild ? guild.id : null,\r\n\t\t\tprefix: prefix, pattern: pattern.source\r\n\t\t});\r\n\t\treturn pattern;\r\n\t}\r\n}\r\n\r\n/**\r\n * @typedef {Object} CommandResult\r\n * @property {string[]} [plain] - Strings to send plain messages for\r\n * @property {string[]} [reply] - Strings to send reply messages for\r\n * @property {string[]} [direct] - Strings to send direct messages for\r\n * @property {boolean} [editable=true] - Whether or not the command message is editable\r\n */\r\n"
  },
  {
    "__docId__": 134,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandDispatcher",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~CommandDispatcher",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/dispatcher.js",
    "importStyle": "CommandDispatcher",
    "description": "Handles parsing messages and running commands from them",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 135,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "CommandResult",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~CommandResult",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "plain",
        "description": "Strings to send plain messages for"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "reply",
        "description": "Strings to send reply messages for"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "direct",
        "description": "Strings to send direct messages for"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "editable",
        "description": "Whether or not the command message is editable"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CommandResult"
    }
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bot"
        ],
        "spread": false,
        "optional": false,
        "name": "bot",
        "description": "The bot the dispatcher is for"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bot",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#bot",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_guildCommandPatterns",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_guildCommandPatterns",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_results",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_results",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_blacklistedUsers",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_blacklistedUsers",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_blacklistedUsers",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_blacklistedUsers",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleMessage",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#handleMessage",
    "access": null,
    "description": "Handle a new message or a message update",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to handle"
      },
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": true,
        "name": "oldMessage",
        "description": "The old message before the update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<null>"
      ],
      "spread": false,
      "description": "No value"
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleMessageResult",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#handleMessageResult",
    "access": null,
    "description": "Handle a message result",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message the result is from"
      },
      {
        "nullable": true,
        "types": [
          "CommandResult"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "The result"
      },
      {
        "nullable": null,
        "types": [
          "CommandResult"
        ],
        "spread": false,
        "optional": true,
        "name": "oldResult",
        "description": "The old result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<null>"
      ],
      "spread": false,
      "description": "No value"
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "run",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#run",
    "access": null,
    "description": "Run a command",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The command to run"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments for the command"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "fromPattern",
        "description": "Whether or not the arguments are from a pattern match"
      },
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message that triggered the run"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<CommandResult>"
      ],
      "spread": false,
      "description": "The result of running the command"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "commandRun When a command is run, with the command, result, message, args, and fromPattern passed"
      },
      {
        "types": [
          "*"
        ],
        "description": "commandError When an error occurs while running a command, with the command, message, args, and fromPattern passed"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendMessagesForResult",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#sendMessagesForResult",
    "access": null,
    "description": "Sends messages for a command result",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message the result is for"
      },
      {
        "nullable": null,
        "types": [
          "CommandResult"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "The command result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<null>"
      ],
      "spread": false,
      "description": "No value"
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendMessages",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#sendMessages",
    "access": null,
    "description": "Sends messages",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message the messages are being sent in response to"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "Contents of the messages to send"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "One of 'plain', 'reply', or 'direct'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Message[]>"
      ],
      "spread": false,
      "description": "The sent messages"
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateMessagesForResult",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#updateMessagesForResult",
    "access": null,
    "description": "Updates messages for a command result",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message the result is for"
      },
      {
        "nullable": null,
        "types": [
          "CommandResult"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "The command result"
      },
      {
        "nullable": null,
        "types": [
          "CommandResult"
        ],
        "spread": false,
        "optional": false,
        "name": "oldResult",
        "description": "The old command result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<null>"
      ],
      "spread": false,
      "description": "No value"
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateMessages",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#updateMessages",
    "access": null,
    "description": "Updates messages",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message the old messages are being updated in response to"
      },
      {
        "nullable": null,
        "types": [
          "Message[]"
        ],
        "spread": false,
        "optional": false,
        "name": "oldMessages",
        "description": "The old messages to update"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": "Contents of the messages to send"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "One of 'plain', 'reply', or 'direct'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Message[]>"
      ],
      "spread": false,
      "description": "The updated messages"
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_parseMessage",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_parseMessage",
    "access": null,
    "description": "Parses a message to find details about command usage in it",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Command, arguments, whether or not it's from a pattern match, and whether or not it's a command message"
    },
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_matchDefault",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_matchDefault",
    "access": null,
    "description": "Matches a message against a guild command pattern",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": "The pattern to match against"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "commandNameIndex",
        "description": "The index of the command name in the pattern matches"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The command, arguments, and whether or not it's a command message"
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "makeResultObject",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher.makeResultObject",
    "access": null,
    "description": "Makes a command result object from a command's run result",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "CommandResult",
          "string[]",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "The command's run result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CommandResult"
      ],
      "spread": false,
      "description": "The result object"
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "parseArgs",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher.parseArgs",
    "access": null,
    "description": "Parses an argument string into an array of arguments",
    "lineNumber": 334,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "argString",
        "description": "The argument string to parse"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "argCount",
        "description": "The number of arguments to extract from the string"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "allowSingleQuote",
        "description": "Whether or not single quotes should be allowed to wrap arguments, in addition to double quotes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "The array of arguments"
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildCommandPattern",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_buildCommandPattern",
    "access": null,
    "description": "Creates a regular expression to match the command prefix and name in a message",
    "lineNumber": 356,
    "params": [
      {
        "nullable": true,
        "types": [
          "Guild"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild that the message is from"
      },
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The User that the bot is running for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": "Regular expression that matches a command prefix and name"
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/module.js",
    "memberof": null,
    "longname": "src/commands/module.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Setting from '../storage/models/setting';\r\n\r\n/** A module for commands */\r\nexport default class Module {\r\n\t/**\r\n\t * @param {Bot} bot - The bot the module is for\r\n\t * @param {string} id - The ID for the module\r\n\t * @param {string} [name=id] - The name of the module\r\n\t * @param {boolean} [hide=false] - Whether or not to hide from the module list, and not allow disabling\r\n\t * @param {Command[]} [commands] - The commands that the module contains\r\n\t */\r\n\tconstructor(bot, id, name, hide, commands) {\r\n\t\tif(!bot || !id) throw new Error('A bot and ID must be specified.');\r\n\t\tif(commands && !Array.isArray(commands)) throw new TypeError('Commands must be an array.');\r\n\t\tif(id !== id.toLowerCase()) throw new Error('Module ID must be lowercase.');\r\n\r\n\t\t/** @type {Bot} */\r\n\t\tthis.bot = bot;\r\n\t\t/** @type {string} */\r\n\t\tthis.id = id;\r\n\t\t/** @type {string} */\r\n\t\tthis.name = name || id;\r\n\t\t/** @type {boolean} */\r\n\t\tthis.hide = hide || false;\r\n\t\t/** @type {Command[]} */\r\n\t\tthis.commands = commands || [];\r\n\t}\r\n\r\n\t/**\r\n\t * Enables or disables the module on a guild\r\n\t * @param {Guild|string} guild - The guild or guild ID\r\n\t * @param {boolean} enabled - Whether the module should be enabled or disabled\r\n\t * @see {@link Module.setEnabled}\r\n\t */\r\n\tsetEnabled(guild, enabled) {\r\n\t\tthis.constructor.setEnabled(this.bot.storage.settings, guild, this, enabled);\r\n\t}\r\n\r\n\t/**\r\n\t * Enables or disables a module on a guild\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {Guild|string} guild - The guild or guild ID\r\n\t * @param {Module|string} module - The module or module ID\r\n\t * @param {boolean} enabled - Whether the module should be enabled or disabled\r\n\t * @see {@link Module#setEnabled}\r\n\t */\r\n\tstatic setEnabled(settings, guild, module, enabled) {\r\n\t\tsettings.save(new Setting(guild, `mod-${module.id || module}`, enabled));\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the module is enabled on a guild\r\n\t * @param {Guild} guild - The guild\r\n\t * @return {boolean} Whether or not the module is enabled\r\n\t * @see {@link Module.isEnabled}\r\n\t */\r\n\tisEnabled(guild) {\r\n\t\treturn this.constructor.isEnabled(this.bot.storage.settings, guild, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if a module is enabled on a guild\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {Guild} guild - The guild\r\n\t * @param {Module|string} module - The module or module ID\r\n\t * @return {boolean} Whether or not the module is enabled\r\n\t * @see {@link Module#isEnabled}\r\n\t */\r\n\tstatic isEnabled(settings, guild, module) {\r\n\t\treturn settings.getValue(guild, `mod-${module.id || module}`, true);\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 155,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Module",
    "memberof": "src/commands/module.js",
    "longname": "src/commands/module.js~Module",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/module.js",
    "importStyle": "Module",
    "description": "A module for commands",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bot"
        ],
        "spread": false,
        "optional": false,
        "name": "bot",
        "description": "The bot the module is for"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID for the module"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "id",
        "defaultRaw": "id",
        "name": "name",
        "description": "The name of the module"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "hide",
        "description": "Whether or not to hide from the module list, and not allow disabling"
      },
      {
        "nullable": null,
        "types": [
          "Command[]"
        ],
        "spread": false,
        "optional": true,
        "name": "commands",
        "description": "The commands that the module contains"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bot",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#bot",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Bot"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#id",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#name",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hide",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#hide",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "commands",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#commands",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Command[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setEnabled",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#setEnabled",
    "access": null,
    "description": "Enables or disables the module on a guild",
    "see": [
      "{@link Module.setEnabled}"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether the module should be enabled or disabled"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "setEnabled",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module.setEnabled",
    "access": null,
    "description": "Enables or disables a module on a guild",
    "see": [
      "{@link Module#setEnabled}"
    ],
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID"
      },
      {
        "nullable": null,
        "types": [
          "Module",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "The module or module ID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether the module should be enabled or disabled"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEnabled",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module#isEnabled",
    "access": null,
    "description": "Checks if the module is enabled on a guild",
    "see": [
      "{@link Module.isEnabled}"
    ],
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the module is enabled"
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isEnabled",
    "memberof": "src/commands/module.js~Module",
    "longname": "src/commands/module.js~Module.isEnabled",
    "access": null,
    "description": "Checks if a module is enabled on a guild",
    "see": [
      "{@link Module#isEnabled}"
    ],
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "Guild"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild"
      },
      {
        "nullable": null,
        "types": [
          "Module",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "The module or module ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the module is enabled"
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/registry.js",
    "memberof": null,
    "longname": "src/commands/registry.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport EventEmitter from 'events';\r\nimport Module from './module';\r\nimport CommandBuilder from './builder';\r\n\r\n/** Handles registration and searching of commands and modules */\r\nexport default class CommandRegistry extends EventEmitter {\r\n\t/** @param {?Logger} [logger] - The logger to use  */\r\n\tconstructor(logger) {\r\n\t\tsuper();\r\n\r\n\t\t/** @type {?Logger} */\r\n\t\tthis.logger = logger || null;\r\n\t\t/** @type {Command[]} */\r\n\t\tthis.commands = [];\r\n\t\t/** @type {Module[]} */\r\n\t\tthis.modules = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a single command\r\n\t * @param {Command} command - The command to register\r\n\t * @see {@link CommandRegistry#registerCommands}\r\n\t */\r\n\tregisterCommand(command) {\r\n\t\tthis.registerCommands([command]);\r\n\t}\r\n\r\n\t/**\r\n\t * Registers multiple commands\r\n\t * @param {Command[]} commands - The commands to register\r\n\t * @emits commandRegister When a command is registered, with the command and registry passed\r\n\t */\r\n\tregisterCommands(commands) {\r\n\t\tif(!Array.isArray(commands)) throw new TypeError('Commands must be an array.');\r\n\t\tfor(let command of commands) {\r\n\t\t\tif(command instanceof CommandBuilder) command = command.command;\r\n\r\n\t\t\t// Make sure there aren't any conflicts\r\n\t\t\tif(this.commands.some(cmd => cmd.name === command.name)) throw new Error(`A command with the name \"${command.name}\"\" is already registered.`);\r\n\t\t\tconst module = this.modules.find(mod => mod.id === command.module);\r\n\t\t\tif(!module) throw new Error(`Module \"${command.module}\" is not registered.`);\r\n\t\t\tif(module.commands.some(cmd => cmd.memberName === command.memberName)) throw new Error(`A command with the member name \"${command.memberName}\" is already registered in ${module.id}`);\r\n\r\n\t\t\t// Make sure there aren't any conflicts for the aliases, and add dehyphenated aliases\r\n\t\t\tif(command.name.includes('-')) command.aliases.push(command.name.replace(/-/g, ''));\r\n\t\t\tfor(const alias of command.aliases) {\r\n\t\t\t\tif(this.commands.some(cmd => cmd.aliases.some(ali => ali === alias))) throw new Error(`A command with the alias \"${alias}\" is already registered.`);\r\n\t\t\t\tif(alias.includes('-')) command.aliases.push(alias.replace(/-/g, ''));\r\n\t\t\t}\r\n\r\n\t\t\t// Add the command\r\n\t\t\tmodule.commands.push(command);\r\n\t\t\tthis.commands.push(command);\r\n\t\t\tif(this.logger) this.logger.verbose(`Registered command ${command.module}:${command.memberName}.`);\r\n\t\t\tthis.emit('commandRegister', command, this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a single module\r\n\t * @param {Module} module - The module to register\r\n\t * @see {@link CommandRegistry#registerModules}\r\n\t */\r\n\tregisterModule(module) {\r\n\t\tthis.registerModules([module]);\r\n\t}\r\n\r\n\t/**\r\n\t * Registers multiple modules\r\n\t * @param {Module[]} modules - The modules to register\r\n\t * @emits moduleRegister When a module is registered, with the module and registry passed\r\n\t */\r\n\tregisterModules(modules) {\r\n\t\tif(!Array.isArray(modules)) throw new TypeError('Modules must be an array.');\r\n\t\tfor(let module of modules) {\r\n\t\t\tif(!(module instanceof Module)) throw new TypeError('Module must be an instance of Module.');\r\n\t\t\tif(this.modules.some(mod => mod.name === module.name)) throw new Error(`Module \"${module.name}\"\" is already registered.`);\r\n\t\t\tthis.modules.push(module);\r\n\t\t\tif(this.logger) this.logger.verbose(`Registered module ${module.id}.`);\r\n\t\t\tthis.emit('moduleRegister', module, this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all commands that match the search string\r\n\t * @param {string} [searchString] - The string to search for\r\n\t * @param {Message} [message] - The message to check usability against\r\n\t * @return {Command[]} All commands that are found\r\n\t */\r\n\tfindCommands(searchString = null, message = null) {\r\n\t\tif(!searchString) return message ? this.commands.filter(cmd => cmd.isUsable(message)) : this.commands;\r\n\r\n\t\t// Find all matches\r\n\t\tconst lowercaseSearch = searchString.toLowerCase();\r\n\t\tconst matchedCommands = this.commands.filter(cmd =>\r\n\t\t\tcmd.name.includes(lowercaseSearch)\r\n\t\t\t|| (cmd.aliases && cmd.aliases.some(ali => ali.includes(lowercaseSearch)))\r\n\t\t\t|| `${cmd.module}:${cmd.memberName}` === lowercaseSearch\r\n\t\t);\r\n\r\n\t\t// See if there's an exact match\r\n\t\tfor(const command of matchedCommands) {\r\n\t\t\tif(command.name === lowercaseSearch || (command.aliases && command.aliases.some(ali => ali === lowercaseSearch))) return [command];\r\n\t\t}\r\n\r\n\t\treturn matchedCommands;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all modules that match the search string\r\n\t * @param {string} [searchString] - The string to search for\r\n\t * @return {Module[]} All modules that are found\r\n\t */\r\n\tfindModules(searchString = null) {\r\n\t\tif(!searchString) return this.modules;\r\n\r\n\t\t// Find all matches\r\n\t\tconst lowercaseSearch = searchString.toLowerCase();\r\n\t\tconst matchedModules = this.modules.filter(mod => mod.name.includes(lowercaseSearch) || mod.id.includes(lowercaseSearch));\r\n\r\n\t\t// See if there's an exact match\r\n\t\tfor(const module of matchedModules) {\r\n\t\t\tif(module.name.toLowerCase() === lowercaseSearch || module.id === lowercaseSearch) return [module];\r\n\t\t}\r\n\r\n\t\treturn matchedModules;\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 167,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandRegistry",
    "memberof": "src/commands/registry.js",
    "longname": "src/commands/registry.js~CommandRegistry",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/registry.js",
    "importStyle": "CommandRegistry",
    "description": "Handles registration and searching of commands and modules",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#constructor",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "params": [
      {
        "nullable": true,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": true,
        "name": "logger",
        "description": "The logger to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "logger",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#logger",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": true,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "commands",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#commands",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Command[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "modules",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#modules",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Module[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerCommand",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#registerCommand",
    "access": null,
    "description": "Registers a single command",
    "see": [
      "{@link CommandRegistry#registerCommands}"
    ],
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The command to register"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerCommands",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#registerCommands",
    "access": null,
    "description": "Registers multiple commands",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Command[]"
        ],
        "spread": false,
        "optional": false,
        "name": "commands",
        "description": "The commands to register"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "commandRegister When a command is registered, with the command and registry passed"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerModule",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#registerModule",
    "access": null,
    "description": "Registers a single module",
    "see": [
      "{@link CommandRegistry#registerModules}"
    ],
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Module"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "The module to register"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerModules",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#registerModules",
    "access": null,
    "description": "Registers multiple modules",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Module[]"
        ],
        "spread": false,
        "optional": false,
        "name": "modules",
        "description": "The modules to register"
      }
    ],
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "moduleRegister When a module is registered, with the module and registry passed"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findCommands",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#findCommands",
    "access": null,
    "description": "Finds all commands that match the search string",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "searchString",
        "description": "The string to search for"
      },
      {
        "nullable": null,
        "types": [
          "Message"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "The message to check usability against"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Command[]"
      ],
      "spread": false,
      "description": "All commands that are found"
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findModules",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#findModules",
    "access": null,
    "description": "Finds all modules that match the search string",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "searchString",
        "description": "The string to search for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Module[]"
      ],
      "spread": false,
      "description": "All modules that are found"
    },
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/errors/command-format.js",
    "memberof": null,
    "longname": "src/errors/command-format.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport FriendlyError from './friendly';\r\n\r\n/** Has a descriptive message for a command not having proper format */\r\nexport default class CommandFormatError extends FriendlyError {\r\n\t/**\r\n\t * @param {Command} command - The command the error is for\r\n\t * @param {?Guild} guild - The Guild the error is in\r\n\t */\r\n\tconstructor(command, guild = null) {\r\n\t\tsuper(`Invalid command format. Use ${command.bot.util.usage(`help ${command.name}`, guild)} for information.`);\r\n\t\t/** @ignore */\r\n\t\tthis.name = 'CommandFormatError';\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 179,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandFormatError",
    "memberof": "src/errors/command-format.js",
    "longname": "src/errors/command-format.js~CommandFormatError",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/errors/command-format.js",
    "importStyle": "CommandFormatError",
    "description": "Has a descriptive message for a command not having proper format",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/errors/friendly.js~FriendlyError"
    ]
  },
  {
    "__docId__": 180,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/errors/command-format.js~CommandFormatError",
    "longname": "src/errors/command-format.js~CommandFormatError#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The command the error is for"
      },
      {
        "nullable": true,
        "types": [
          "Guild"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The Guild the error is in"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/errors/command-format.js~CommandFormatError",
    "longname": "src/errors/command-format.js~CommandFormatError#name",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/errors/friendly.js",
    "memberof": null,
    "longname": "src/errors/friendly.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/** Has a message that can be considered user-friendly */\r\nexport default class FriendlyError extends Error {\r\n\t/** @param {string} message - The error message */\r\n\tconstructor(message) {\r\n\t\tsuper(message);\r\n\t\t/** @ignore */\r\n\t\tthis.name = 'FriendlyError';\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 183,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FriendlyError",
    "memberof": "src/errors/friendly.js",
    "longname": "src/errors/friendly.js~FriendlyError",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/errors/friendly.js",
    "importStyle": "FriendlyError",
    "description": "Has a message that can be considered user-friendly",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/errors/friendly.js~FriendlyError",
    "longname": "src/errors/friendly.js~FriendlyError#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/errors/friendly.js~FriendlyError",
    "longname": "src/errors/friendly.js~FriendlyError#name",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join as pathJoin } from 'path';\r\nimport _Bot from './bot';\r\nimport _Permissions from './bot/permissions';\r\nimport _Util from './bot/util';\r\nimport _Command from './commands/command';\r\nimport _Module from './commands/module';\r\nimport _GuildStorage from './storage';\r\nimport _Setting from './storage/models/setting';\r\nimport _FriendlyError from './errors/friendly';\r\nimport _CommandFormatError from './errors/command-format';\r\n\r\n/**\r\n * The version of GRAF\r\n * @type {string}\r\n */\r\nexport const version = JSON.parse(readFileSync(pathJoin(__dirname, '../package.json'))).version;\r\n\r\n/**\r\n * The {@link Bot} class\r\n * @type {function}\r\n */\r\nexport const Bot = _Bot;\r\nexport default Bot;\r\n\r\n/**\r\n * The {@link Command} class\r\n * @type {function}\r\n */\r\nexport const Command = _Command;\r\n\r\n/**\r\n * The {@link Module} class\r\n * @type {function}\r\n */\r\nexport const Module = _Module;\r\n\r\n/**\r\n * The {@link BotPermissions} class\r\n * @type {function}\r\n */\r\nexport const Permissions = _Permissions;\r\n\r\n/**\r\n * The {@link BotUtil} class\r\n * @type {function}\r\n */\r\nexport const Util = _Util;\r\n\r\n/**\r\n * The {@link GuildStorage} class\r\n * @type {function}\r\n */\r\nexport const GuildStorage = _GuildStorage;\r\n\r\n/**\r\n * The {@link Setting} class\r\n * @type {function}\r\n */\r\nexport const Setting = _Setting;\r\n\r\n/**\r\n * The {@link FriendlyError} class\r\n * @type {function}\r\n */\r\nexport const FriendlyError = _FriendlyError;\r\n\r\n/**\r\n * The {@link CommandFormatError} class\r\n * @type {function}\r\n */\r\nexport const CommandFormatError = _CommandFormatError;\r\n\r\n/** @external {Client} http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Client */\r\n/** @external {User} http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/User */\r\n/** @external {Guild} http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Guild */\r\n/** @external {Channel} http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Channel */\r\n/** @external {Message} http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Message */\r\n/** @external {Role} http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Role */\r\n/** @external {Logger} https://github.com/winstonjs/winston/blob/master/README.md */\r\n/** @external {LocalStorage} https://developer.mozilla.org/en-US/docs/Web/API/Storage */\r\n"
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "version",
    "memberof": "src/index.js",
    "longname": "src/index.js~version",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{version}",
    "description": "The version of GRAF",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Bot",
    "memberof": "src/index.js",
    "longname": "src/index.js~Bot",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{Bot}",
    "description": "The {@link Bot} class",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Command",
    "memberof": "src/index.js",
    "longname": "src/index.js~Command",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{Command}",
    "description": "The {@link Command} class",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Module",
    "memberof": "src/index.js",
    "longname": "src/index.js~Module",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{Module}",
    "description": "The {@link Module} class",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Permissions",
    "memberof": "src/index.js",
    "longname": "src/index.js~Permissions",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{Permissions}",
    "description": "The {@link BotPermissions} class",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Util",
    "memberof": "src/index.js",
    "longname": "src/index.js~Util",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{Util}",
    "description": "The {@link BotUtil} class",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "GuildStorage",
    "memberof": "src/index.js",
    "longname": "src/index.js~GuildStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{GuildStorage}",
    "description": "The {@link GuildStorage} class",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Setting",
    "memberof": "src/index.js",
    "longname": "src/index.js~Setting",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{Setting}",
    "description": "The {@link Setting} class",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "FriendlyError",
    "memberof": "src/index.js",
    "longname": "src/index.js~FriendlyError",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{FriendlyError}",
    "description": "The {@link FriendlyError} class",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "CommandFormatError",
    "memberof": "src/index.js",
    "longname": "src/index.js~CommandFormatError",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "{CommandFormatError}",
    "description": "The {@link CommandFormatError} class",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Client",
    "externalLink": "http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Client",
    "memberof": "src/index.js",
    "longname": "src/index.js~Client",
    "access": null,
    "description": null
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "User",
    "externalLink": "http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/User",
    "memberof": "src/index.js",
    "longname": "src/index.js~User",
    "access": null,
    "description": null
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Guild",
    "externalLink": "http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Guild",
    "memberof": "src/index.js",
    "longname": "src/index.js~Guild",
    "access": null,
    "description": null
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Channel",
    "externalLink": "http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Channel",
    "memberof": "src/index.js",
    "longname": "src/index.js~Channel",
    "access": null,
    "description": null
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Message",
    "externalLink": "http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Message",
    "memberof": "src/index.js",
    "longname": "src/index.js~Message",
    "access": null,
    "description": null
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Role",
    "externalLink": "http://hydrabolt.github.io/discord.js/index.html#!/docs/tag/master/class/Role",
    "memberof": "src/index.js",
    "longname": "src/index.js~Role",
    "access": null,
    "description": null
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Logger",
    "externalLink": "https://github.com/winstonjs/winston/blob/master/README.md",
    "memberof": "src/index.js",
    "longname": "src/index.js~Logger",
    "access": null,
    "description": null
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "LocalStorage",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Storage",
    "memberof": "src/index.js",
    "longname": "src/index.js~LocalStorage",
    "access": null,
    "description": null
  },
  {
    "__docId__": 205,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/storage/allowed-channels.js",
    "memberof": null,
    "longname": "src/storage/allowed-channels.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport GuildStorage from '.';\r\nimport Util from '../bot/util';\r\n\r\n/** Stores channels that the bot is allowed to operate in within a guild */\r\nexport default class AllowedChannelStorage extends GuildStorage {\r\n\t/**\r\n\t * @param {LocalStorage} localStorage - The LocalStorage instance to use\r\n\t * @param {Logger} [logger] - The logger to use\r\n\t */\r\n\tconstructor(localStorage, logger) {\r\n\t\tsuper('allowed-channels', localStorage, logger);\r\n\t}\n\n\t/**\n\t * Saves a channel to the storage\n\t * @param {Channel} channel - The channel to save\n\t * @return {boolean} Whether or not the channel was saved\n\t * @see {@link GuildStorage#save}\n\t */\n\tsave(channel) {\r\n\t\treturn super.save(channel.guild, channel.id);\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a channel from the storage\r\n\t * @param {Channel} channel - The channel to delete\r\n\t * @return {boolean} Whether or not the channel was deleted\r\n\t * @see {@link GuildStorage#delete}\r\n\t */\r\n\tdelete(channel) {\r\n\t\treturn super.delete(channel.guild, channel.id);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all channels associated with a guild that optionally match a search string\r\n\t * @param {Guild|string} guild - The guild or guild ID to find the channels of\r\n\t * @param {string} [searchString] - The string to match channels against\r\n\t * @return {Channel[]} - All found channels\r\n\t * @see {@link GuildStorage#find}\r\n\t */\r\n\tfind(guild, searchString = null) {\r\n\t\tif(!guild) throw new Error('A guild must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(!this.guildsMap[guild.id]) return [];\r\n\r\n\t\t// Find all of the guild's channels that match, and filter them to ones that are usable channels\r\n\t\tconst channels = Util.search(guild.channels.findAll('type', 'text'), searchString, { searchExact: false }).filter(channel => this.guildsMap[guild.id].includes(channel.id));\r\n\t\treturn Util.search(channels, searchString, { searchInexact: false });\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 206,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AllowedChannelStorage",
    "memberof": "src/storage/allowed-channels.js",
    "longname": "src/storage/allowed-channels.js~AllowedChannelStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/storage/allowed-channels.js",
    "importStyle": "AllowedChannelStorage",
    "description": "Stores channels that the bot is allowed to operate in within a guild",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/storage/..js~GuildStorage"
    ]
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/storage/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/storage/allowed-channels.js~AllowedChannelStorage#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "localStorage",
        "description": "The LocalStorage instance to use"
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": true,
        "name": "logger",
        "description": "The logger to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/storage/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/storage/allowed-channels.js~AllowedChannelStorage#save",
    "access": null,
    "description": "Saves a channel to the storage",
    "see": [
      "{@link GuildStorage#save}"
    ],
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Channel"
        ],
        "spread": false,
        "optional": false,
        "name": "channel",
        "description": "The channel to save"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the channel was saved"
    },
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/storage/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/storage/allowed-channels.js~AllowedChannelStorage#delete",
    "access": null,
    "description": "Deletes a channel from the storage",
    "see": [
      "{@link GuildStorage#delete}"
    ],
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Channel"
        ],
        "spread": false,
        "optional": false,
        "name": "channel",
        "description": "The channel to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the channel was deleted"
    },
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/storage/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/storage/allowed-channels.js~AllowedChannelStorage#find",
    "access": null,
    "description": "Finds all channels associated with a guild that optionally match a search string",
    "see": [
      "{@link GuildStorage#find}"
    ],
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID to find the channels of"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "searchString",
        "description": "The string to match channels against"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Channel[]"
      ],
      "spread": false,
      "description": "All found channels"
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/storage/index.js",
    "memberof": null,
    "longname": "src/storage/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Util from '../bot/util';\r\n\r\n/** Stores data entries associated with guilds */\r\nexport default class GuildStorage {\r\n\t/**\r\n\t * @param {string} key - The key of the storage in the LocalStorage\r\n\t * @param {LocalStorage} localStorage - The LocalStorage instance to use\r\n\t * @param {Logger} [logger] - The logger to use\r\n\t * @param {boolean} [objectBased=false] - If true, the storage will be object based. If false, it will be array-based.\r\n\t */\r\n\tconstructor(key, localStorage, logger, objectBased = false) {\r\n\t\tif(!key || !localStorage) throw new Error('A key and localStorage must be specified.');\r\n\t\t/** @type {string} */\r\n\t\tthis.key = key;\r\n\t\t/** @type {LocalStorage} */\r\n\t\tthis.localStorage = localStorage;\r\n\t\t/** @type {?Logger} */\r\n\t\tthis.logger = logger;\r\n\t\t/** @type {boolean} */\r\n\t\tthis.objectBased = objectBased || false;\r\n\t\t/** @type {Object} */\r\n\t\tthis.guildsMap = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the data from LocalStorage\r\n\t */\r\n\tloadStorage() {\r\n\t\tthis.guildsMap = JSON.parse(this.localStorage.getItem(this.key));\r\n\t\tif(!this.guildsMap) this.guildsMap = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Saves the data to LocalStorage\r\n\t */\r\n\tsaveStorage() {\r\n\t\tif(!this.guildsMap) throw new Error('Trying to save before load');\r\n\t\tthis.localStorage.setItem(this.key, JSON.stringify(this.guildsMap));\r\n\t\tif(this.logger) this.logger.debug(`Saved ${this.key} storage.`, this.guildsMap);\r\n\t}\r\n\r\n\t/**\r\n\t * Saves an entry associated with a guild\r\n\t * @param {Guild|string} guild - The guild or guild ID the entry should be associated with\r\n\t * @param {*|Object} entry - If the storage is array-based, this can be any value to store.\r\n\t * If it is object-based, this must be an object with \"key\" and \"value\" properties to store.\r\n\t * @param {function} [searchFunction] - The function to find existing entries (See {@link GuildStorage#exists})\r\n\t * @return {boolean} Whether or not the entry was saved (will be false only if the storage is array-based and the entry already exists)\r\n\t */\r\n\tsave(guild, entry, searchFunction = null) {\r\n\t\tif(!guild || !entry) throw new Error('A guild and entry must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(guild.id) guild = guild.id;\r\n\t\tif(!this.guildsMap[guild]) this.guildsMap[guild] = this.objectBased ? {} : [];\r\n\r\n\t\tconst exists = this.exists(guild, entry, searchFunction);\r\n\t\tif(!exists || this.objectBased) {\r\n\t\t\tif(this.objectBased) this.guildsMap[guild][entry.key] = entry.value; else this.guildsMap[guild].push(entry);\r\n\t\t\tthis.saveStorage();\r\n\t\t\tif(this.logger) this.logger.verbose(`${exists ? `Updated` : `Added`} entry in ${this.key} storage.`, { guild: guild, entry: entry });\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif(this.logger) this.logger.verbose(`Not adding entry to ${this.key} storage, because it already exists.`, { guild: guild, entry: entry });\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes an entry associated with a guild\r\n\t * @param {Guild|string} guild - The guild or guild ID the entry is associated with\r\n\t * @param {*|Object|string} entry - If the storage is array-based, this can be any value to find and delete.\r\n\t * If it is object-based, this must be an object with a \"key\" property, or a string that is the key.\r\n\t * @param {function} [searchFunction] - The function to find existing entries (See {@link GuildStorage#exists})\r\n\t * @return {boolean} Whether or not the entry was deleted\r\n\t */\r\n\tdelete(guild, entry, searchFunction = null) {\r\n\t\tif(!guild || !entry) throw new Error('A guild and entry must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(guild.id) guild = guild.id;\r\n\t\tif(!this.guildsMap[guild]) this.guildsMap[guild] = this.objectBased ? {} : [];\r\n\r\n\t\tlet index = this.objectBased ? null : -1;\r\n\t\tif(this.objectBased) {\r\n\t\t\tif(searchFunction) {\r\n\t\t\t\tfor(const entryKey of Object.keys(this.guildsMap)) {\r\n\t\t\t\t\tif(searchFunction(entryKey, this.guildsMap[guild][entryKey])) {\r\n\t\t\t\t\t\tindex = entryKey;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindex = entry.key || entry;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tindex = searchFunction ? this.guildsMap[guild].findIndex(searchFunction) : this.guildsMap[guild].findIndex(item => item === entry);\r\n\t\t}\r\n\r\n\t\tif((this.objectBased && index) || (!this.objectBased && index >= 0)) {\r\n\t\t\tif(this.objectBased) delete this.guildsMap[guild][index]; else this.guildsMap[guild].splice(index, 1);\r\n\t\t\tthis.saveStorage();\r\n\t\t\tif(this.logger) this.logger.verbose(`Deleted entry from ${this.key} storage.`, { guild: guild, entry: entry });\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif(this.logger) this.logger.verbose(`Not deleting entry from ${this.key} storage, because it doesn\\'t exist.`, { guild: guild, entry: entry });\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all entries associated with a guild\r\n\t * @param {Guild|string} guild - The guild or guild ID to clear the entries of\r\n\t */\r\n\tclear(guild) {\r\n\t\tif(!guild) throw new Error('A guild must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tdelete this.guildsMap[guild.id || guild];\r\n\t\tif(this.logger) this.logger.verbose(`Cleared a guild in ${this.key} storage.`, { guild: guild.id || guild });\r\n\t\tthis.saveStorage();\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all entries\r\n\t */\r\n\tclearAll() {\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tfor(const key of Object.keys(this.guildsMap)) delete this.guildsMap[key];\r\n\t\tif(this.logger) this.logger.verbose(`Cleared all of ${this.key} storage.`);\r\n\t\tthis.saveStorage();\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all entries in a storage that optionally match a search string\r\n\t * @param {Guild|string} guild - The guild or guild ID to find the entries of\r\n\t * @param {string} [searchString] - The string to match entries against\r\n\t * @param {SearchOptions} [searchOptions] - Options for the search\r\n\t * @return {*[]} - All found entries\r\n\t */\r\n\tfind(guild, searchString = null, searchOptions = {}) {\r\n\t\tif(!guild) throw new Error('A guild must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(guild.id) guild = guild.id;\r\n\t\tif(!this.guildsMap[guild]) return [];\r\n\t\tif(!searchString) return this.guildsMap[guild];\r\n\t\tif(this.objectBased) {\r\n\t\t\tif(this.guildsMap[guild][searchString]) return [this.guildsMap[guild][searchString]];\r\n\t\t\telse return [];\r\n\t\t} else {\r\n\t\t\treturn Util.search(this.guildsMap[guild], searchString, searchOptions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if an entry associated with a guild exists\r\n\t * @param {Guild|string} guild - The guild or guild ID the entry is associated with\r\n\t * @param {*|Object|string} entry - If the storage is array-based, this can be any value to check existence of.\r\n\t * If it is object-based, this must be an object with a \"key\" property, or a string that is the key.\r\n\t * @param {function} [searchFunction] - The function to find existing entries. If the storage is array-based, it will be passed the value of each entry.\r\n\t * If it is object-based, it will be passed the key and value of each entry.\r\n\t * @return {boolean} Whether or not the entry exists\r\n\t */\r\n\texists(guild, entry, searchFunction = null) {\r\n\t\tif(!guild || !entry) throw new Error('A guild and entry must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(guild.id) guild = guild.id;\r\n\t\tif(!this.guildsMap[guild]) return false;\r\n\t\tif(this.objectBased) {\r\n\t\t\tif(searchFunction) {\r\n\t\t\t\tfor(const entryKey of Object.keys(this.guildsMap[guild])) {\r\n\t\t\t\t\tif(searchFunction(entryKey, this.guildsMap[guild][entryKey])) return true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn typeof this.guildsMap[guild][entry.key || entry] !== 'undefined';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn searchFunction ? this.guildsMap[guild].some(searchFunction) : this.guildsMap[guild].includes(entry);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there are no entries associated with a guild\r\n\t * @param {Guild|string} guild - The guild or guild ID to check emptiness of\r\n\t * @return {boolean} Whether or not there are no entries associated with the guild\r\n\t */\r\n\tisEmpty(guild) {\r\n\t\tif(!guild) throw new Error('A guild must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(guild.id) guild = guild.id;\r\n\t\treturn !this.guildsMap[guild] || this.guildsMap[guild].length === 0;\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 212,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GuildStorage",
    "memberof": "src/storage/index.js",
    "longname": "src/storage/index.js~GuildStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/storage/index.js",
    "importStyle": "GuildStorage",
    "description": "Stores data entries associated with guilds",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 213,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the storage in the LocalStorage"
      },
      {
        "nullable": null,
        "types": [
          "LocalStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "localStorage",
        "description": "The LocalStorage instance to use"
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": true,
        "name": "logger",
        "description": "The logger to use"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "objectBased",
        "description": "If true, the storage will be object based. If false, it will be array-based."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "key",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#key",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localStorage",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#localStorage",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "LocalStorage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "logger",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#logger",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": true,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "objectBased",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#objectBased",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "guildsMap",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#guildsMap",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "loadStorage",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#loadStorage",
    "access": null,
    "description": "Loads the data from LocalStorage",
    "lineNumber": 31,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "guildsMap",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#guildsMap",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "guildsMap",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#guildsMap",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saveStorage",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#saveStorage",
    "access": null,
    "description": "Saves the data to LocalStorage",
    "lineNumber": 39,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 223,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#save",
    "access": null,
    "description": "Saves an entry associated with a guild",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID the entry should be associated with"
      },
      {
        "nullable": null,
        "types": [
          "*",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "If the storage is array-based, this can be any value to store.\nIf it is object-based, this must be an object with \"key\" and \"value\" properties to store."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "searchFunction",
        "description": "The function to find existing entries (See {@link GuildStorage#exists})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the entry was saved (will be false only if the storage is array-based and the entry already exists)"
    },
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#delete",
    "access": null,
    "description": "Deletes an entry associated with a guild",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID the entry is associated with"
      },
      {
        "nullable": null,
        "types": [
          "*",
          "Object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "If the storage is array-based, this can be any value to find and delete.\nIf it is object-based, this must be an object with a \"key\" property, or a string that is the key."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "searchFunction",
        "description": "The function to find existing entries (See {@link GuildStorage#exists})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the entry was deleted"
    },
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#clear",
    "access": null,
    "description": "Clears all entries associated with a guild",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID to clear the entries of"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 226,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearAll",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#clearAll",
    "access": null,
    "description": "Clears all entries",
    "lineNumber": 127,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 227,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#find",
    "access": null,
    "description": "Finds all entries in a storage that optionally match a search string",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID to find the entries of"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "searchString",
        "description": "The string to match entries against"
      },
      {
        "nullable": null,
        "types": [
          "SearchOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "searchOptions",
        "description": "Options for the search"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": "All found entries"
    },
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exists",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#exists",
    "access": null,
    "description": "Checks if an entry associated with a guild exists",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID the entry is associated with"
      },
      {
        "nullable": null,
        "types": [
          "*",
          "Object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "If the storage is array-based, this can be any value to check existence of.\nIf it is object-based, this must be an object with a \"key\" property, or a string that is the key."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "searchFunction",
        "description": "The function to find existing entries. If the storage is array-based, it will be passed the value of each entry.\nIf it is object-based, it will be passed the key and value of each entry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the entry exists"
    },
    "generator": false
  },
  {
    "__docId__": 229,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "src/storage/index.js~GuildStorage",
    "longname": "src/storage/index.js~GuildStorage#isEmpty",
    "access": null,
    "description": "Checks if there are no entries associated with a guild",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID to check emptiness of"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not there are no entries associated with the guild"
    },
    "generator": false
  },
  {
    "__docId__": 230,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/storage/mod-roles.js",
    "memberof": null,
    "longname": "src/storage/mod-roles.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport GuildStorage from '.';\r\nimport Util from '../bot/util';\r\n\r\n/** Stores roles that are moderators within a guild */\r\nexport default class ModRoleStorage extends GuildStorage {\r\n\t/**\r\n\t * @param {LocalStorage} localStorage - The LocalStorage instance to use\r\n\t * @param {Logger} [logger] - The logger to use\r\n\t */\r\n\tconstructor(localStorage, logger) {\r\n\t\tsuper('mod-roles', localStorage, logger);\r\n\t}\r\n\r\n\t/**\r\n\t * Saves a role to the storage\r\n\t * @param {Role} role - The role to save\r\n\t * @return {boolean} Whether or not the role was saved\r\n\t * @see {@link GuildStorage#save}\r\n\t */\r\n\tsave(role) {\r\n\t\treturn super.save(role.guild, role.id);\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a role from the storage\r\n\t * @param {Role} role - The role to delete\r\n\t * @return {boolean} Whether or not the role was deleted\r\n\t * @see {@link GuildStorage#delete}\r\n\t */\r\n\tdelete(role) {\r\n\t\treturn super.delete(role.guild, role.id);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all roles associated with a guild that optionally match a search string\r\n\t * @param {Guild|string} guild - The guild or guild ID to find the roles of\r\n\t * @param {string} [searchString] - The string to match roles against\r\n\t * @return {Role[]} - All found roles\r\n\t * @see {@link GuildStorage#find}\r\n\t */\r\n\tfind(guild, searchString = null) {\r\n\t\tif(!guild) throw new Error('A guild must be specified.');\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(!this.guildsMap[guild.id]) return [];\r\n\r\n\t\t// Find all of the guild's roles that match, and filter them to ones that are mod roles\r\n\t\tconst roles = Util.search(guild.roles.array(), searchString, { searchExact: false }).filter(role => this.guildsMap[guild.id].includes(role.id));\r\n\t\treturn Util.search(roles, searchString, { searchInexact: false });\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 231,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ModRoleStorage",
    "memberof": "src/storage/mod-roles.js",
    "longname": "src/storage/mod-roles.js~ModRoleStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/storage/mod-roles.js",
    "importStyle": "ModRoleStorage",
    "description": "Stores roles that are moderators within a guild",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/storage/..js~GuildStorage"
    ]
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/storage/mod-roles.js~ModRoleStorage",
    "longname": "src/storage/mod-roles.js~ModRoleStorage#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "localStorage",
        "description": "The LocalStorage instance to use"
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": true,
        "name": "logger",
        "description": "The logger to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 233,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/storage/mod-roles.js~ModRoleStorage",
    "longname": "src/storage/mod-roles.js~ModRoleStorage#save",
    "access": null,
    "description": "Saves a role to the storage",
    "see": [
      "{@link GuildStorage#save}"
    ],
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Role"
        ],
        "spread": false,
        "optional": false,
        "name": "role",
        "description": "The role to save"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the role was saved"
    },
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/storage/mod-roles.js~ModRoleStorage",
    "longname": "src/storage/mod-roles.js~ModRoleStorage#delete",
    "access": null,
    "description": "Deletes a role from the storage",
    "see": [
      "{@link GuildStorage#delete}"
    ],
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Role"
        ],
        "spread": false,
        "optional": false,
        "name": "role",
        "description": "The role to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the role was deleted"
    },
    "generator": false
  },
  {
    "__docId__": 235,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/storage/mod-roles.js~ModRoleStorage",
    "longname": "src/storage/mod-roles.js~ModRoleStorage#find",
    "access": null,
    "description": "Finds all roles associated with a guild that optionally match a search string",
    "see": [
      "{@link GuildStorage#find}"
    ],
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID to find the roles of"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "searchString",
        "description": "The string to match roles against"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Role[]"
      ],
      "spread": false,
      "description": "All found roles"
    },
    "generator": false
  },
  {
    "__docId__": 236,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/storage/models/setting.js",
    "memberof": null,
    "longname": "src/storage/models/setting.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/** A guild-specific setting */\r\nexport default class Setting {\r\n\t/**\r\n\t * @param {?Guild|string} guild - The guild or guild ID ('global' if empty)\r\n\t * @param {string} key - The key of the setting\r\n\t * @param {*} [value] - The value of the setting\r\n\t */\r\n\tconstructor(guild, key, value) {\r\n\t\tif(!key) throw new Error('Setting key must be specified.');\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.guild = guild ? guild.id || guild : 'global';\r\n\t\t/** @type {string} */\r\n\t\tthis.key = key;\r\n\t\t/** @type {*} */\r\n\t\tthis.value = value;\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 237,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Setting",
    "memberof": "src/storage/models/setting.js",
    "longname": "src/storage/models/setting.js~Setting",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/storage/models/setting.js",
    "importStyle": "Setting",
    "description": "A guild-specific setting",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/storage/models/setting.js~Setting",
    "longname": "src/storage/models/setting.js~Setting#constructor",
    "access": null,
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": true,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "guild",
        "description": "The guild or guild ID ('global' if empty)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the setting"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "The value of the setting"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "guild",
    "memberof": "src/storage/models/setting.js~Setting",
    "longname": "src/storage/models/setting.js~Setting#guild",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "key",
    "memberof": "src/storage/models/setting.js~Setting",
    "longname": "src/storage/models/setting.js~Setting#key",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/storage/models/setting.js~Setting",
    "longname": "src/storage/models/setting.js~Setting#value",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/storage/settings.js",
    "memberof": null,
    "longname": "src/storage/settings.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport GuildStorage from '.';\r\nimport Setting from './models/setting';\r\n\r\n/** Stores settings within a guild */\r\nexport default class SettingStorage extends GuildStorage {\r\n\t/**\r\n\t * @param {LocalStorage} localStorage - The LocalStorage instance to use\r\n\t * @param {Logger} [logger] - The logger to use\r\n\t */\r\n\tconstructor(localStorage, logger) {\r\n\t\tsuper('settings', localStorage, logger, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Saves a setting to the storage\r\n\t * @param {Setting} setting - The setting to save\r\n\t * @return {boolean} Whether or not the setting was saved\r\n\t * @see {@link GuildStorage#save}\r\n\t */\r\n\tsave(setting) {\r\n\t\treturn super.save(setting.guild, setting);\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a setting from the storage\r\n\t * @param {Guild|string} [guild] - The guild or guild ID the setting is associated with\r\n\t * @param {Setting|string} setting - The setting or setting key (must be a setting instance if the guild isn't specified)\r\n\t * @return {boolean} Whether or not the setting was deleted\r\n\t * @see {@link GuildStorage#delete}\r\n\t */\r\n\tdelete(guild, setting) {\r\n\t\t[guild, setting] = this._getSettingGuildAndKey(setting, guild);\r\n\t\treturn super.delete(guild, setting);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all settings associated with a guild or a single one with a key\r\n\t * @param {Guild|string} [guild] - The guild or guild ID to find the settings of\r\n\t * @param {Setting|string} setting - The setting or setting key (must be a setting instance if the guild isn't specified)\r\n\t * @return {*[]} - All found setting values\r\n\t * @see {@link GuildStorage#find}\r\n\t */\r\n\tfind(guild, setting) {\r\n\t\t[guild, setting] = this._getSettingGuildAndKey(setting, guild, false);\r\n\t\treturn super.find(guild, setting);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if a setting associated with a guild exists\r\n\t * @param {Guild|string} [guild] - The guild or guild ID the setting is associated with\r\n\t * @param {Setting|string} setting - The setting or setting key\r\n\t * @return {boolean} Whether or not the setting exists\r\n\t * @see {@link GuildStorage#exists}\r\n\t */\r\n\texists(guild, setting) {\r\n\t\t[guild, setting] = this._getSettingGuildAndKey(setting, guild);\r\n\t\treturn super.exists(guild, setting);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the value of a setting associated with a guild\r\n\t * @param {Guild|string} [guild] - The guild or guild ID the setting is associated with\r\n\t * @param {Setting|string} setting - The setting or setting key (must be a setting instance if the guild isn't specified)\r\n\t * @param {*} [defaultValue=null] - The value to default to if the setting doesn't exist\r\n\t * @return {*} The value of the setting\r\n\t */\r\n\tgetValue(guild, setting, defaultValue = null) {\r\n\t\t[guild, setting] = this._getSettingGuildAndKey(setting, guild);\r\n\t\tif(!this.guildsMap) this.loadStorage();\r\n\t\tif(!this.guildsMap[guild]) return defaultValue;\r\n\t\tif(!(setting in this.guildsMap[guild])) return defaultValue;\r\n\t\treturn this.guildsMap[guild][setting];\r\n\t}\r\n\r\n\t_getSettingGuildAndKey(setting, guild, requireSetting = true) {\r\n\t\tif(setting instanceof Setting) {\r\n\t\t\treturn [!guild ? setting.guild : guild.id || guild, setting.key];\r\n\t\t} else {\r\n\t\t\tif(!setting && requireSetting) throw new Error('A setting or a key must be specified.');\r\n\t\t\treturn [guild ? guild.id || guild : 'global', setting];\r\n\t\t}\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 243,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SettingStorage",
    "memberof": "src/storage/settings.js",
    "longname": "src/storage/settings.js~SettingStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/storage/settings.js",
    "importStyle": "SettingStorage",
    "description": "Stores settings within a guild",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/storage/..js~GuildStorage"
    ]
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/storage/settings.js~SettingStorage",
    "longname": "src/storage/settings.js~SettingStorage#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "localStorage",
        "description": "The LocalStorage instance to use"
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": true,
        "name": "logger",
        "description": "The logger to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/storage/settings.js~SettingStorage",
    "longname": "src/storage/settings.js~SettingStorage#save",
    "access": null,
    "description": "Saves a setting to the storage",
    "see": [
      "{@link GuildStorage#save}"
    ],
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Setting"
        ],
        "spread": false,
        "optional": false,
        "name": "setting",
        "description": "The setting to save"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the setting was saved"
    },
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/storage/settings.js~SettingStorage",
    "longname": "src/storage/settings.js~SettingStorage#delete",
    "access": null,
    "description": "Deletes a setting from the storage",
    "see": [
      "{@link GuildStorage#delete}"
    ],
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "guild",
        "description": "The guild or guild ID the setting is associated with"
      },
      {
        "nullable": null,
        "types": [
          "Setting",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "setting",
        "description": "The setting or setting key (must be a setting instance if the guild isn't specified)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the setting was deleted"
    },
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/storage/settings.js~SettingStorage",
    "longname": "src/storage/settings.js~SettingStorage#find",
    "access": null,
    "description": "Finds all settings associated with a guild or a single one with a key",
    "see": [
      "{@link GuildStorage#find}"
    ],
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "guild",
        "description": "The guild or guild ID to find the settings of"
      },
      {
        "nullable": null,
        "types": [
          "Setting",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "setting",
        "description": "The setting or setting key (must be a setting instance if the guild isn't specified)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": "All found setting values"
    },
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exists",
    "memberof": "src/storage/settings.js~SettingStorage",
    "longname": "src/storage/settings.js~SettingStorage#exists",
    "access": null,
    "description": "Checks if a setting associated with a guild exists",
    "see": [
      "{@link GuildStorage#exists}"
    ],
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "guild",
        "description": "The guild or guild ID the setting is associated with"
      },
      {
        "nullable": null,
        "types": [
          "Setting",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "setting",
        "description": "The setting or setting key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the setting exists"
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getValue",
    "memberof": "src/storage/settings.js~SettingStorage",
    "longname": "src/storage/settings.js~SettingStorage#getValue",
    "access": null,
    "description": "Gets the value of a setting associated with a guild",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Guild",
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "guild",
        "description": "The guild or guild ID the setting is associated with"
      },
      {
        "nullable": null,
        "types": [
          "Setting",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "setting",
        "description": "The setting or setting key (must be a setting instance if the guild isn't specified)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "defaultValue",
        "description": "The value to default to if the setting doesn't exist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The value of the setting"
    },
    "generator": false
  },
  {
    "__docId__": 250,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getSettingGuildAndKey",
    "memberof": "src/storage/settings.js~SettingStorage",
    "longname": "src/storage/settings.js~SettingStorage#_getSettingGuildAndKey",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "setting",
        "types": [
          "*"
        ]
      },
      {
        "name": "guild",
        "types": [
          "*"
        ]
      },
      {
        "name": "requireSetting",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 291,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]