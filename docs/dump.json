[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/channels/allow.js",
    "memberof": null,
    "longname": "src/commands/channels/allow.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport UsableChannel from '../../database/usable-channel';\r\nimport * as permissions from '../../permissions';\r\nimport CommandFormatError from '../../errors/command-format';\r\nimport Util from '../../util';\r\n\r\nexport default {\r\n\tname: 'allowchannel',\r\n\taliases: ['allowchan', 'addchannel', 'addchan'],\r\n\tgroup: 'channels',\r\n\tgroupName: 'add',\r\n\tdescription: 'Allows command operation in a channel.',\r\n\tusage: 'allowchannel <channel>',\r\n\tdetails: 'The channel must be the name or ID of a channel, or a channel mention. Only administrators may use this command.',\r\n\texamples: ['allowchannel #CoolChannel', 'allowchannel cool', 'allowchannel 205536402341888001'],\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message, args) {\r\n\t\tif(!args[0]) throw new CommandFormatError(this, message.server);\r\n\t\tconst matches = Util.patterns.channelID.exec(args[0]);\r\n\t\tlet channels;\r\n\t\tconst idChannel = message.server.channels.get('id', matches[1]);\r\n\t\tif(idChannel) channels = [idChannel]; else channels = Util.search(message.server.channels.getAll('type', 'text'), matches[1]);\r\n\r\n\t\tif(channels.length === 1) {\r\n\t\t\tif(UsableChannel.save(channels[0])) {\r\n\t\t\t\treturn `Allowed operation in ${channels[0]}.`;\r\n\t\t\t} else {\r\n\t\t\t\treturn `Operation is already allowed in ${channels[0]}.`;\r\n\t\t\t}\r\n\t\t} else if(channels.length > 1) {\r\n\t\t\treturn Util.disambiguation(channels, 'channels');\r\n\t\t} else {\r\n\t\t\treturn 'Unable to identify channel.';\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 1,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/channels/clear.js",
    "memberof": null,
    "longname": "src/commands/channels/clear.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport UsableChannel from '../../database/usable-channel';\r\nimport * as permissions from '../../permissions';\r\nimport Util from '../../util';\r\n\r\nlet lastUser;\r\nlet timeout;\r\n\r\nexport default {\r\n\tname: 'clearallowedchannels',\r\n\taliases: ['clearallowedchans', 'clearchannels', 'clearchans'],\r\n\tgroup: 'channels',\r\n\tgroupName: 'clear',\r\n\tdescription: 'Clears all of the allowed channels.',\r\n\tdetails: 'Only administrators may use this command.',\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message, args) {\r\n\t\tif(message.author.equals(lastUser) && args[0] && args[0].toLowerCase() === 'confirm') {\r\n\t\t\tUsableChannel.clearServer(message.server);\r\n\t\t\tclearTimeout(timeout);\r\n\t\t\tlastUser = null;\r\n\t\t\ttimeout = null;\r\n\t\t\treturn 'Cleared the server\\'s allowed channels. Operation is now allowed in all channels.';\r\n\t\t} else {\r\n\t\t\tif(timeout) {\r\n\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\ttimeout = null;\r\n\t\t\t}\r\n\t\t\tlastUser = message.author;\r\n\t\t\ttimeout = setTimeout(() => { lastUser = null; }, 30000);\r\n\t\t\treturn `Are you sure you want to clear all of the allowed channels? Operation will be permitted in all channels. Use ${Util.usage('clearallowedchannels confirm', message.server)} to continue.`;\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/channels/disallow.js",
    "memberof": null,
    "longname": "src/commands/channels/disallow.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { stripIndents } from 'common-tags';\r\nimport UsableChannel from '../../database/usable-channel';\r\nimport * as permissions from '../../permissions';\r\nimport CommandFormatError from '../../errors/command-format';\r\nimport Util from '../../util';\r\n\r\nexport default {\r\n\tname: 'disallowchannel',\r\n\taliases: ['disallowchan', 'deletechannel', 'deletechan', 'delchan', 'removechannel', 'removechan'],\r\n\tgroup: 'channels',\r\n\tgroupName: 'disallow',\r\n\tdescription: 'Disallows command operation in a channel.',\r\n\tusage: 'disallowchannel <channel>',\r\n\tdetails: 'The channel must be the name or ID of a channel, or a channel mention. Only administrators may use this command.',\r\n\texamples: ['disallowchannel #CoolChannel', 'disallowchannel cool', 'disallowchannel 205536402341888001'],\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message, args) {\r\n\t\tif(!args[0]) throw new CommandFormatError(this, message.server);\r\n\t\tconst matches = Util.patterns.channelID.exec(args[0]);\r\n\t\tconst idChannel = message.server.channels.get('id', matches[1]);\r\n\t\tconst allowedChannels = UsableChannel.findInServer(message.server);\r\n\t\tif(allowedChannels.length > 0) {\n\t\t\tconst channels = idChannel ? [idChannel] : UsableChannel.findInServer(message.server, matches[1]);\r\n\t\t\tif(channels.length === 1) {\r\n\t\t\t\tif(UsableChannel.delete(channels[0])) {\r\n\t\t\t\t\treturn stripIndents`\r\n\t\t\t\t\t\tDisallowed operation in ${channels[0]}.\r\n\t\t\t\t\t\t${UsableChannel.findInServer(message.server).length === 0 ? 'Since there are no longer any allowed channels, operation is now allowed in all channels.' : ''}\r\n\t\t\t\t\t`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn `Operation is already not allowed in ${channels[0]}.`;\r\n\t\t\t\t}\r\n\t\t\t} else if(channels.length > 1) {\r\n\t\t\t\treturn Util.disambiguation(channels, 'channels');\r\n\t\t\t} else {\r\n\t\t\t\treturn `Unable to identify channel. Use ${Util.usage('allowedchannels', message.server)} to view the allowed channels.`;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst serverChannels = message.server.channels.getAll('type', 'text');\r\n\t\t\tconst channels = idChannel ? [idChannel] : Util.search(serverChannels, args[0]);\r\n\t\t\tif(channels.length === 1) {\r\n\t\t\t\tconst index = serverChannels.indexOf(channels[0]);\r\n\t\t\t\tserverChannels.splice(index, 1);\r\n\t\t\t\tfor(const chn of serverChannels) UsableChannel.save(chn);\r\n\t\t\t\treturn stripIndents`\r\n\t\t\t\t\tDisallowed operation in ${channels[0]}.\r\n\t\t\t\t\tSince there were no allowed channels already, all other channels have been allowed.\r\n\t\t\t\t`;\r\n\t\t\t} else if(channels.length > 1) {\r\n\t\t\t\treturn Util.disambiguation(channels, 'channels');\r\n\t\t\t} else {\r\n\t\t\t\treturn `Unable to identify channel. Use ${Util.usage('allowedchannels', message.server)} to view the allowed channels.`;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 3,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/channels/list.js",
    "memberof": null,
    "longname": "src/commands/channels/list.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { stripIndents } from 'common-tags';\r\nimport UsableChannel from '../../database/usable-channel';\r\n\r\nexport default {\r\n\tname: 'allowedchannels',\r\n\taliases: ['allowedchans', 'channels', 'chans'],\r\n\tgroup: 'channels',\r\n\tgroupName: 'list',\r\n\tdescription: 'Lists all channels command operation is allowed in.',\r\n\tserverOnly: true,\r\n\r\n\tasync run(message) {\r\n\t\tconst channels = UsableChannel.findInServer(message.server);\r\n\t\tif(channels.length > 0) {\r\n\t\t\treturn stripIndents`\r\n\t\t\t\t__**Allowed channels:**__\r\n\t\t\t\t${channels.map(channel => `**-** ${channel}`).join('\\n')}\r\n\t\t\t`;\r\n\t\t} else {\r\n\t\t\treturn 'There are no channels specifically allowed, therefore operation is allowed in any channel.';\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 4,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/command.js",
    "memberof": null,
    "longname": "src/commands/command.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nexport default class Command {\r\n\tconstructor() {\r\n\t\tif(new.target === Command) throw new Error('The base command class may not be instantiated.');\r\n\t\tthis.name = null;\r\n\t\tthis.aliases = null;\r\n\t\tthis.group = null;\r\n\t\tthis.groupName = null;\r\n\t\tthis.description = null;\r\n\t\tthis.usage = null;\r\n\t\tthis.details = null;\r\n\t\tthis.examples = null;\r\n\t\tthis.serverOnly = false;\r\n\t\tthis.argsType = 'single';\r\n\t\tthis.argsCount = 0;\r\n\t}\r\n\r\n\tisRunnable() {\r\n\t\treturn true;\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 5,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Command",
    "memberof": "src/commands/command.js",
    "longname": "src/commands/command.js~Command",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/command.js",
    "importStyle": "Command",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 6,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#name",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "aliases",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#aliases",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "group",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#group",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "groupName",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#groupName",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "description",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#description",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "usage",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#usage",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "details",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#details",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "examples",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#examples",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "serverOnly",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#serverOnly",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "argsType",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#argsType",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "argsCount",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#argsCount",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isRunnable",
    "memberof": "src/commands/command.js~Command",
    "longname": "src/commands/command.js~Command#isRunnable",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/dispatcher.js",
    "memberof": null,
    "longname": "src/commands/dispatcher.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport stringArgv from 'string-argv';\r\nimport { stripIndents } from 'common-tags';\r\nimport escapeRegex from 'escape-string-regexp';\r\nimport FriendlyError from '../errors/friendly';\r\n\r\nexport default class CommandDispatcher {\r\n\tconstructor(client, registry, settings, config, logger) {\r\n\t\tif(!client || !registry || !config || !settings) throw new Error('client, registry, settings, and config must be specified.');\r\n\t\tthis.client = client;\r\n\t\tthis.registry = registry;\r\n\t\tthis.settings = settings;\r\n\t\tthis.config = config;\r\n\t\tthis.logger = logger;\r\n\t\tthis._serverCommandPatterns = {};\r\n\t\tthis._results = {};\r\n\t}\r\n\r\n\tasync handleMessage(message, oldMessage = null) {\r\n\t\tif(message.author.equals(this.client.user)) return;\r\n\r\n\t\t// Make sure the bot is allowed to run in the channel, or the user is an admin\r\n\t\tif(message.server && !this.settings.isEmpty(message.server)\r\n\t\t\t&& !this.settings.exists(message.server, message.channel)\r\n\t\t\t&& !this.permissions.isAdmin(message.server, message.author)) return;\r\n\r\n\t\t// Parse the message, and get the old result if it exists\r\n\t\tconst [command, args, fromPattern, isCommandMessage] = this.parseMessage(message);\r\n\t\tconst oldResult = oldMessage ? this.results[oldMessage.id] : null;\r\n\r\n\t\t// Run the command, or make an error message result\r\n\t\tlet result;\r\n\t\tif(command) {\r\n\t\t\tif(!oldMessage || oldResult) result = this.constructor.makeResultObject(await this.run(command, args, fromPattern, message));\r\n\t\t} else if(isCommandMessage) {\r\n\t\t\tresult = { reply: [`Unknown command. Use ${this.util.usage('help', message.server)} to view the list of all commands.`], editable: true };\r\n\t\t} else if(this.config.nonCommandEdit) {\r\n\t\t\tresult = {};\r\n\t\t}\r\n\r\n\t\tif(result) {\r\n\t\t\t// Change a plain or reply response into direct if there isn't a server\r\n\t\t\tif(!message.server) {\r\n\t\t\t\tif(!result.direct) result.direct = result.plain || result.reply;\r\n\t\t\t\tdelete result.plain;\r\n\t\t\t\tdelete result.reply;\r\n\t\t\t}\r\n\r\n\t\t\t// Update old messages or send new ones\r\n\t\t\tif(oldResult && (oldResult.plain || oldResult.reply || oldResult.direct)) {\r\n\t\t\t\tawait this.updateMessagesForResult(message, result, oldResult);\r\n\t\t\t} else {\r\n\t\t\t\tawait this.sendMessagesForResult(message, result);\r\n\t\t\t}\r\n\r\n\t\t\t// Cache the result\r\n\t\t\tif(this.config.values.commandEditable > 0) {\r\n\t\t\t\tif(result.editable) {\r\n\t\t\t\t\tresult.timeout = oldResult && oldResult.timeout ? oldResult.timeout : setTimeout(() => { delete this.results[message.id]; }, this.config.values.commandEditable * 1000);\r\n\t\t\t\t\tthis.results[message.id] = result;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdelete this.results[message.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync run(command, args, fromPattern, message) {\r\n\t\tconst logInfo = {\r\n\t\t\targs: String(args),\r\n\t\t\tuser: `${message.author.username}#${message.author.discriminator}`,\r\n\t\t\tuserID: message.author.id,\r\n\t\t\tserver: message.server ? message.server.name : null,\r\n\t\t\tserverID: message.server ? message.server.id : null\r\n\t\t};\r\n\r\n\t\t// Make sure the command is usable\r\n\t\tif(command.serverOnly && !message.server) {\r\n\t\t\tif(this.logger) this.logger.info(`Not running ${command.group}:${command.groupName}; server only.`, logInfo);\r\n\t\t\treturn `The \\`${command.name}\\` command must be used in a server channel.`;\r\n\t\t}\r\n\t\tif(command.isRunnable && !command.isRunnable(message)) {\r\n\t\t\tif(this.logger) this.logger.info(`Not running ${command.group}:${command.groupName}; not runnable.`, logInfo);\r\n\t\t\treturn `You do not have permission to use the \\`${command.name}\\` command.`;\r\n\t\t}\r\n\r\n\t\t// Run the command\r\n\t\tif(this.logger) this.logger.info(`Running ${command.group}:${command.groupName}.`, logInfo);\r\n\t\ttry {\r\n\t\t\treturn await command.run(message, args, fromPattern);\r\n\t\t} catch(err) {\r\n\t\t\tif(err instanceof FriendlyError) {\r\n\t\t\t\treturn err.message;\r\n\t\t\t} else {\r\n\t\t\t\tif(this.logger) this.logger.error(err);\r\n\t\t\t\tconst owner = this.config.values.owner ? message.client.users.get('id', this.config.values.owner) : null;\r\n\t\t\t\treturn stripIndents`\r\n\t\t\t\t\tAn error occurred while running the command: \\`${err.name}: ${err.message}\\`\r\n\t\t\t\t\t${owner ? `Please contact ${owner.name}#${owner.discriminator}${this.config.values.invite ? ` in this server: ${this.config.values.invite}` : '.'}` : ''}\r\n\t\t\t\t`;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync sendMessagesForResult(message, result) {\r\n\t\tconst messages = await Promise.all([\r\n\t\t\tresult.plain ? this.sendMessages(message, result.plain, 'plain') : null,\r\n\t\t\tresult.reply ? this.sendMessages(message, result.reply, 'reply') : null,\r\n\t\t\tresult.direct ? this.sendMessages(message, result.direct, 'direct') : null\r\n\t\t]);\r\n\t\tif(result.plain) result.normalMessages = messages[0];\r\n\t\telse if(result.reply) result.normalMessages = messages[1];\r\n\t\tif(result.direct) result.directMessages = messages[2];\r\n\t}\r\n\r\n\tasync sendMessages(message, contents, type) {\r\n\t\tconst sentMessages = [];\r\n\t\tfor(const content of contents) {\r\n\t\t\tif(type === 'plain') sentMessages.push(await message.client.sendMessage(message, content));\r\n\t\t\telse if(type === 'reply') sentMessages.push(await message.reply(content));\r\n\t\t\telse if(type === 'direct') sentMessages.push(await message.client.sendMessage(message.author, content));\r\n\t\t}\r\n\t\treturn sentMessages;\r\n\t}\r\n\r\n\tasync updateMessagesForResult(message, result, oldResult) {\r\n\t\t// Update the messages\r\n\t\tconst messages = await Promise.all([\r\n\t\t\tresult.plain || result.reply ? this.updateMessages(message, oldResult.normalMessages, result.plain ? result.plain : result.reply, result.plain ? 'plain' : 'reply') : null,\r\n\t\t\tresult.direct ? oldResult.direct ? this.updateMessages(message, oldResult.directMessages, result.direct, 'direct') : this.sendMessages(message, result.direct, 'direct') : null\r\n\t\t]);\r\n\t\tif(result.plain || result.reply) result.normalMessages = messages[0];\r\n\t\tif(result.direct) result.directMessages = messages[1];\r\n\r\n\t\t// Delete old messages if we're not using them\r\n\t\tif(!result.plain && !result.reply && (oldResult.plain || oldResult.reply)) for(const msg of oldResult.normalMessages) msg.delete();\r\n\t\tif(!result.direct && oldResult.direct) for(const msg of oldResult.directMessages) msg.delete();\r\n\t}\r\n\r\n\tasync updateMessages(message, oldMessages, contents, type) {\r\n\t\tconst updatedMessages = [];\r\n\r\n\t\t// Update/send messages\r\n\t\tfor(let i = 0; i < contents.length; i++) {\r\n\t\t\tif(i < oldMessages.length) updatedMessages.push(await oldMessages[i].update(type === 'reply' ? `${message.author}, ${contents[i]}` : contents[i]));\r\n\t\t\telse updatedMessages.push((await this.sendMessages(message, [contents[i]], type))[0]);\r\n\t\t}\r\n\r\n\t\t// Delete extra old messages\r\n\t\tif(oldMessages.length > contents.length) {\r\n\t\t\tfor(let i = oldMessages.length - 1; i >= contents.length; i--) oldMessages[i].delete();\r\n\t\t}\r\n\r\n\t\treturn updatedMessages;\r\n\t}\r\n\r\n\tparseMessage(message) {\r\n\t\t// Find the command to run by patterns\r\n\t\tfor(const command of this.registry.commands) {\r\n\t\t\tif(!command.patterns) continue;\r\n\t\t\tfor(const pattern of command.patterns) {\r\n\t\t\t\tconst matches = pattern.exec(message.content);\r\n\t\t\t\tif(matches) return [command, matches, true, true];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Find the command to run with default command handling\r\n\t\tconst patternIndex = message.server ? message.server.id : '-';\r\n\t\tif(!this._serverCommandPatterns[patternIndex]) this._serverCommandPatterns[patternIndex] = this._buildCommandPattern(message.server, message.client.user);\r\n\t\tlet [command, args, isCommandMessage] = this.matchDefault(message, this._serverCommandPatterns[patternIndex], 2);\r\n\t\tif(!command && !message.server) [command, args, isCommandMessage] = this.matchDefault(message, unprefixedCommandPattern);\r\n\t\tif(command) return [command, args, false, true];\r\n\r\n\t\treturn [null, null, false, isCommandMessage];\r\n\t}\r\n\r\n\tmatchDefault(message, pattern, commandNameIndex = 1) {\r\n\t\tconst matches = pattern.exec(message.content);\r\n\t\tif(!matches) return [null, null, false];\r\n\r\n\t\tconst commandName = matches[commandNameIndex].toLowerCase();\r\n\t\tconst command = this.registry.commands.find(cmd => cmd.name === commandName || (cmd.aliases && cmd.aliases.some(alias => alias === commandName)));\r\n\t\tif(!command || command.disableDefault) return [null, null, true];\r\n\r\n\t\tconst argString = message.content.substring(matches[1].length + (matches[2] ? matches[2].length : 0));\r\n\t\tlet args;\r\n\t\tif(!('argsType' in command) || command.argsType === 'single') {\r\n\t\t\targs = [argString.trim()];\r\n\t\t} else if(command.argsType === 'multiple') {\r\n\t\t\tif('argsCount' in command) {\r\n\t\t\t\tif(command.argsCount < 2) throw new RangeError(`Command ${command.group}:${command.groupName} argsCount must be at least 2.`);\r\n\t\t\t\targs = [];\r\n\t\t\t\tconst newlinesReplaced = argString.trim().replace(newlinesPattern, newlinesReplacement);\r\n\t\t\t\tconst argv = stringArgv(newlinesReplaced);\r\n\t\t\t\tif(argv.length > 0) {\r\n\t\t\t\t\tfor(let i = 0; i < command.argsCount - 1; i++) args.push(argv.shift());\r\n\t\t\t\t\tif(argv.length > 0) args.push(argv.join(' ').replace(newlinesReplacementPattern, '\\n').replace(extraNewlinesPattern, '\\n\\n'));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\targs = stringArgv(argString);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(`Command ${command.group}:${command.groupName} argsType is not one of 'single' or 'multiple'.`);\r\n\t\t}\r\n\r\n\t\treturn [command, args, true];\r\n\t}\r\n\r\n\tstatic makeResultObject(result) {\r\n\t\tif(typeof result !== 'object' || Array.isArray(result)) result = { reply: result };\r\n\t\tif(result.plain && result.reply) throw new Error('The command result may contain either \"plain\" or \"reply\", not both.');\r\n\t\tif(result.plain && !Array.isArray(result.plain)) result.plain = [result.plain];\r\n\t\tif(result.reply && !Array.isArray(result.reply)) result.reply = [result.reply];\r\n\t\tif(result.direct && !Array.isArray(result.direct)) result.direct = [result.direct];\r\n\t\tif(!('editable' in result)) result.editable = true;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a regular expression to match the command prefix and name in a message\r\n\t * @param {?Server} server - A Discord.js Server instance of the server that the message is from\r\n\t * @param {User} user - The Discord.js User instance of the bot\r\n\t * @return {RegExp} Regular expression that matches a command prefix and name\r\n\t */\r\n\t_buildCommandPattern(server, user) {\r\n\t\tlet prefix = server ? this.settings.getValue('command-prefix', this.config.commandPrefix, server) : this.config.commandPrefix;\r\n\t\tif(prefix === 'none') prefix = '';\r\n\t\tconst escapedPrefix = escapeRegex(prefix);\r\n\t\tconst prefixPatternPiece = prefix ? `${escapedPrefix}\\\\s*|` : '';\r\n\t\tconst pattern = new RegExp(`^(${prefixPatternPiece}<@!?${user.id}>\\\\s+(?:${escapedPrefix})?)([^\\\\s]+)`, 'i');\r\n\t\tif(this.logger) {\n\t\t\tthis.logger.info(`Server command pattern built.`, {\n\t\t\t\tserver: server ? server.name : null,\n\t\t\t\tserverID: server ? server.id : null,\n\t\t\t\tprefix: prefix, pattern: pattern.source\n\t\t\t});\n\t\t}\r\n\t\treturn pattern;\r\n\t}\r\n}\r\n\r\nconst unprefixedCommandPattern = /^([^\\s]+)/i;\r\nconst newlinesPattern = /\\n/g;\r\nconst newlinesReplacement = '{!~NL~!}';\r\nconst newlinesReplacementPattern = new RegExp(newlinesReplacement, 'g');\r\nconst extraNewlinesPattern = /\\n{3,}/g;\r\n"
  },
  {
    "__docId__": 20,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandDispatcher",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~CommandDispatcher",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/dispatcher.js",
    "importStyle": "CommandDispatcher",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 21,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      },
      {
        "name": "registry",
        "types": [
          "*"
        ]
      },
      {
        "name": "settings",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "logger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#client",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registry",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#registry",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "settings",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#settings",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#config",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "logger",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#logger",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_serverCommandPatterns",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_serverCommandPatterns",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_results",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_results",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleMessage",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#handleMessage",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldMessage",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "run",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#run",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromPattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendMessagesForResult",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#sendMessagesForResult",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendMessages",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#sendMessages",
    "access": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "contents",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateMessagesForResult",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#updateMessagesForResult",
    "access": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldResult",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateMessages",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#updateMessages",
    "access": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldMessages",
        "types": [
          "*"
        ]
      },
      {
        "name": "contents",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "parseMessage",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#parseMessage",
    "access": null,
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "matchDefault",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#matchDefault",
    "access": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      },
      {
        "name": "commandNameIndex",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "makeResultObject",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher.makeResultObject",
    "access": null,
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildCommandPattern",
    "memberof": "src/commands/dispatcher.js~CommandDispatcher",
    "longname": "src/commands/dispatcher.js~CommandDispatcher#_buildCommandPattern",
    "access": null,
    "description": "Creates a regular expression to match the command prefix and name in a message",
    "lineNumber": 227,
    "params": [
      {
        "nullable": true,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "A Discord.js Server instance of the server that the message is from"
      },
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The Discord.js User instance of the bot"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": "Regular expression that matches a command prefix and name"
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "unprefixedCommandPattern",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~unprefixedCommandPattern",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/commands/dispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "newlinesPattern",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~newlinesPattern",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/commands/dispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "newlinesReplacement",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~newlinesReplacement",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/commands/dispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "newlinesReplacementPattern",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~newlinesReplacementPattern",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/commands/dispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "RegExp"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "extraNewlinesPattern",
    "memberof": "src/commands/dispatcher.js",
    "longname": "src/commands/dispatcher.js~extraNewlinesPattern",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/commands/dispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/general/about.js",
    "memberof": null,
    "longname": "src/commands/general/about.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { stripIndents } from 'common-tags';\r\nimport config from '../../config';\r\n\r\nexport default {\r\n\tname: 'about',\r\n\tgroup: 'general',\r\n\tgroupName: 'about',\r\n\tdescription: 'Displays information about the bot.',\r\n\r\n\tasync run(message) {\r\n\t\tconst owner = message.client.users.get('id', config.owner);\r\n\t\tconst servers = message.client.servers.length.toLocaleString(), users = message.client.users.length.toLocaleString();\r\n\t\tconst serversLabel = servers !== 1 ? 'servers' : 'server', usersLabel = users !== 1 ? 'users' : 'user';\r\n\t\tconst uptime = process.uptime();\r\n\t\tconst days = Math.floor(uptime / 60 / 60 / 24), hours = Math.floor(uptime / 60 / 60 % 24), minutes = Math.floor(uptime / 60 % 60);\r\n\t\tconst daysLabel = days !== 1 ? 'days' : 'day', hoursLabel = hours !== 1 ? 'hours' : 'hour', minutesLabel = minutes !== 1 ? 'minutes' : 'minute';\r\n\t\tconst daysStr = `${days.toLocaleString()} ${daysLabel}`, hoursStr = `${hours.toLocaleString()} ${hoursLabel}`, minutesStr = `${minutes.toLocaleString()} ${minutesLabel}`;\r\n\t\treturn {\r\n\t\t\tdirect: stripIndents`\r\n\t\t\t\t${config.botAbout ? config.botAbout : ''}\r\n\r\n\t\t\t\tThis bot ${owner ? `is owned by ${owner.name}#${owner.discriminator}, and ` : ''}is serving ${users} ${usersLabel} across ${servers} ${serversLabel}.\r\n\t\t\t\tIt has been running without interruption for ${days > 0 ? `${daysStr} ` : ''}${hours > 0 ? `${hoursStr} ` : ''}${minutesStr}.\r\n\t\t\t\t${config.invite ? `For bot feedback/help, use this invite: ${config.invite}` : ''}\r\n\t\t\t\tBased on Discord GRAF: https://github.com/Gawdl3y/discord-graf\r\n\t\t\t`,\r\n\t\t\treply: 'Sent a DM to you with information.'\r\n\t\t};\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 45,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/general/eval.js",
    "memberof": null,
    "longname": "src/commands/general/eval.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/* eslint-disable no-unused-vars */\r\nimport util from 'util';\r\nimport stringArgv from 'string-argv';\r\nimport * as bot from '../..';\r\nimport config from '../../config';\r\nimport version from '../../version';\r\nimport * as registry from '../registry';\r\nimport * as dispatcher from '../dispatcher';\r\nimport Setting from '../../database/setting';\r\nimport ModRole from '../../database/mod-role';\r\nimport FriendlyError from '../../errors/friendly';\r\nimport CommandFormatError from '../../errors/command-format';\r\nimport Util from '../../util';\r\n/* eslint-enable no-unused-vars */\r\n\r\nlet lastResult;\r\n\r\nexport default {\r\n\tname: 'eval',\r\n\tgroup: 'general',\r\n\tgroupName: 'eval',\r\n\tdescription: 'Evaluates input as JavaScript.',\r\n\tusage: 'eval <script>',\r\n\tdetails: 'Only the bot owner may use this command.',\r\n\r\n\tisRunnable(message) {\r\n\t\treturn message.author.id === config.owner;\r\n\t},\r\n\r\n\tasync run(message, args) {\r\n\t\tif(!args[0]) throw new CommandFormatError(this, message.server);\r\n\t\tconst msg = message; // eslint-disable-line no-unused-vars\r\n\t\ttry {\r\n\t\t\tlastResult = eval(args[0]);\r\n\t\t\treturn `Result: \\`${util.inspect(lastResult, { depth: 0 })}\\``;\r\n\t\t} catch(err) {\r\n\t\t\treturn `Error while evaluating: ${err}`;\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 46,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/general/help.js",
    "memberof": null,
    "longname": "src/commands/general/help.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { stripIndents } from 'common-tags';\r\nimport { groups, find as findCommands, isUsable } from '../registry';\r\nimport Util from '../../util';\r\n\r\nexport default {\r\n\tname: 'help',\r\n\tgroup: 'general',\r\n\tgroupName: 'help',\r\n\taliases: ['commands'],\r\n\tdescription: 'Displays a list of available commands, or detailed information for a specified command.',\r\n\tusage: 'help [command]',\r\n\tdetails: 'The command may be part of a command name or a whole command name. If it isn\\'t specified, all available commands will be listed.',\r\n\texamples: ['help', 'help roll'],\r\n\r\n\tasync run(message, args) {\r\n\t\tconst commands = findCommands(args[0], message);\r\n\t\tconst showAll = args[0] && args[0].toLowerCase() === 'all';\r\n\t\tif(args[0] && !showAll) {\r\n\t\t\tif(commands.length === 1) {\r\n\t\t\t\tlet help = stripIndents`\r\n\t\t\t\t\t__Command **${commands[0].name}**:__ ${commands[0].description}${commands[0].serverOnly ? ' (Usable only in servers)' : ''}\r\n\r\n\t\t\t\t\t**Usage:** ${Util.usage(commands[0].usage ? commands[0].usage : commands[0].name, message.server)}\r\n\t\t\t\t`;\r\n\t\t\t\tif(commands[0].aliases) help += `\\n**Aliases:** ${commands[0].aliases.join(', ')}`;\r\n\t\t\t\tif(commands[0].details) help += `\\n**Details:** ${commands[0].details}`;\r\n\t\t\t\tif(commands[0].examples) help += `\\n**Examples:**\\n${commands[0].examples.join('\\n')}`;\r\n\t\t\t\treturn { direct: help, reply: 'Sent a DM to you with information.' };\r\n\t\t\t} else if(commands.length > 1) {\r\n\t\t\t\treturn Util.disambiguation(commands, 'commands');\r\n\t\t\t} else {\r\n\t\t\t\treturn `Unable to identify command. Use ${Util.usage('help', message.server)} to view the list of all commands.`;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tdirect: Util.split(stripIndents`\r\n\t\t\t\t\tTo run a command in ${message.server ? message.server : 'any server'}, use ${Util.usage('command', message.server, !message.server)}. For example, ${Util.usage('roll d20', message.server, !message.server)}.\r\n\t\t\t\t\tTo run a command in this DM, simply use ${Util.usage('command')} with no prefix. For example, ${Util.usage('roll d20')}.\r\n\r\n\t\t\t\t\tUse ${Util.usage('help <command>')} to view detailed information about a specific command.\r\n\t\t\t\t\tUse ${Util.usage('help all')} to view a list of *all* commands, not just available ones.\r\n\r\n\t\t\t\t\t__**${showAll ? 'All commands' : `Available commands in ${message.server ? `${message.server}` : 'this DM'}`}**__\r\n\r\n\t\t\t\t\t${(showAll ? groups : groups.filter(grp => grp.commands.some(cmd => isUsable(cmd, message)))).map(grp => stripIndents`\r\n\t\t\t\t\t\t__${grp.name}__\r\n\t\t\t\t\t\t${(showAll ? grp.commands : grp.commands.filter(cmd => isUsable(cmd, message))).map(cmd => `**${cmd.name}:** ${cmd.description}`).join('\\n')}\r\n\t\t\t\t\t`).join('\\n\\n')}\r\n\t\t\t\t`),\r\n\t\t\t\treply: message.server ? 'Sent a DM to you with information.' : null\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 47,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/general/list-roles.js",
    "memberof": null,
    "longname": "src/commands/general/list-roles.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { stripIndents } from 'common-tags';\r\nimport * as permissions from '../../permissions';\r\n\r\nexport default {\r\n\tname: 'roles',\r\n\taliases: ['listroles'],\r\n\tgroup: 'general',\r\n\tgroupName: 'list-roles',\r\n\tdescription: 'Lists all server roles.',\r\n\tdetails: 'Only administrators may use this command.',\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message) {\r\n\t\treturn stripIndents`\r\n\t\t\t__**Server roles:**__\r\n\t\t\t${message.server.roles.map(role => `**-** ${role.name} (ID: ${role.id})`).join('\\n')}\r\n\t\t`;\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 48,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/general/prefix.js",
    "memberof": null,
    "longname": "src/commands/general/prefix.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport bot, { serverCommandPatterns } from '../../';\r\nimport config from '../../config';\r\nimport * as permissions from '../../permissions';\r\nimport Setting from '../../database/setting';\r\nimport Util from '../../util';\r\n\r\nexport default {\r\n\tname: 'prefix',\r\n\tgroup: 'general',\r\n\tgroupName: 'prefix',\r\n\tdescription: 'Shows or sets the command prefix.',\r\n\tusage: 'prefix [prefix|\"default\"|\"none\"]',\r\n\tdetails: 'If no prefix is provided, the current prefix will be shown. If the prefix is \"default\", the prefix will be reset to the bot\\'s default prefix. If the prefix is \"none\", the prefix will be removed entirely, only allowing mentions to run commands. Only administrators may change the prefix.',\r\n\texamples: ['prefix', 'prefix -', 'prefix rp!', 'prefix default', 'prefix none'],\r\n\r\n\tasync run(message, args) {\r\n\t\tif(args[0] && message.server) {\r\n\t\t\tif(!permissions.isAdmin(message.server, message.author)) return 'Only administrators may change the command prefix.';\r\n\r\n\t\t\t// Save the prefix\r\n\t\t\tconst lowercase = args[0].toLowerCase();\r\n\t\t\tconst prefix = lowercase === 'none' ? '' : args[0];\r\n\t\t\tlet response;\r\n\t\t\tif(lowercase === 'default') {\r\n\t\t\t\tSetting.delete('command-prefix', message.server);\r\n\t\t\t\tresponse = `Reset the command prefix to default (currently \"${config.commandPrefix}\").`;\r\n\t\t\t} else {\r\n\t\t\t\tSetting.save(new Setting(message.server, 'command-prefix', prefix));\r\n\t\t\t\tresponse = prefix ? `Set the command prefix to \"${args[0]}\".` : 'Removed the command prefix entirely.';\r\n\t\t\t}\r\n\r\n\t\t\t// Build the pattern\r\n\t\t\tconst pattern = Util._buildCommandPattern(message.server, bot.client.user);\r\n\t\t\tserverCommandPatterns[message.server.id] = pattern;\r\n\r\n\t\t\treturn `${response} To run commands, use ${Util.usage('command', message.server)}.`;\r\n\t\t} else {\r\n\t\t\tconst prefix = message.server ? Setting.getValue('command-prefix', config.commandPrefix, message.server) : config.commandPrefix;\r\n\t\t\treturn `${prefix ? `The command prefix is \"${prefix}\".` : 'There is no command prefix.'} To run commands, use ${Util.usage('command', message.server)}.`;\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 49,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/general/test.js",
    "memberof": null,
    "longname": "src/commands/general/test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport splitMessage from '../../util/split-message';\r\n\r\nexport default {\r\n\tname: 'test',\r\n\tgroup: 'general',\r\n\tgroupName: 'test',\r\n\tdescription: 'Tests stuff.',\r\n\targsType: 'single',\r\n\r\n\tasync run(message, args) {\r\n\t\tlet text = '';\r\n\t\tfor(let i = 0; i < parseInt(args[0]); i++) text += 'This is a line of text, that is kind of long, but not really. Yeeeeeeaaaaaaah.\\n';\r\n\t\treturn splitMessage(text);\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 50,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/registry.js",
    "memberof": null,
    "longname": "src/commands/registry.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nexport default class CommandRegistry {\r\n\tconstructor(logger) {\r\n\t\tthis.logger = logger;\r\n\t\tthis.commands = [];\r\n\t\tthis.groups = [];\r\n\t}\r\n\r\n\tregister(commands) {\r\n\t\tif(!Array.isArray(commands)) commands = [commands];\r\n\t\tfor(const command of commands) {\r\n\t\t\tif(this.commands.some(cmd => cmd.name === command.name)) throw new Error(`A command with the name \"${command.name}\"\" is already registered.`);\r\n\t\t\tthis.commands.push(command);\r\n\t\t\tlet group = this.groups.find(grp => grp.id === command.group);\r\n\t\t\tif(group) {\r\n\t\t\t\tgroup.commands.push(command);\r\n\t\t\t} else {\r\n\t\t\t\tgroup = {\r\n\t\t\t\t\tid: command.group,\r\n\t\t\t\t\tname: command.group,\r\n\t\t\t\t\tcommands: [command]\r\n\t\t\t\t};\r\n\t\t\t\tthis.groups.push(group);\r\n\t\t\t}\r\n\t\t\tif(this.logger) this.logger.verbose(`Registered command ${command.group}:${command.groupName}.`);\r\n\t\t}\r\n\t}\r\n\r\n\tnameGroup(id, name) {\r\n\t\tconst group = this.groups.find(grp => grp.id === id);\r\n\t\tif(group) group.name = name; else this.groups.push({ id: id, name: name, commands: [] });\r\n\t\tif(this.logger) this.logger.verbose(`Named group ${id} \"${name}\".`);\r\n\t}\r\n\r\n\tfind(searchString = null, message = null) {\r\n\t\tif(!searchString) return message ? this.commands.filter(cmd => this.constructor.isUsable(cmd, message)) : this.commands;\r\n\r\n\t\t// Find all matches\r\n\t\tconst lowercaseSearch = searchString.toLowerCase();\r\n\t\tconst matchedCommands = this.commands.filter(cmd => cmd.name.includes(lowercaseSearch) || (cmd.aliases && cmd.aliases.some(ali => ali.includes(lowercaseSearch))));\r\n\r\n\t\t// See if there's an exact match\r\n\t\tfor(const command of matchedCommands) {\r\n\t\t\tif(command.name === lowercaseSearch || (command.aliases && command.aliases.some(ali => ali === lowercaseSearch))) return [command];\r\n\t\t}\r\n\r\n\t\treturn matchedCommands;\r\n\t}\r\n\r\n\tstatic isUsable(command, message = null) {\r\n\t\tif(command.serverOnly && message && !message.server) return false;\r\n\t\treturn !command.isRunnable || !message || command.isRunnable(message);\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 51,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandRegistry",
    "memberof": "src/commands/registry.js",
    "longname": "src/commands/registry.js~CommandRegistry",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/commands/registry.js",
    "importStyle": "CommandRegistry",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "logger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "logger",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#logger",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "commands",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#commands",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "groups",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#groups",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "register",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#register",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "commands",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nameGroup",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#nameGroup",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry#find",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "searchString",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "message",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isUsable",
    "memberof": "src/commands/registry.js~CommandRegistry",
    "longname": "src/commands/registry.js~CommandRegistry.isUsable",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/roles/add.js",
    "memberof": null,
    "longname": "src/commands/roles/add.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport ModRole from '../../database/mod-role';\r\nimport * as permissions from '../../permissions';\r\nimport CommandFormatError from '../../errors/command-format';\r\nimport Util from '../../util';\r\n\r\nexport default {\r\n\tname: 'addmodrole',\r\n\taliases: ['addmod'],\r\n\tgroup: 'roles',\r\n\tgroupName: 'add',\r\n\tdescription: 'Adds a moderator role.',\r\n\tusage: 'addmodrole <role>',\r\n\tdetails: 'The role must be the name or ID of a role, or a role mention. Only administrators may use this command.',\r\n\texamples: ['addmodrole cool', 'addmodrole 205536402341888001', 'addmodrole @CoolPeopleRole'],\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message, args) {\r\n\t\tif(!args[0]) throw new CommandFormatError(this, message.server);\r\n\t\tconst matches = Util.patterns.roleID.exec(args[0]);\r\n\t\tlet roles;\r\n\t\tconst idRole = message.server.roles.get('id', matches[1]);\r\n\t\tif(idRole) roles = [idRole]; else roles = Util.search(message.server.roles, matches[1]);\r\n\r\n\t\tif(roles.length === 1) {\r\n\t\t\tif(ModRole.save(roles[0])) {\r\n\t\t\t\treturn `Added \"${roles[0].name}\" to the moderator roles.`;\r\n\t\t\t} else {\r\n\t\t\t\treturn `Unable to add \"${roles[0].name}\" to the moderator roles. It already is one.`;\r\n\t\t\t}\r\n\t\t} else if(roles.length > 1) {\r\n\t\t\treturn Util.disambiguation(roles, 'roles');\r\n\t\t} else {\r\n\t\t\treturn `Unable to identify role. Use ${Util.usage('roles', message.server)} to view all of the server roles.`;\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 61,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/roles/clear.js",
    "memberof": null,
    "longname": "src/commands/roles/clear.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport ModRole from '../../database/mod-role';\r\nimport * as permissions from '../../permissions';\r\nimport Util from '../../util';\r\n\r\nlet lastUser;\r\nlet timeout;\r\n\r\nexport default {\r\n\tname: 'clearmodroles',\r\n\taliases: ['clearmods'],\r\n\tgroup: 'roles',\r\n\tgroupName: 'clear',\r\n\tdescription: 'Clears all of the moderator roles.',\r\n\tdetails: 'Only administrators may use this command.',\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message, args) {\r\n\t\tif(message.author.equals(lastUser) && args[0] && args[0].toLowerCase() === 'confirm') {\r\n\t\t\tModRole.clearServer(message.server);\r\n\t\t\tclearTimeout(timeout);\r\n\t\t\tlastUser = null;\r\n\t\t\ttimeout = null;\r\n\t\t\treturn 'Cleared the server\\'s moderator roles. Moderators will be determined by the \"Manage messages\" permission.';\r\n\t\t} else {\r\n\t\t\tif(timeout) {\r\n\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\ttimeout = null;\r\n\t\t\t}\r\n\t\t\tlastUser = message.author;\r\n\t\t\ttimeout = setTimeout(() => { lastUser = null; }, 30000);\r\n\t\t\treturn `Are you sure you want to clear all of the moderator roles? Use ${Util.usage('clearmodroles confirm', message.server)} within the next 30 seconds to continue.`;\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 62,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/roles/delete.js",
    "memberof": null,
    "longname": "src/commands/roles/delete.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { stripIndents } from 'common-tags';\r\nimport ModRole from '../../database/mod-role';\r\nimport * as permissions from '../../permissions';\r\nimport CommandFormatError from '../../errors/command-format';\r\nimport Util from '../../util';\r\n\r\nexport default {\r\n\tname: 'deletemodrole',\r\n\taliases: ['removemodrole', 'delmodrole', 'removemod', 'deletemod', 'delmod'],\r\n\tgroup: 'roles',\r\n\tgroupName: 'delete',\r\n\tdescription: 'Deletes a moderator role.',\r\n\tusage: 'deletemodrole <role>',\r\n\tdetails: 'The role must be the name or ID of a role, or a role mention. Only administrators may use this command.',\r\n\texamples: ['deletemodrole cool', 'deletemodrole 205536402341888001', 'deletemodrole @CoolPeopleRole'],\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message, args) {\r\n\t\tif(!args[0]) throw new CommandFormatError(this, message.server);\r\n\t\tconst matches = Util.patterns.roleID.exec(args[0]);\r\n\t\tlet roles;\r\n\t\tconst idRole = message.server.roles.get('id', matches[1]);\r\n\t\tif(idRole) roles = [idRole]; else roles = ModRole.findInServer(message.server, matches[1]);\r\n\r\n\t\tif(roles.length === 1) {\r\n\t\t\tif(ModRole.delete(roles[0])) {\r\n\t\t\t\treturn stripIndents`\r\n\t\t\t\t\tRemoved \"${roles[0].name}\" from the moderator roles.\r\n\t\t\t\t\t${ModRole.findInServer(message.server).length === 0 ? 'Since there are no longer any moderator roles, moderators will be determined by the \"Manage messages\" permission.' : ''}\r\n\t\t\t\t`;\r\n\t\t\t} else {\r\n\t\t\t\treturn `Unable to remove \"${roles[0].name}\" from the moderator roles. It isn\\'t one.`;\r\n\t\t\t}\r\n\t\t} else if(roles.length > 1) {\r\n\t\t\treturn Util.disambiguation(roles, 'roles');\r\n\t\t} else {\r\n\t\t\treturn `Unable to identify role. Use ${Util.usage('modroles', message.server)} to view the moderator roles, and ${Util.usage('roles', message.server)} to view all of the server roles.`;\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 63,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/commands/roles/list.js",
    "memberof": null,
    "longname": "src/commands/roles/list.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { stripIndents } from 'common-tags';\r\nimport ModRole from '../../database/mod-role';\r\nimport * as permissions from '../../permissions';\r\n\r\nexport default {\r\n\tname: 'modroles',\r\n\taliases: ['listmodroles', 'mods'],\r\n\tgroup: 'roles',\r\n\tgroupName: 'list',\r\n\tdescription: 'Lists all moderator roles.',\r\n\tdetails: 'Only administrators may use this command.',\r\n\tserverOnly: true,\r\n\r\n\tisRunnable(message) {\r\n\t\treturn permissions.isAdmin(message.server, message.author);\r\n\t},\r\n\r\n\tasync run(message) {\r\n\t\tconst roles = ModRole.findInServer(message.server);\r\n\t\tif(roles.length > 0) {\r\n\t\t\treturn stripIndents`\r\n\t\t\t\t__**Moderator roles:**__\r\n\t\t\t\t${roles.map(role => `**-** ${role.name} (ID: ${role.id})`).join('\\n')}\r\n\t\t\t`;\r\n\t\t} else {\r\n\t\t\treturn 'There are no moderator roles, therefore moderators are determined by the \"Manage messages\" permission.';\r\n\t\t}\r\n\t}\r\n};\r\n"
  },
  {
    "__docId__": 64,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/config.js",
    "memberof": null,
    "longname": "src/config.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/**\r\n * Configuration object for a bot\r\n */\r\nexport default class BotConfig {\r\n\t/**\r\n\t * @param {ConfigObject} [values] - The configuration to start with\r\n\t * @param {ConfigObject} [defaults] - The defaults to start with\r\n\t */\r\n\tconstructor(values, defaults) {\r\n\t\tthis._values = {};\r\n\r\n\t\t/**\r\n\t\t * @type {ConfigObject}\r\n\t\t */\r\n\t\tthis.defaults = Object.assign({}, defaultDefaults, defaults);\r\n\t\tthis.loadDefaults();\r\n\r\n\t\tthis.values = values;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds to the current values, overwriting existing ones\r\n\t * @param {ConfigObject} values - The values to add\r\n\t */\r\n\tset values(values) {\r\n\t\tObject.assign(this._values, values);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the current values\r\n\t */\r\n\tget values() {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the defaults to the current values\r\n\t * @param {boolean} overwrite - Whether or not the defaults should overwrite existing values\r\n\t * @return {void}\r\n\t */\r\n\tloadDefaults(overwrite = false) {\r\n\t\tif(overwrite) {\r\n\t\t\tObject.assign(this._values, this.defaults);\r\n\t\t} else {\r\n\t\t\tfor(const key of Object.keys(this.defaults)) {\r\n\t\t\t\tif(!(key in this._values)) this._values[key] = this.defaults[key];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Loads configuration from yargs, adding a bunch of default bot options\r\n\t * @param {Yargs} yargs - The yargs instance to use\r\n\t * @return {Yargs} The yargs instance\r\n\t */\r\n\tyargs(yargs) {\r\n\t\tthis.values = yargs\r\n\t\t\t// Authentication\r\n\t\t\t.option('token', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\talias: 't',\r\n\t\t\t\tdescribe: 'API token for the bot account',\r\n\t\t\t\tgroup: 'Authentication:'\r\n\t\t\t})\r\n\t\t\t.option('email', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\talias: 'e',\r\n\t\t\t\tdescribe: 'Email of the Discord account for the bot to use',\r\n\t\t\t\tgroup: 'Authentication:'\r\n\t\t\t})\r\n\t\t\t.option('password', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\talias: 'p',\r\n\t\t\t\tdescribe: 'Password of the Discord account for the bot to use',\r\n\t\t\t\tgroup: 'Authentication:'\r\n\t\t\t})\r\n\t\t\t.implies({ email: 'password', password: 'email' })\r\n\r\n\t\t\t// General\r\n\t\t\t.option('owner', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\talias: 'o',\r\n\t\t\t\tdescribe: 'Discord user ID of the bot owner',\r\n\t\t\t\tgroup: 'General:'\r\n\t\t\t})\r\n\t\t\t.option('invite', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\talias: 'i',\r\n\t\t\t\tdescribe: 'Discord instant invite to a server to contact the owner',\r\n\t\t\t\tgroup: 'General:'\r\n\t\t\t})\r\n\t\t\t.option('playing-game', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: this.defaults.playingGame,\r\n\t\t\t\talias: 'g',\r\n\t\t\t\tdescribe: 'Text to show in the \"Playing...\" status',\r\n\t\t\t\tgroup: 'General:'\r\n\t\t\t})\r\n\t\t\t.option('pagination-items', {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tdefault: this.defaults.paginationItems,\r\n\t\t\t\talias: 'I',\r\n\t\t\t\tdescribe: 'Number of items per page in paginated commands',\r\n\t\t\t\tgroup: 'General:'\r\n\t\t\t})\r\n\t\t\t.option('auto-reconnect', {\r\n\t\t\t\ttype: 'boolean',\r\n\t\t\t\tdefault: this.defaults.autoReconnect,\r\n\t\t\t\talias: 'a',\r\n\t\t\t\tdescribe: 'Whether or not the bot should automatically reconnect when disconnected',\r\n\t\t\t\tgroup: 'General:'\r\n\t\t\t})\r\n\t\t\t.option('storage', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: this.defaults.storage,\r\n\t\t\t\talias: 's',\r\n\t\t\t\tdescribe: 'Path to storage directory',\r\n\t\t\t\tgroup: 'General:',\r\n\t\t\t\tnormalize: true\r\n\t\t\t})\r\n\t\t\t.option('update-check', {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tdefault: this.defaults.updateCheck,\r\n\t\t\t\talias: 'U',\r\n\t\t\t\tdescribe: 'How frequently to check for an update (in minutes, use 0 to disable)',\r\n\t\t\t\tgroup: 'General:'\r\n\t\t\t})\r\n\r\n\t\t\t// Commands\r\n\t\t\t.option('command-prefix', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: this.defaults.commandPrefix,\r\n\t\t\t\talias: 'P',\r\n\t\t\t\tdescribe: 'Default command prefix (blank to use only mentions)',\r\n\t\t\t\tgroup: 'Commands:'\r\n\t\t\t})\r\n\t\t\t.option('command-editable', {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tdefault: this.defaults.commandEditable,\r\n\t\t\t\talias: 'E',\r\n\t\t\t\tdescribe: 'How long a command message is editable (in seconds, use 0 to disable)',\r\n\t\t\t\tgroup: 'Commands:'\r\n\t\t\t})\r\n\t\t\t.option('non-command-edit', {\r\n\t\t\t\ttype: 'boolean',\r\n\t\t\t\tdefault: this.defaults.nonCommandEdit,\r\n\t\t\t\talias: 'N',\r\n\t\t\t\tdescribe: 'Whether or not a non-command message can be edited into a command',\r\n\t\t\t\tgroup: 'Commands:'\r\n\t\t\t})\r\n\r\n\t\t\t// Logging\r\n\t\t\t.option('log', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: this.defaults.log,\r\n\t\t\t\talias: 'l',\r\n\t\t\t\tdescribe: 'Path to log file',\r\n\t\t\t\tgroup: 'Logging:',\r\n\t\t\t\tnormalize: true\r\n\t\t\t})\r\n\t\t\t.option('log-max-size', {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tdefault: this.defaults.logMaxSize,\r\n\t\t\t\tdefaultDescription: '5MB',\r\n\t\t\t\talias: 'S',\r\n\t\t\t\tdescribe: 'Maximum size of single log file (in bytes)',\r\n\t\t\t\tgroup: 'Logging:'\r\n\t\t\t})\r\n\t\t\t.option('log-max-files', {\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tdefault: this.defaults.logMaxFiles,\r\n\t\t\t\talias: 'F',\r\n\t\t\t\tdescribe: 'Maximum amount of log files to keep',\r\n\t\t\t\tgroup: 'Logging:'\r\n\t\t\t})\r\n\t\t\t.option('log-level', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: this.defaults.logLevel,\r\n\t\t\t\talias: 'L',\r\n\t\t\t\tdescribe: 'Log level to output to the log file (error, warn, info, verbose, debug)',\r\n\t\t\t\tgroup: 'Logging:'\r\n\t\t\t})\r\n\t\t\t.option('console-level', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: this.defaults.consoleLevel,\r\n\t\t\t\talias: 'C',\r\n\t\t\t\tdescribe: 'Log level to output to the console (error, warn, info, verbose, debug)',\r\n\t\t\t\tgroup: 'Logging:'\r\n\t\t\t})\r\n\t\t\t.option('config', {\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\talias: 'c',\r\n\t\t\t\tdescribe: 'Path to JSON/YAML config file',\r\n\t\t\t\tgroup: 'Special:',\r\n\t\t\t\tnormalize: true,\r\n\t\t\t\tconfig: true,\r\n\t\t\t\tconfigParser: configFile => {\r\n\t\t\t\t\tconst extension = require('path').extname(configFile).toLowerCase();\r\n\t\t\t\t\tif(extension === '.json') {\r\n\t\t\t\t\t\treturn JSON.parse(require('fs').readFileSync(configFile));\r\n\t\t\t\t\t} else if(extension === '.yml' || extension === '.yaml') {\r\n\t\t\t\t\t\treturn require('js-yaml').safeLoad(require('fs').readFileSync(configFile));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow new Error('Unknown config file type.');\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t.argv;\r\n\t\treturn yargs;\r\n\t}\r\n}\r\n\r\nconst defaultDefaults = {\r\n\tplayingGame: 'Message for help',\r\n\tpaginationItems: 10,\r\n\tupdateCheck: 60,\r\n\tcommandPrefix: '!',\r\n\tcommandEditable: 30,\r\n\tnonCommandEdit: true,\r\n\tautoReconnect: true,\r\n\tstorage: 'bot-storage',\r\n\tlog: 'bot.log',\r\n\tlogMaxSize: 5242880,\r\n\tlogMaxFiles: 5,\r\n\tlogLevel: 'info',\r\n\tconsoleLevel: 'info'\r\n};\r\n\r\n/**\r\n * @typedef {Object} ConfigObject\r\n * @property {string} [botName] - Name of the bot (required to create a client)\r\n * @property {string} [botVersion] - Version of the bot (should follow semver, required to create a client)\r\n * @property {string} [botAbout] - Text information about the bot for the about command\r\n * @property {string} [botUpdateURL] - URL to a package.json file to check for updates with\r\n * @property {string} [token] - The bot account API token to log in with\r\n * @property {string} [email] - The bot account email to log in with\r\n * @property {string} [password] - The bot account password to log in with\r\n * @property {boolean} [autoReconnect=true] - Whether or not the bot should automatically reconnect upon disconnection\r\n * @property {string} [storage=bot-storage] - Path to the local storage directory\r\n * @property {string} [playingGame=Message\\ for\\ help] - Text to show the bot playing\r\n * @property {number} [paginationItems=10] - Maximum number of items per page the default commands use when paginating\r\n * @property {number} [updateCheck=60] - How frequently to check for updates (in minutes)\r\n * @property {string} [commandPrefix=!] - The default command prefix (empty/null for mentions only)\r\n * @property {number} [commandEditable=30] - How long commands are editable (in seconds)\r\n * @property {boolean} [nonCommandEdit=true] - Whether or not commands will be run in messages that were edited that previously didn't have any commands\r\n * @property {string} [log=bot.log] - Path to the log file\r\n * @property {number} [logMaxSize=5242880] - Maximum size of the log file before splitting it (in bytes)\r\n * @property {number} [logMaxFiles=5] - Maximum log files to keep\r\n * @property {string} [logLevel=info] - The log level to output to the log file (error, warn, info, verbose, debug)\r\n * @property {string} [consoleLevel=info] - The log level to output to the console (error, warn, info, verbose, debug)\r\n */\r\n"
  },
  {
    "__docId__": 65,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BotConfig",
    "memberof": "src/config.js",
    "longname": "src/config.js~BotConfig",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/config.js",
    "importStyle": "BotConfig",
    "description": "Configuration object for a bot",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 66,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConfigObject"
        ],
        "spread": false,
        "optional": true,
        "name": "values",
        "description": "The configuration to start with"
      },
      {
        "nullable": null,
        "types": [
          "ConfigObject"
        ],
        "spread": false,
        "optional": true,
        "name": "defaults",
        "description": "The defaults to start with"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_values",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#_values",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaults",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#defaults",
    "access": null,
    "description": "",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "ConfigObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#values",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#values",
    "access": null,
    "description": "Adds to the current values, overwriting existing ones",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConfigObject"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "The values to add"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#values",
    "access": null,
    "description": "Gets the current values",
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "loadDefaults",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#loadDefaults",
    "access": null,
    "description": "Adds the defaults to the current values",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "overwrite",
        "description": "Whether or not the defaults should overwrite existing values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "yargs",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#yargs",
    "access": null,
    "description": "Loads configuration from yargs, adding a bunch of default bot options",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Yargs"
        ],
        "spread": false,
        "optional": false,
        "name": "yargs",
        "description": "The yargs instance to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Yargs"
      ],
      "spread": false,
      "description": "The yargs instance"
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/config.js~BotConfig",
    "longname": "src/config.js~BotConfig#values",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultDefaults",
    "memberof": "src/config.js",
    "longname": "src/config.js~defaultDefaults",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ConfigObject",
    "memberof": "src/config.js",
    "longname": "src/config.js~ConfigObject",
    "access": null,
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "botName",
        "description": "Name of the bot (required to create a client)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "botVersion",
        "description": "Version of the bot (should follow semver, required to create a client)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "botAbout",
        "description": "Text information about the bot for the about command"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "botUpdateURL",
        "description": "URL to a package.json file to check for updates with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "token",
        "description": "The bot account API token to log in with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "email",
        "description": "The bot account email to log in with"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "password",
        "description": "The bot account password to log in with"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "autoReconnect",
        "description": "Whether or not the bot should automatically reconnect upon disconnection"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "bot-storage",
        "defaultRaw": "bot-storage",
        "name": "storage",
        "description": "Path to the local storage directory"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Message\\",
        "defaultRaw": "Message\\",
        "name": "playingGame",
        "description": "for\\ help] - Text to show the bot playing"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "paginationItems",
        "description": "Maximum number of items per page the default commands use when paginating"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "60",
        "defaultRaw": 60,
        "name": "updateCheck",
        "description": "How frequently to check for updates (in minutes)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "!",
        "defaultRaw": "!",
        "name": "commandPrefix",
        "description": "The default command prefix (empty/null for mentions only)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "commandEditable",
        "description": "How long commands are editable (in seconds)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "nonCommandEdit",
        "description": "Whether or not commands will be run in messages that were edited that previously didn't have any commands"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "bot.log",
        "defaultRaw": "bot.log",
        "name": "log",
        "description": "Path to the log file"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5242880",
        "defaultRaw": 5242880,
        "name": "logMaxSize",
        "description": "Maximum size of the log file before splitting it (in bytes)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "logMaxFiles",
        "description": "Maximum log files to keep"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "info",
        "defaultRaw": "info",
        "name": "logLevel",
        "description": "The log level to output to the log file (error, warn, info, verbose, debug)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "info",
        "defaultRaw": "info",
        "name": "consoleLevel",
        "description": "The log level to output to the console (error, warn, info, verbose, debug)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ConfigObject"
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/data/allowed-channels.js",
    "memberof": null,
    "longname": "src/data/allowed-channels.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Storage from './storage';\r\nimport Util from '../util';\r\n\r\nexport default class AllowedChannelStorage extends Storage {\r\n\tconstructor(localStorage, logger) {\r\n\t\tsuper('allowed-channels', localStorage, logger);\r\n\t}\n\n\tsave(channel) {\r\n\t\treturn super.save(channel.server, channel.id);\r\n\t}\r\n\r\n\tdelete(channel) {\r\n\t\treturn super.delete(channel.server, channel.id);\r\n\t}\r\n\r\n\tfind(server, searchString = null) {\r\n\t\tif(!server) throw new Error('A server must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(!this.serversMap[server.id]) return [];\r\n\r\n\t\t// Find all of the server's channels that match, and filter them to ones that are usable channels\r\n\t\tconst channels = Util.search(server.channels.getAll('type', 'text'), searchString, { searchExact: false }).filter(channel => this.serversMap[server.id].includes(channel.id));\r\n\t\treturn Util.search(channels, searchString, { searchInexact: false });\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 78,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AllowedChannelStorage",
    "memberof": "src/data/allowed-channels.js",
    "longname": "src/data/allowed-channels.js~AllowedChannelStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/data/allowed-channels.js",
    "importStyle": "AllowedChannelStorage",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/data/storage.js~Storage"
    ]
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/data/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/data/allowed-channels.js~AllowedChannelStorage#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "localStorage",
        "types": [
          "*"
        ]
      },
      {
        "name": "logger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/data/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/data/allowed-channels.js~AllowedChannelStorage#save",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "channel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/data/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/data/allowed-channels.js~AllowedChannelStorage#delete",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "channel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/data/allowed-channels.js~AllowedChannelStorage",
    "longname": "src/data/allowed-channels.js~AllowedChannelStorage#find",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      },
      {
        "name": "searchString",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/data/mod-roles.js",
    "memberof": null,
    "longname": "src/data/mod-roles.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Storage from './storage';\r\nimport Util from '../util';\r\n\r\nexport default class ModRoleStorage extends Storage {\r\n\tconstructor(localStorage, logger) {\r\n\t\tsuper('mod-roles', localStorage, logger);\r\n\t}\r\n\r\n\tsave(role) {\r\n\t\treturn super.save(role.server, role.id);\r\n\t}\r\n\r\n\tdelete(role) {\r\n\t\treturn super.delete(role.server, role.id);\r\n\t}\r\n\r\n\tfind(server, searchString = null) {\r\n\t\tif(!server) throw new Error('A server must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(!this.serversMap[server.id]) return [];\r\n\r\n\t\t// Find all of the server's roles that match, and filter them to ones that are mod roles\r\n\t\tconst roles = Util.search(server.roles, searchString, { searchExact: false }).filter(role => this.serversMap[server.id].includes(role.id));\r\n\t\treturn Util.search(roles, searchString, { searchInexact: false });\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 84,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ModRoleStorage",
    "memberof": "src/data/mod-roles.js",
    "longname": "src/data/mod-roles.js~ModRoleStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/data/mod-roles.js",
    "importStyle": "ModRoleStorage",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/data/storage.js~Storage"
    ]
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/data/mod-roles.js~ModRoleStorage",
    "longname": "src/data/mod-roles.js~ModRoleStorage#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "localStorage",
        "types": [
          "*"
        ]
      },
      {
        "name": "logger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/data/mod-roles.js~ModRoleStorage",
    "longname": "src/data/mod-roles.js~ModRoleStorage#save",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "role",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/data/mod-roles.js~ModRoleStorage",
    "longname": "src/data/mod-roles.js~ModRoleStorage#delete",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "role",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/data/mod-roles.js~ModRoleStorage",
    "longname": "src/data/mod-roles.js~ModRoleStorage#find",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      },
      {
        "name": "searchString",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 89,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/data/models/setting.js",
    "memberof": null,
    "longname": "src/data/models/setting.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nexport default class Setting {\r\n\tconstructor(server, key, value) {\r\n\t\tif(!key) throw new Error('Setting key must be specified.');\r\n\t\tthis.server = server ? server.id ? server.id : server : 'global';\r\n\t\tthis.key = key;\r\n\t\tthis.value = value;\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 90,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Setting",
    "memberof": "src/data/models/setting.js",
    "longname": "src/data/models/setting.js~Setting",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/data/models/setting.js",
    "importStyle": "Setting",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/data/models/setting.js~Setting",
    "longname": "src/data/models/setting.js~Setting#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "server",
    "memberof": "src/data/models/setting.js~Setting",
    "longname": "src/data/models/setting.js~Setting#server",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "key",
    "memberof": "src/data/models/setting.js~Setting",
    "longname": "src/data/models/setting.js~Setting#key",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/data/models/setting.js~Setting",
    "longname": "src/data/models/setting.js~Setting#value",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/data/settings.js",
    "memberof": null,
    "longname": "src/data/settings.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Storage from './storage';\r\nimport Setting from './models/setting';\r\n\r\nexport default class SettingStorage extends Storage {\r\n\tconstructor(localStorage, logger) {\r\n\t\tsuper('settings', localStorage, logger);\r\n\t}\r\n\r\n\tsave(setting) {\r\n\t\treturn super.save(setting.server, setting, entry => entry.key === setting.key);\r\n\t}\r\n\r\n\tdelete(setting) {\r\n\t\treturn super.delete(setting.server, setting, entry => entry.key === setting.key);\r\n\t}\r\n\r\n\tfind(setting, server = null, searchOptions = {}) {\r\n\t\t[setting, server] = this.getSettingKeyAndServer(setting, server);\r\n\t\treturn super.find(server, setting, Object.assign(searchOptions, { property: 'key', searchInexact: false }));\r\n\t}\r\n\r\n\texists(setting, server = null) {\r\n\t\t[setting, server] = this.getSettingKeyAndServer(setting, server);\r\n\t\treturn super.exists(server, setting, entry => entry.key === setting);\r\n\t}\r\n\r\n\tgetValue(setting, defaultValue = null, server = null) {\r\n\t\t[setting, server] = this.getSettingKeyAndServer(setting, server);\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(!this.serversMap[server]) return defaultValue;\r\n\t\tconst settings = this.find(server, setting);\r\n\t\tif(settings.length === 0) return defaultValue;\r\n\t\treturn settings[0].value;\r\n\t}\r\n\r\n\tgetSettingKeyAndServer(setting, server) {\r\n\t\tif(setting instanceof Setting) {\r\n\t\t\treturn [setting.key, !server ? setting.server : server.id ? server.id : server];\r\n\t\t} else {\r\n\t\t\tif(!setting) throw new Error('A setting or a key must be specified.');\r\n\t\t\treturn [setting, server ? server.id ? server.id : server : 'global'];\r\n\t\t}\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 96,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SettingStorage",
    "memberof": "src/data/settings.js",
    "longname": "src/data/settings.js~SettingStorage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/data/settings.js",
    "importStyle": "SettingStorage",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/data/storage.js~Storage"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/data/settings.js~SettingStorage",
    "longname": "src/data/settings.js~SettingStorage#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "localStorage",
        "types": [
          "*"
        ]
      },
      {
        "name": "logger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/data/settings.js~SettingStorage",
    "longname": "src/data/settings.js~SettingStorage#save",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "setting",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/data/settings.js~SettingStorage",
    "longname": "src/data/settings.js~SettingStorage#delete",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "setting",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/data/settings.js~SettingStorage",
    "longname": "src/data/settings.js~SettingStorage#find",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "setting",
        "types": [
          "*"
        ]
      },
      {
        "name": "server",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "searchOptions",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exists",
    "memberof": "src/data/settings.js~SettingStorage",
    "longname": "src/data/settings.js~SettingStorage#exists",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "setting",
        "types": [
          "*"
        ]
      },
      {
        "name": "server",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getValue",
    "memberof": "src/data/settings.js~SettingStorage",
    "longname": "src/data/settings.js~SettingStorage#getValue",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "setting",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValue",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "server",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSettingKeyAndServer",
    "memberof": "src/data/settings.js~SettingStorage",
    "longname": "src/data/settings.js~SettingStorage#getSettingKeyAndServer",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "setting",
        "types": [
          "*"
        ]
      },
      {
        "name": "server",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/data/storage.js",
    "memberof": null,
    "longname": "src/data/storage.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Util from '../util';\r\n\r\nexport default class Storage {\r\n\tconstructor(key, localStorage, logger) {\r\n\t\tif(!key || !localStorage) throw new Error('A key and localStorage must be specified.');\r\n\t\tthis.key = key;\r\n\t\tthis.localStorage = localStorage;\r\n\t\tthis.logger = logger;\r\n\t}\r\n\r\n\tloadStorage() {\r\n\t\tthis.serversMap = JSON.parse(this.localStorage.getItem(this.key));\r\n\t\tif(!this.serversMap) this.serversMap = {};\r\n\t}\r\n\r\n\tsaveStorage() {\r\n\t\tif(this.logger) this.logger.debug('Saving mod roles storage...', this.serversMap);\r\n\t\tthis.localStorage.setItem('mod-roles', JSON.stringify(this.serversMap));\r\n\t}\r\n\r\n\tsave(server, entry, searchFunction = null) {\r\n\t\tif(!server || !entry) throw new Error('A server and entry must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(server.id) server = server.id;\r\n\t\tif(!this.serversMap[server]) this.serversMap[server] = [];\r\n\r\n\t\tconst exists = searchFunction ? this.serversMap[server].some(searchFunction) : this.serversMap[server].includes(entry);\r\n\t\tif(!exists) {\r\n\t\t\tthis.serversMap[server].push(entry);\r\n\t\t\tthis.saveStorage();\r\n\t\t\tif(this.logger) this.logger.verbose(`Added new entry to ${this.key} storage.`, entry);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif(this.logger) this.logger.verbose(`Not adding entry to ${this.key} storage, because it already exists.`, entry);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tdelete(server, entry, searchFunction = null) {\r\n\t\tif(!server || !entry) throw new Error('A server and entry must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(server.id) server = server.id;\r\n\t\tif(!this.serversMap[server]) this.serversMap[server] = [];\r\n\r\n\t\tconst index = searchFunction ? this.serversMap[server].findIndex(searchFunction) : this.serversMap[server].findIndex(item => item === entry);\r\n\t\tif(index >= 0) {\r\n\t\t\tthis.serversMap[server].splice(index, 1);\r\n\t\t\tthis.saveStorage();\r\n\t\t\tif(this.logger) this.logger.info(`Deleted entry from ${this.key} storage.`, entry);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tif(this.logger) this.logger.info(`Not deleting entry from ${this.key} storage, because it doesn\\'t exist.`, entry);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tclear(server) {\r\n\t\tif(!server) throw new Error('A server must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tdelete this.serversMap[server.id ? server.id : server];\r\n\t\tif(this.logger) this.logger.info(`Cleared a server in ${this.key} storage.`, { server: server.id ? server.id : server });\r\n\t\tthis.saveStorage();\r\n\t}\r\n\r\n\tclearAll() {\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tfor(const key of Object.keys(this.serversMap)) delete this.serversMap[key];\r\n\t\tif(this.logger) this.logger.info(`Cleared all of ${this.key} storage.`);\r\n\t\tthis.saveStorage();\r\n\t}\r\n\r\n\tfind(server, searchString = null, searchOptions = {}) {\r\n\t\tif(!server) throw new Error('A server must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(server.id) server = server.id;\r\n\t\tif(!this.serversMap[server]) return [];\r\n\t\tif(!searchString) return this.serversMap[server];\r\n\t\treturn Util.search(this.serversMap[server], searchString, searchOptions);\r\n\t}\r\n\r\n\texists(server, entry, searchFunction = null) {\r\n\t\tif(!server || !entry) throw new Error('A server and entry must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(server.id) server = server.id;\r\n\t\tif(!this.serversMap[server]) return false;\r\n\t\treturn searchFunction ? this.serversMap[server].some(searchFunction) : this.serversMap[server].includes(entry);\r\n\t}\r\n\r\n\tisEmpty(server) {\r\n\t\tif(!server) throw new Error('A server must be specified.');\r\n\t\tif(!this.serversMap) this.loadStorage();\r\n\t\tif(server.id) server = server.id;\r\n\t\treturn !this.serversMap[server] || this.serversMap[server].length === 0;\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 105,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Storage",
    "memberof": "src/data/storage.js",
    "longname": "src/data/storage.js~Storage",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/data/storage.js",
    "importStyle": "Storage",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "localStorage",
        "types": [
          "*"
        ]
      },
      {
        "name": "logger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "key",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#key",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localStorage",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#localStorage",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "logger",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#logger",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "loadStorage",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#loadStorage",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "serversMap",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#serversMap",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "serversMap",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#serversMap",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saveStorage",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#saveStorage",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#save",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      },
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "searchFunction",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#delete",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      },
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "searchFunction",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#clear",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearAll",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#clearAll",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#find",
    "access": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      },
      {
        "name": "searchString",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      },
      {
        "name": "searchOptions",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exists",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#exists",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      },
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "searchFunction",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmpty",
    "memberof": "src/data/storage.js~Storage",
    "longname": "src/data/storage.js~Storage#isEmpty",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "server",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/errors/command-format.js",
    "memberof": null,
    "longname": "src/errors/command-format.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport FriendlyError from './friendly';\r\nimport Util from '../util';\r\n\r\n/**\r\n * Has a descriptive message to send in a Discord reply\r\n */\r\nexport default class CommandFormatError extends FriendlyError {\r\n\t/**\r\n\t * @param {Object} command - The command the error is for\r\n\t * @param {?Server} server - The Discord.js Server the error is in\r\n\t */\r\n\tconstructor(command, server = null) {\r\n\t\tsuper(`Invalid command format. Use ${Util.usage(server ? server.client : null, `help ${command.name}`, server)} for information.`);\r\n\t\tthis.name = 'CommandFormatError';\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 122,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommandFormatError",
    "memberof": "src/errors/command-format.js",
    "longname": "src/errors/command-format.js~CommandFormatError",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/errors/command-format.js",
    "importStyle": "CommandFormatError",
    "description": "Has a descriptive message to send in a Discord reply",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/errors/friendly.js~FriendlyError"
    ]
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/errors/command-format.js~CommandFormatError",
    "longname": "src/errors/command-format.js~CommandFormatError#constructor",
    "access": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The command the error is for"
      },
      {
        "nullable": true,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The Discord.js Server the error is in"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/errors/command-format.js~CommandFormatError",
    "longname": "src/errors/command-format.js~CommandFormatError#name",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/errors/friendly.js",
    "memberof": null,
    "longname": "src/errors/friendly.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/**\r\n * Has a message that can be considered user-friendly\r\n */\r\nexport default class FriendlyError extends Error {\r\n\t/**\r\n\t * @param {string} message - The error message\r\n\t */\r\n\tconstructor(message) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'FriendlyError';\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 126,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FriendlyError",
    "memberof": "src/errors/friendly.js",
    "longname": "src/errors/friendly.js~FriendlyError",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/errors/friendly.js",
    "importStyle": "FriendlyError",
    "description": "Has a message that can be considered user-friendly",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/errors/friendly.js~FriendlyError",
    "longname": "src/errors/friendly.js~FriendlyError#constructor",
    "access": null,
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/errors/friendly.js~FriendlyError",
    "longname": "src/errors/friendly.js~FriendlyError#name",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport Discord from 'discord.js';\r\nimport { LocalStorage } from 'node-localstorage';\r\nimport winston from 'winston';\r\nimport request from 'request';\r\nimport semver from 'semver';\r\nimport version from './version';\r\nimport Config from './config';\r\nimport Permissions from './permissions';\r\nimport Registry from './commands/registry';\r\nimport Dispatcher from './commands/dispatcher';\r\nimport Command from './commands/command';\r\nimport Util from './util';\r\nimport Setting from './data/models/setting';\r\nimport SettingStorage from './data/settings';\r\nimport ModRoleStorage from './data/mod-roles';\r\nimport AllowedChannelStorage from './data/allowed-channels';\r\nimport FriendlyError from './errors/friendly';\r\nimport CommandFormatError from './errors/command-format';\r\n\r\n// import HelpCommand from './commands/general/help';\r\n// import AboutCommand from './commands/general/about';\r\n// import PrefixCommand from './commands/general/prefix';\r\n// import EvalCommand from './commands/general/eval';\r\n// import ListRolesCommand from './commands/general/list-roles';\r\n// import ListModRolesCommand from './commands/roles/list';\r\n// import AddModRoleCommand from './commands/roles/add';\r\n// import DeleteModRoleCommand from './commands/roles/delete';\r\n// import ClearModRolesCommand from './commands/roles/clear';\r\n// import ListAllowedChannelsCommand from './commands/channels/list';\r\n// import AllowChannelCommand from './commands/channels/allow';\r\n// import DisallowChannelCommand from './commands/channels/disallow';\r\n// import ClearAllowedChannelsCommand from './commands/channels/clear';\r\n\r\nexport default class GrafBot {\r\n\tconstructor(config) {\r\n\t\tthis.version = version;\r\n\t\tthis.config = new Config(config);\r\n\t\tthis.registry = null;\r\n\t\tthis.permissions = null;\r\n\t\tthis.util = null;\r\n\t\tthis.localStorage = null;\r\n\t\tthis.data = {\r\n\t\t\tsettings: null,\r\n\t\t\tmodRoles: null,\r\n\t\t\tallowedChannels: null\r\n\t\t};\r\n\t\tthis.errors = {\r\n\t\t\tFriendlyError: FriendlyError,\r\n\t\t\tCommandFormatError: CommandFormatError\r\n\t\t};\r\n\t}\r\n\r\n\tcreateClient() {\r\n\t\tif(this.client) throw new Error('Client has already been created.');\r\n\t\tconst config = this.config.values;\r\n\r\n\t\t// Verify some stuff\r\n\t\tif(!config.token && (!config.email || !config.password)) throw new Error('Invalid credentials; either \"token\" or both \"email\" and \"password\" must be specified on the config.');\r\n\t\tif(!config.botName) throw new Error('\"botName\" must be specified on the config.');\r\n\t\tif(!config.botVersion) throw new Error('\"botVersion\" must be specified on the config.');\r\n\r\n\t\t// Output safe config\r\n\t\tconst debugConfig = Object.assign({}, config);\r\n\t\tif(debugConfig.email) debugConfig.email = '--snip--';\r\n\t\tif(debugConfig.password) debugConfig.password = '--snip--';\r\n\t\tif(debugConfig.token) debugConfig.token = '--snip--';\r\n\t\tfor(const key of Object.keys(debugConfig)) if(key.length === 1 || key.includes('-')) delete debugConfig[key];\r\n\t\tthis.logger.debug('Configuration:', debugConfig);\r\n\r\n\t\t// Create client and bot classes\r\n\t\tconst clientOptions = { autoReconnect: config.autoReconnect, forceFetchUsers: true, disableEveryone: config.disableEveryone };\r\n\t\tconst client = new Discord.Client(clientOptions);\r\n\t\tthis.client = client;\r\n\t\tthis.localStorage = new LocalStorage(config.storage);\r\n\t\tthis.data.settings = new SettingStorage(this.localStorage, this.logger);\r\n\t\tthis.data.modRoles = new ModRoleStorage(this.localStorage, this.logger);\r\n\t\tthis.data.allowedChannels = new AllowedChannelStorage(this.localStorage, this.logger);\r\n\t\tthis.registry = new Registry(this.logger);\r\n\t\tthis.dispatcher = new Dispatcher(client, this.registry, this.data.settings, this.config);\r\n\t\tthis.permissions = new Permissions(client, this.data.modRoles, this.config);\r\n\t\tthis.util = new Util(client, this.data.settings, this.config);\r\n\t\tthis.logger.info('Client created.', clientOptions);\r\n\r\n\t\t// Set up logging and the playing game text\r\n\t\tclient.on('error', err => { this.logger.error(err); });\r\n\t\tclient.on('warn', err => { this.logger.warn(err); });\r\n\t\tclient.on('debug', err => { this.logger.debug(err); });\r\n\t\tclient.on('disconnected', () => { this.logger.error('Disconnected.'); });\r\n\t\tclient.on('ready', () => {\r\n\t\t\tthis.logger.info(`Bot is ready; logged in as ${client.user.username}#${client.user.discriminator} (ID: ${client.user.id})`);\r\n\t\t\tif(config.playingGame) client.setPlayingGame(config.playingGame);\r\n\t\t});\r\n\r\n\t\t// Set up command handling\r\n\t\tclient.on('message', message => {\r\n\t\t\tthis.dispatcher.handleMessage(message).catch(err => { this.logger.error(err); });\r\n\t\t});\r\n\t\tclient.on('messageUpdated', (oldMessage, newMessage) => {\r\n\t\t\tthis.dispatcher.handleMessage(newMessage, oldMessage).catch(err => { this.logger.error(err); });\r\n\t\t});\r\n\r\n\t\t// Log in\r\n\t\tconst loginCallback = err => { if(err) this.logger.error('Failed to login.', err); };\r\n\t\tif(config.token) {\r\n\t\t\tthis.logger.info('Logging in with token...');\r\n\t\t\tclient.loginWithToken(config.token, config.email, config.password, loginCallback);\r\n\t\t} else {\r\n\t\t\tthis.logger.info('Logging in with email and password...');\r\n\t\t\tclient.login(config.email, config.password, loginCallback);\r\n\t\t}\r\n\r\n\t\t// Check for updates now and at an interval\r\n\t\tif(config.botUpdateURL) {\r\n\t\t\tthis._checkForUpdate();\r\n\t\t\tif(config.updateCheck > 0) setInterval(() => this._checkForUpdate, config.updateCheck * 60 * 1000);\r\n\t\t}\r\n\t}\r\n\r\n\tregisterCommands(commands) {\r\n\t\tthis.registry.register(commands);\r\n\t}\r\n\r\n\tnameGroups(groups) {\r\n\t\tfor(const group of groups) this.registry.nameGroup(...group);\r\n\t}\r\n\r\n\tregisterDefaultCommands() {\r\n\t\tthis.registerCommands([\r\n\t\t\t// HelpCommand,\r\n\t\t\t// AboutCommand,\r\n\t\t\t// PrefixCommand,\r\n\t\t\t// EvalCommand,\r\n\t\t\t// ListRolesCommand,\r\n\t\t\t// ListModRolesCommand,\r\n\t\t\t// AddModRoleCommand,\r\n\t\t\t// DeleteModRoleCommand,\r\n\t\t\t// ClearModRolesCommand,\r\n\t\t\t// ListAllowedChannelsCommand,\r\n\t\t\t// AllowChannelCommand,\r\n\t\t\t// DisallowChannelCommand,\r\n\t\t\t// ClearAllowedChannelsCommand\r\n\t\t]);\r\n\t\tthis.nameGroups([\r\n\t\t\t['general', 'General'],\r\n\t\t\t['roles', 'Roles'],\r\n\t\t\t['channels', 'Channels']\r\n\t\t]);\r\n\t}\r\n\r\n\tget logger() {\r\n\t\tif(!this._logger) {\r\n\t\t\tthis._logger = new winston.Logger({\r\n\t\t\t\ttransports: [\r\n\t\t\t\t\tnew winston.transports.Console({\r\n\t\t\t\t\t\tlevel: this.config.values.consoleLevel,\r\n\t\t\t\t\t\tcolorize: true,\r\n\t\t\t\t\t\ttimestamp: true,\r\n\t\t\t\t\t\thandleExceptions: true,\r\n\t\t\t\t\t\thumanReadableUnhandledException: true\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\tif(this.config.values.log) {\r\n\t\t\t\tthis._logger.add(winston.transports.File, {\r\n\t\t\t\t\tlevel: this.config.values.logLevel,\r\n\t\t\t\t\tfilename: this.config.values.log,\r\n\t\t\t\t\tmaxsize: this.config.values.logMaxSize,\r\n\t\t\t\t\tmaxFiles: this.config.values.logMaxFiles,\r\n\t\t\t\t\ttailable: true,\r\n\t\t\t\t\tjson: false,\r\n\t\t\t\t\thandleExceptions: true,\r\n\t\t\t\t\thumanReadableUnhandledException: true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._logger;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks for an update for the bot\r\n\t * @param {Client} client - The Discord.js Client instance\r\n\t * @return {void}\r\n\t */\r\n\t_checkForUpdate() {\r\n\t\tconst config = this.config.values;\r\n\t\trequest(config.botUpdateURL, (error, response, body) => {\r\n\t\t\tif(error) {\r\n\t\t\t\tthis.logger.warn('Error while checking for update', error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(response.statusCode !== 200) {\r\n\t\t\t\tthis.logger.warn('Error while checking for update', { statusCode: response.statusCode });\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst masterVersion = JSON.parse(body).version;\r\n\t\t\tif(!semver.gt(masterVersion, config.botVersion)) return;\r\n\t\t\tconst message = `An update for ${config.values.botName} is available! Current version is ${config.botVersion}, latest available is ${masterVersion}.`;\r\n\t\t\tif(this.logger) this.logger.warn(message);\r\n\t\t\tconst savedVersion = this.data.settings.getValue('notified-version');\r\n\t\t\tif(savedVersion !== masterVersion && this.client && config.owner) {\r\n\t\t\t\tthis.client.sendMessage(config.owner, message);\r\n\t\t\t\tthis.data.settings.save(new Setting(null, 'notified-version', masterVersion));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tstatic get Command() {\r\n\t\treturn Command;\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 130,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "GrafBot",
    "memberof": "src/index.js",
    "longname": "src/index.js~GrafBot",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/index.js",
    "importStyle": "GrafBot",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#constructor",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "version",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#version",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#config",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registry",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#registry",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "permissions",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#permissions",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#util",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localStorage",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#localStorage",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#data",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errors",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#errors",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createClient",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#createClient",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#client",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "localStorage",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#localStorage",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "registry",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#registry",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dispatcher",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#dispatcher",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "permissions",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#permissions",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#util",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerCommands",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#registerCommands",
    "access": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "commands",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nameGroups",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#nameGroups",
    "access": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "groups",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "registerDefaultCommands",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#registerDefaultCommands",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "logger",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#logger",
    "access": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logger",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#_logger",
    "access": null,
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_checkForUpdate",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot#_checkForUpdate",
    "access": null,
    "description": "Checks for an update for the bot",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Discord.js Client instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "Command",
    "memberof": "src/index.js~GrafBot",
    "longname": "src/index.js~GrafBot.Command",
    "access": null,
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/permissions.js",
    "memberof": null,
    "longname": "src/permissions.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/**\r\n * Contains methods to test whether a user has permissions in a server\r\n */\r\nexport default class BotPermissions {\r\n\t/**\r\n\t * @param {Client} client - The Discord.js Client to use\r\n\t * @param {ModRoleStorage} modRoles - The mod role storage to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t */\r\n\tconstructor(client, modRoles, config) {\r\n\t\tif(!client || !modRoles || !config) throw new Error('A client, modRoles, and config must be specified.');\r\n\r\n\t\t/**\r\n\t\t * The Discord.js Client\r\n\t\t * @type {Client}\r\n\t\t */\r\n\t\tthis.client = client;\r\n\r\n\t\t/**\r\n\t\t * The mod role storage\r\n\t\t * @type {ModRoleStorage}\r\n\t\t */\r\n\t\tthis.modRoles = modRoles;\r\n\r\n\t\t/**\r\n\t\t * The bot config\r\n\t\t * @type {BotConfig}\r\n\t\t */\r\n\t\tthis.config = config;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Server|string} server - The Discord.js Server instance or a Discord server ID\r\n\t * @param {User|string} user - The Discord.js User instance or a Discord user ID\r\n\t * @return {boolean} Whether or not the user is considered a moderator\r\n\t * @see {@link Permissions.isMod}\r\n\t */\r\n\tisMod(server, user) {\r\n\t\treturn this.constructor.isMod(this.client, this.config, server, user);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is a moderator on a server using a specified client and config.\r\n\t * If the server has not set any moderator roles, then they will be a moderator if any of their assigned roles contain the \"Manage messages\" permission.\r\n\t * If the server has set moderator roles, then they will be a moderator if they have any of the moderator roles assigned.\r\n\t * The bot owner and users with the \"Administrate\" permission are always moderators.\r\n\t * @param {Client} client - The Discord.js Client to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t * @param {Server|string} server - The Discord.js Server instance or a Discord server ID\r\n\t * @param {User|string} user - The Discord.js User instance or a Discord user ID\r\n\t * @return {boolean} Whether or not the user is considered a moderator\r\n\t * @see {@link Permissions#isMod}\r\n\t */\r\n\tstatic isMod(client, config, server, user) {\r\n\t\t[server, user] = this.resolve(client, server, user);\r\n\t\tif(user.id === config.owner) return true;\r\n\t\tconst userRoles = server.rolesOfUser(user);\r\n\t\tif(userRoles.some(role => role.hasPermission('administrator'))) return true;\r\n\t\tif(this.modRoles.isEmpty(server)) return userRoles.some(role => role.hasPermission('manageMessages'));\r\n\t\treturn this.modRoles.find(server).some(role => userRoles.some(role2 => role.id === role2.id));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Server|string} server - The Discord.js Server instance or a Discord server ID\r\n\t * @param {User|string} user - The Discord.js User instance or a Discord user ID\r\n\t * @return {boolean} Whether or not the user is considered an administrator\r\n\t * @see {@link Permissions.isAdmin}\r\n\t */\r\n\tisAdmin(server, user) {\r\n\t\treturn this.constructor.isAdmin(this.client, this.config, server, user);\r\n\t}\r\n\r\n\t/**\r\n\t * Tests to see if a user is an administrator on a server with a specified client.\r\n\t * If the user is the bot owner or has any roles assigned with the \"Administrate\" permission, they are considered an administrator.\r\n\t * @param {Client} client - The Discord.js Client to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t * @param {Server|string} server - The Discord.js Server instance or a Discord server ID\r\n\t * @param {User|string} user - The Discord.js User instance or a Discord user ID\r\n\t * @return {boolean} Whether or not the user is considered an administrator\r\n\t * @see {@link Permissions#isAdmin}\r\n\t */\r\n\tstatic isAdmin(client, config, server, user) {\r\n\t\t[server, user] = this.resolve(client, server, user);\r\n\t\tif(user.id === config.owner) return true;\r\n\t\treturn server.rolesOfUser(user).some(role => role.hasPermission('administrator'));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Server|string} server - The Discord.js Server instance or a Discord server ID\r\n\t * @param {User|string} user - The Discord.js User instance or a Discord user ID\r\n\t * @return {[server, user]} The Server and User instance pair\r\n\t * @see {@link Permissions.resolve}\r\n\t */\r\n\tresolve(server, user) {\r\n\t\tif(!server || !user) throw new Error('A server and user must be specified.');\r\n\t\treturn this.constructor.resolve(this.client, server, user);\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves a server and user to Discord.js instances with a specified client\r\n\t * @param {Client} client - The Discord.js Client to use\r\n\t * @param {Server|string} server - The Discord.js Server instance or a Discord server ID\r\n\t * @param {User|string} user - The Discord.js User instance or a Discord user ID\r\n\t * @return {[server, user]} The Server and User instance pair\r\n\t * @see {@link Permissions#resolve}\r\n\t */\r\n\tstatic resolve(client, server, user) {\r\n\t\tif(!client || !server || !user) throw new Error('A client, server, and user must be specified.');\r\n\t\tif(typeof server === 'string') server = client.servers.get('id', server);\r\n\t\tif(!server || !server.id) throw new Error('Unable to identify server.');\r\n\t\tif(typeof user === 'string') user = server.members.get('id', user);\r\n\t\tif(!user || !user.id) throw new Error('Unable to identify user.');\r\n\t\treturn [server, user];\r\n\t}\r\n}\r\n"
  },
  {
    "__docId__": 155,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BotPermissions",
    "memberof": "src/permissions.js",
    "longname": "src/permissions.js~BotPermissions",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/permissions.js",
    "importStyle": "BotPermissions",
    "description": "Contains methods to test whether a user has permissions in a server",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Discord.js Client to use"
      },
      {
        "nullable": null,
        "types": [
          "ModRoleStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "modRoles",
        "description": "The mod role storage to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions#client",
    "access": null,
    "description": "The Discord.js Client",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Client"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "modRoles",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions#modRoles",
    "access": null,
    "description": "The mod role storage",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "ModRoleStorage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions#config",
    "access": null,
    "description": "The bot config",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "BotConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isMod",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions#isMod",
    "access": null,
    "description": "",
    "see": [
      "{@link Permissions.isMod}"
    ],
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Server",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The Discord.js Server instance or a Discord server ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The Discord.js User instance or a Discord user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered a moderator"
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isMod",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions.isMod",
    "access": null,
    "description": "Tests to see if a user is a moderator on a server using a specified client and config.\nIf the server has not set any moderator roles, then they will be a moderator if any of their assigned roles contain the \"Manage messages\" permission.\nIf the server has set moderator roles, then they will be a moderator if they have any of the moderator roles assigned.\nThe bot owner and users with the \"Administrate\" permission are always moderators.",
    "see": [
      "{@link Permissions#isMod}"
    ],
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Discord.js Client to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      },
      {
        "nullable": null,
        "types": [
          "Server",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The Discord.js Server instance or a Discord server ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The Discord.js User instance or a Discord user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered a moderator"
    },
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isAdmin",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions#isAdmin",
    "access": null,
    "description": "",
    "see": [
      "{@link Permissions.isAdmin}"
    ],
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Server",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The Discord.js Server instance or a Discord server ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The Discord.js User instance or a Discord user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered an administrator"
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isAdmin",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions.isAdmin",
    "access": null,
    "description": "Tests to see if a user is an administrator on a server with a specified client.\nIf the user is the bot owner or has any roles assigned with the \"Administrate\" permission, they are considered an administrator.",
    "see": [
      "{@link Permissions#isAdmin}"
    ],
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Discord.js Client to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      },
      {
        "nullable": null,
        "types": [
          "Server",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The Discord.js Server instance or a Discord server ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The Discord.js User instance or a Discord user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the user is considered an administrator"
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resolve",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions#resolve",
    "access": null,
    "description": "",
    "see": [
      "{@link Permissions.resolve}"
    ],
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Server",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The Discord.js Server instance or a Discord server ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The Discord.js User instance or a Discord user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[server, user]"
      ],
      "spread": false,
      "description": "The Server and User instance pair"
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "resolve",
    "memberof": "src/permissions.js~BotPermissions",
    "longname": "src/permissions.js~BotPermissions.resolve",
    "access": null,
    "description": "Resolves a server and user to Discord.js instances with a specified client",
    "see": [
      "{@link Permissions#resolve}"
    ],
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Discord.js Client to use"
      },
      {
        "nullable": null,
        "types": [
          "Server",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The Discord.js Server instance or a Discord server ID"
      },
      {
        "nullable": null,
        "types": [
          "User",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The Discord.js User instance or a Discord user ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[server, user]"
      ],
      "spread": false,
      "description": "The Server and User instance pair"
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/util.js",
    "memberof": null,
    "longname": "src/util.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\n/**\r\n * Contains general utility methods.\r\n */\r\nexport default class BotUtil {\r\n\t/**\r\n\t * @param {Client} client - The Discord.js Client to use\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t */\r\n\tconstructor(client, settings, config) {\r\n\t\tif(!client || !settings || !config) throw new Error('A client, settings, and config must be specified.');\r\n\r\n\t\t/**\r\n\t\t * The Discord.js Client\r\n\t\t * @type {Client}\r\n\t\t */\r\n\t\tthis.client = client;\r\n\r\n\t\t/**\r\n\t\t * The setting storage\r\n\t\t * @type {SettingStorage}\r\n\t\t */\r\n\t\tthis.settings = settings;\r\n\r\n\t\t/**\r\n\t\t * The bot config\r\n\t\t * @type {BotConfig}\r\n\t\t */\r\n\t\tthis.config = config;\r\n\r\n\t\t/**\r\n\t\t * Useful pattern constants\r\n\t\t * @type {PatternConstants}\r\n\t\t * @see {@link Util.patterns}\r\n\t\t */\r\n\t\tthis.patterns = patterns;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} command - The short command string (ex. \"roll d20\")\r\n\t * @param {?Server} [server=null] - The Discord.js Server instance of the server to use the prefix of\r\n\t * @param {boolean} [onlyMention=false] - Whether or not the usage string should only show the mention form\r\n\t * @return {string} The command usage string\r\n\t * @see {@link Util.usage}\r\n\t */\r\n\tusage(command, server = null, onlyMention = false) {\r\n\t\treturn this.constructor.usage(this.client, this.settings, this.config, command, server, onlyMention);\r\n\t}\r\n\r\n\t/**\r\n\t * Build a command usage string\r\n\t * @param {Client} client - The Discord.js Client to use\r\n\t * @param {SettingStorage} settings - The setting storage to use\r\n\t * @param {BotConfig} config - The bot config to use\r\n\t * @param {string} command - The short command string (ex. \"roll d20\")\r\n\t * @param {?Server} [server=null] - The Discord.js Server instance of the server to use the prefix of\r\n\t * @param {boolean} [onlyMention=false] - Whether or not the usage string should only show the mention form\r\n\t * @return {string} The command usage string\r\n\t * @see {@link Util#usage}\r\n\t */\r\n\tstatic usage(client, settings, config, command, server = null, onlyMention = false) {\r\n\t\tconst nbcmd = this.nbsp(command);\r\n\t\tif(!server && !onlyMention) return `\\`${nbcmd}\\``;\r\n\t\tlet prefixAddon;\r\n\t\tif(!onlyMention) {\r\n\t\t\tlet prefix = this.nbsp(settings.getValue('command-prefix', config.commandPrefix, server));\r\n\t\t\tif(prefix.length > 1) prefix += '\\xa0';\r\n\t\t\tprefixAddon = prefix ? `\\`${prefix}${nbcmd}\\` or ` : '';\r\n\t\t}\r\n\t\treturn `${prefixAddon ? prefixAddon : ''}\\`@${this.nbsp(client.user.name)}#${client.user.discriminator}\\xa0${nbcmd}\\``;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Object[]} items - An array of items to make the disambiguation list for\r\n\t * @param {string} label - The text to refer to the items as (ex. \"characters\")\r\n\t * @param {string} [property=name] - The property on items to display in the list\r\n\t * @return {string} The disambiguation list\r\n\t * @see {@link Util.disambiguation}\r\n\t */\r\n\tdisambiguation(items, label, property = 'name') {\r\n\t\treturn this.constructor.disambiguation(items, label, property);\r\n\t}\r\n\r\n\t/**\r\n\t * Build a disambiguation list - useful for telling a user to be more specific when finding partial matches from a command\r\n\t * @param {Object[]} items - An array of items to make the disambiguation list for\r\n\t * @param {string} label - The text to refer to the items as (ex. \"characters\")\r\n\t * @param {string} [property=name] - The property on items to display in the list\r\n\t * @return {string} The disambiguation list\r\n\t * @see {@link Util#disambiguation}\r\n\t */\r\n\tstatic disambiguation(items, label, property = 'name') {\r\n\t\tconst itemList = items.map(item => `\"${this.nbsp(property ? item[property] : item)}\"`).join(',   ');\r\n\t\treturn `Multiple ${label} found, please be more specific: ${itemList}`;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Object[]} items - An array of items to paginate\r\n\t * @param {number} [page=1] - The page to select\r\n\t * @param {number} [pageLength=10] - The number of items per page\r\n\t * @return {Object} The resulting paginated object\r\n\t * @property {Object[]} items - The chunk of items for the current page\r\n\t * @property {number} page - The current page\r\n\t * @property {number} maxPage - The maximum page\r\n\t * @property {number} pageLength - The numer of items per page\r\n\t * @property {string} pageText - The current page string (\"page x of y\")\r\n\t * @see {@link Util.paginate}\r\n\t */\r\n\tpaginate(items, page = 1, pageLength = 10) {\r\n\t\treturn this.constructor.paginate(items, page, pageLength);\r\n\t}\r\n\r\n\t/**\r\n\t * Paginate an array of items\r\n\t * @param {Object[]} items - An array of items to paginate\r\n\t * @param {number} [page=1] - The page to select\r\n\t * @param {number} [pageLength=10] - The number of items per page\r\n\t * @return {Object} The resulting paginated object\r\n\t * @property {Object[]} items - The chunk of items for the current page\r\n\t * @property {number} page - The current page\r\n\t * @property {number} maxPage - The maximum page\r\n\t * @property {number} pageLength - The numer of items per page\r\n\t * @property {string} pageText - The current page string (\"page x of y\")\r\n\t * @see {@link Util#paginate}\r\n\t */\r\n\tstatic paginate(items, page = 1, pageLength = 10) {\r\n\t\tconst maxPage = Math.ceil(items.length / pageLength);\r\n\t\tif(page < 1) page = 1;\r\n\t\tif(page > maxPage) page = maxPage;\r\n\t\tlet startIndex = (page - 1) * pageLength;\r\n\t\treturn {\r\n\t\t\titems: items.length > pageLength ? items.slice(startIndex, startIndex + pageLength) : items,\r\n\t\t\tpage: page,\r\n\t\t\tmaxPage: maxPage,\r\n\t\t\tpageLength: pageLength,\r\n\t\t\tpageText: `page ${page} of ${maxPage}`\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Object[]} items - An array of items to search in\r\n\t * @param {string} searchString - The string to search for\r\n\t * @param {Object} options - An options object\r\n\t * @param {string} [options.property=name] - The property on items to search against\r\n\t * @param {boolean} [options.searchInexact=true] - Whether or not to search for inexact matches\r\n\t * @param {boolean} [options.searchExact=true] - Whether or not to search for exact matches (will narrow down inexact matches if applicable)\r\n\t * @param {boolean} [options.useStartsWith=false] - Whether or not to search inexact by checking to see if the item starts with the search string rather than contains\r\n\t * @return {Object[]} The matched items\r\n\t * @see {@link Util.search}\r\n\t */\r\n\tsearch(items, searchString, { property = 'name', searchInexact = true, searchExact = true, useStartsWith = false } = {}) {\r\n\t\treturn this.constructor.search(items, searchString, { property: property, searchInexact: searchInexact, searchExact: searchExact, useStartsWith: useStartsWith });\r\n\t}\r\n\r\n\t/**\r\n\t * Search for matches in a list of items\r\n\t * @param {Object[]} items - An array of items to search in\r\n\t * @param {string} searchString - The string to search for\r\n\t * @param {Object} options - An options object\r\n\t * @param {string} [options.property=name] - The property on items to search against\r\n\t * @param {boolean} [options.searchInexact=true] - Whether or not to search for inexact matches\r\n\t * @param {boolean} [options.searchExact=true] - Whether or not to search for exact matches (will narrow down inexact matches if applicable)\r\n\t * @param {boolean} [options.useStartsWith=false] - Whether or not to search inexact by checking to see if the item starts with the search string rather than contains\r\n\t * @return {Object[]} The matched items\r\n\t * @see {@link Util#search}\r\n\t */\r\n\tstatic search(items, searchString, { property = 'name', searchInexact = true, searchExact = true, useStartsWith = false } = {}) {\r\n\t\tif(!items || items.length === 0) return [];\r\n\t\tif(!searchString) return items;\r\n\r\n\t\tconst lowercaseSearch = searchString.toLowerCase();\r\n\t\tlet matchedItems;\r\n\r\n\t\t// Find all items that start with or include the search string\r\n\t\tif(searchInexact) {\r\n\t\t\tif(useStartsWith && searchString.length === 1) {\r\n\t\t\t\tmatchedItems = items.filter(element => String(property ? element[property] : element)\r\n\t\t\t\t\t.normalize('NFKD')\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.startsWith(lowercaseSearch)\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tmatchedItems = items.filter(element => String(property ? element[property] : element)\r\n\t\t\t\t\t.normalize('NFKD')\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.includes(lowercaseSearch)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmatchedItems = items;\r\n\t\t}\r\n\r\n\t\t// See if any are an exact match\r\n\t\tif(searchExact && matchedItems.length > 1) {\r\n\t\t\tconst exactItems = matchedItems.filter(element => String(property ? element[property] : element).normalize('NFKD').toLowerCase() === lowercaseSearch);\r\n\t\t\tif(exactItems.length > 0) return exactItems;\r\n\t\t}\r\n\r\n\t\treturn matchedItems;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text - The string to split\r\n\t * @param {number} [maxLength=1925] - The maximum length of each split string\r\n\t * @param {string} [splitOn=\\n] - The characters to split the string with\r\n\t * @return {string[]} The split strings\n\t * @see {@link Util.split}\r\n\t */\r\n\tsplit(text, maxLength = 1925, splitOn = '\\n') {\r\n\t\treturn this.constructor.split(text, maxLength, splitOn);\r\n\t}\r\n\n\t/**\r\n\t * Splits a string using specified characters into multiple strings of a maximum length\r\n\t * @param {string} text - The string to split\r\n\t * @param {number} [maxLength=1925] - The maximum length of each split string\r\n\t * @param {string} [splitOn=\\n] - The characters to split the string with\r\n\t * @return {string[]} The split strings\r\n\t * @see {@link Util#split}\r\n\t */\r\n\tstatic split(text, maxLength = 1925, splitOn = '\\n') {\r\n\t\tconst splitText = text.split(splitOn);\r\n\t\tif(splitText.length === 1 && text.length > maxLength) throw new Error('Message exceeds the max length and contains no split characters.');\r\n\t\tconst messages = [''];\r\n\t\tlet msg = 0;\r\n\t\tfor(let i = 0; i < splitText.length; i++) {\r\n\t\t\tif(messages[msg].length + splitText[i].length + 1 > maxLength) {\r\n\t\t\t\tmessages.push('');\r\n\t\t\t\tmsg++;\r\n\t\t\t}\r\n\t\t\tmessages[msg] += (messages[msg].length > 0 ? '\\n' : '') + splitText[i];\r\n\t\t}\r\n\t\treturn messages;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text - The text to convert\r\n\t * @return {string} The converted text\r\n\t * @see {@link Util#nbsp}\r\n\t */\r\n\tnbsp(text) {\r\n\t\treturn this.constructor.nbsp(text);\r\n\t}\r\n\r\n\t/**\r\n\t * Convert spaces to non-breaking spaces\r\n\t * @param {string} text - The text to convert\r\n\t * @return {string} The converted text\r\n\t * @see {@link Util#nbsp}\r\n\t */\r\n\tstatic nbsp(text) {\r\n\t\treturn String(text).replace(spacePattern, nbsp);\r\n\t}\r\n\r\n\t/**\r\n\t * Useful pattern constants\r\n\t * @type {PatternConstants}\r\n\t * @see {@link Util#patterns}\r\n\t */\r\n\tstatic get patterns() {\r\n\t\treturn patterns;\r\n\t}\r\n}\r\n\r\nconst nbsp = '\\xa0';\r\nconst spacePattern = / /g;\r\n\r\n/**\r\n * @typedef {Object} PatternConstants\r\n * @property {RegExp} userID - A pattern to match a user ID from a raw ID string or mention\r\n * @property {RegExp} roleID - A pattern to match a role ID from a raw ID string or mention\r\n * @property {RegExp} channelID - A pattern to match a channel ID from a raw ID string or mention\r\n * @property {RegExp} allUserMentions - A pattern to to match all mentions that would notify users\r\n */\r\nconst patterns = {\r\n\tuserID: /^(?:<@!?)?([0-9]+)>?$/,\r\n\troleID: /^(?:<@&)?([0-9]+)>?$/,\r\n\tchannelID: /^(?:<#)?([0-9]+)>?$/,\r\n\tallUserMentions: /@everyone|@here|<@(?:!|&)?[0-9]+>/gi\r\n};\r\n"
  },
  {
    "__docId__": 167,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BotUtil",
    "memberof": "src/util.js",
    "longname": "src/util.js~BotUtil",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/util.js",
    "importStyle": "BotUtil",
    "description": "Contains general utility methods.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#constructor",
    "access": null,
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Discord.js Client to use"
      },
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#client",
    "access": null,
    "description": "The Discord.js Client",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Client"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "settings",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#settings",
    "access": null,
    "description": "The setting storage",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "SettingStorage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#config",
    "access": null,
    "description": "The bot config",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "BotConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "patterns",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#patterns",
    "access": null,
    "description": "Useful pattern constants",
    "see": [
      "{@link Util.patterns}"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "PatternConstants"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "usage",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#usage",
    "access": null,
    "description": "",
    "see": [
      "{@link Util.usage}"
    ],
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The short command string (ex. \"roll d20\")"
      },
      {
        "nullable": true,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "server",
        "description": "The Discord.js Server instance of the server to use the prefix of"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "onlyMention",
        "description": "Whether or not the usage string should only show the mention form"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The command usage string"
    },
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "usage",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil.usage",
    "access": null,
    "description": "Build a command usage string",
    "see": [
      "{@link Util#usage}"
    ],
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": "The Discord.js Client to use"
      },
      {
        "nullable": null,
        "types": [
          "SettingStorage"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "The setting storage to use"
      },
      {
        "nullable": null,
        "types": [
          "BotConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The bot config to use"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The short command string (ex. \"roll d20\")"
      },
      {
        "nullable": true,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "server",
        "description": "The Discord.js Server instance of the server to use the prefix of"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "onlyMention",
        "description": "Whether or not the usage string should only show the mention form"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The command usage string"
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disambiguation",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#disambiguation",
    "access": null,
    "description": "",
    "see": [
      "{@link Util.disambiguation}"
    ],
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to make the disambiguation list for"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The text to refer to the items as (ex. \"characters\")"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "property",
        "description": "The property on items to display in the list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The disambiguation list"
    },
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "disambiguation",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil.disambiguation",
    "access": null,
    "description": "Build a disambiguation list - useful for telling a user to be more specific when finding partial matches from a command",
    "see": [
      "{@link Util#disambiguation}"
    ],
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to make the disambiguation list for"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The text to refer to the items as (ex. \"characters\")"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "property",
        "description": "The property on items to display in the list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The disambiguation list"
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paginate",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#paginate",
    "access": null,
    "description": "",
    "see": [
      "{@link Util.paginate}"
    ],
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to paginate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "page",
        "description": "The page to select"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "pageLength",
        "description": "The number of items per page"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "The chunk of items for the current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "The current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxPage",
        "description": "The maximum page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pageLength",
        "description": "The numer of items per page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pageText",
        "description": "The current page string (\"page x of y\")"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The resulting paginated object"
    },
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "paginate",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil.paginate",
    "access": null,
    "description": "Paginate an array of items",
    "see": [
      "{@link Util#paginate}"
    ],
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to paginate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "page",
        "description": "The page to select"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "pageLength",
        "description": "The number of items per page"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "The chunk of items for the current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "The current page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxPage",
        "description": "The maximum page"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pageLength",
        "description": "The numer of items per page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pageText",
        "description": "The current page string (\"page x of y\")"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The resulting paginated object"
    },
    "generator": false
  },
  {
    "__docId__": 179,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#search",
    "access": null,
    "description": "",
    "see": [
      "{@link Util.search}"
    ],
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to search in"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchString",
        "description": "The string to search for"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "An options object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "options.property",
        "description": "The property on items to search against"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.searchInexact",
        "description": "Whether or not to search for inexact matches"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.searchExact",
        "description": "Whether or not to search for exact matches (will narrow down inexact matches if applicable)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.useStartsWith",
        "description": "Whether or not to search inexact by checking to see if the item starts with the search string rather than contains"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "The matched items"
    },
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "search",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil.search",
    "access": null,
    "description": "Search for matches in a list of items",
    "see": [
      "{@link Util#search}"
    ],
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "An array of items to search in"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchString",
        "description": "The string to search for"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "An options object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "name",
        "defaultRaw": "name",
        "name": "options.property",
        "description": "The property on items to search against"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.searchInexact",
        "description": "Whether or not to search for inexact matches"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.searchExact",
        "description": "Whether or not to search for exact matches (will narrow down inexact matches if applicable)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.useStartsWith",
        "description": "Whether or not to search inexact by checking to see if the item starts with the search string rather than contains"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "The matched items"
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "split",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#split",
    "access": null,
    "description": "",
    "see": [
      "{@link Util.split}"
    ],
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The string to split"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1925",
        "defaultRaw": 1925,
        "name": "maxLength",
        "description": "The maximum length of each split string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\\n",
        "defaultRaw": "\\n",
        "name": "splitOn",
        "description": "The characters to split the string with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "The split strings"
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "split",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil.split",
    "access": null,
    "description": "Splits a string using specified characters into multiple strings of a maximum length",
    "see": [
      "{@link Util#split}"
    ],
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The string to split"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1925",
        "defaultRaw": 1925,
        "name": "maxLength",
        "description": "The maximum length of each split string"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\\n",
        "defaultRaw": "\\n",
        "name": "splitOn",
        "description": "The characters to split the string with"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "The split strings"
    },
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nbsp",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil#nbsp",
    "access": null,
    "description": "",
    "see": [
      "{@link Util#nbsp}"
    ],
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The converted text"
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "nbsp",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil.nbsp",
    "access": null,
    "description": "Convert spaces to non-breaking spaces",
    "see": [
      "{@link Util#nbsp}"
    ],
    "lineNumber": 254,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to convert"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The converted text"
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "get",
    "static": true,
    "variation": null,
    "name": "patterns",
    "memberof": "src/util.js~BotUtil",
    "longname": "src/util.js~BotUtil.patterns",
    "access": null,
    "description": "Useful pattern constants",
    "see": [
      "{@link Util#patterns}"
    ],
    "lineNumber": 263,
    "type": {
      "nullable": null,
      "types": [
        "PatternConstants"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "nbsp",
    "memberof": "src/util.js",
    "longname": "src/util.js~nbsp",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "spacePattern",
    "memberof": "src/util.js",
    "longname": "src/util.js~spacePattern",
    "access": null,
    "export": false,
    "importPath": "discord-graf/src/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "PatternConstants",
    "memberof": "src/util.js",
    "longname": "src/util.js~PatternConstants",
    "access": null,
    "description": "",
    "lineNumber": 278,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "userID",
        "description": "A pattern to match a user ID from a raw ID string or mention"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "roleID",
        "description": "A pattern to match a role ID from a raw ID string or mention"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "channelID",
        "description": "A pattern to match a channel ID from a raw ID string or mention"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "allUserMentions",
        "description": "A pattern to to match all mentions that would notify users"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PatternConstants"
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/version.js",
    "memberof": null,
    "longname": "src/version.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use babel';\r\n'use strict';\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join as pathJoin } from 'path';\r\n\r\nexport const version = JSON.parse(readFileSync(pathJoin(__dirname, '../package.json'))).version;\r\nexport default version;\r\n"
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "version",
    "memberof": "src/version.js",
    "longname": "src/version.js~version",
    "access": null,
    "export": true,
    "importPath": "discord-graf/src/version.js",
    "importStyle": "{version}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]